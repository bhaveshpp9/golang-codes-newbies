\\ Exceptions Handling â€” Catch all exceptions

In Go, you handle exceptions and panics using the `recover` function within a deferred function. By using `recover`, you can catch any panic that occurs within a specific scope and handle it gracefully. Although Go doesn't have traditional exception handling like `try-catch` in other languages, you can achieve similar functionality with `panic` and `recover`.

### Example: Catch All Exceptions

Here's how you can catch all exceptions (panics) in Go using a deferred function and `recover`:

```go
package main

import (
	"fmt"
)

func main() {
	// Set up deferred function to catch all panics
	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("Caught a panic: %v\n", r)
		}
	}()

	// Call a function that may panic
	dangerousOperation()

	fmt.Println("Program continues execution")
}

func dangerousOperation() {
	fmt.Println("Performing dangerous operation...")

	// Simulate a panic
	panic("Something went wrong!")

	fmt.Println("This line will not be executed")
}
```

### Explanation

1. **Setting Up Deferred Function:**
   ```go
   defer func() {
       if r := recover(); r != nil {
           fmt.Printf("Caught a panic: %v\n", r)
       }
   }()
   ```
   This deferred function will catch any panic that occurs within the `main` function. The `recover` function returns the value passed to `panic`, if any, allowing you to handle the panic.

2. **Simulating a Panic:**
   ```go
   panic("Something went wrong!")
   ```
   The `dangerousOperation` function simulates an error by calling `panic`. This will stop the normal flow of the program and transfer control to the nearest deferred function that calls `recover`.

3. **Handling the Panic:**
   The deferred function catches the panic, and the program prints the panic message, then continues execution.

### Practical Use Case: Network Operation

Here's a practical example where a network operation might panic, and you handle it using `recover`:

```go
package main

import (
	"fmt"
	"net/http"
)

func main() {
	// Set up deferred function to catch all panics
	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("Caught a panic: %v\n", r)
		}
	}()

	// Perform a network operation that may panic
	err := fetchData("https://invalid-url")
	if err != nil {
		fmt.Printf("Error fetching data: %v\n", err)
	}

	fmt.Println("Program continues execution")
}

func fetchData(url string) (err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("panic occurred: %v", r)
		}
	}()

	resp, err := http.Get(url)
	if err != nil {
		panic(fmt.Sprintf("failed to fetch data: %v", err))
	}
	defer resp.Body.Close()

	// Simulate a panic
	panic("unexpected error during data processing")

	// Process the response...

	return nil
}
```

### Explanation

1. **Deferred Function in `main`:**
   The deferred function in `main` catches any panics that occur within the scope of `main`.

2. **Deferred Function in `fetchData`:**
   A deferred function in `fetchData` catches any panics that occur within this function and converts them into an error that can be returned to the caller.

3. **Network Operation with Panic:**
   The `fetchData` function performs a network operation that may result in a panic. If an error occurs during the `http.Get` call or during data processing, it is caught by the deferred function and returned as an error.

4. **Handling the Panic:**
   In the `main` function, if `fetchData` returns an error, it is handled appropriately, and the program continues execution.

### Conclusion

In Go, you can catch all exceptions (panics) using a combination of deferred functions and the `recover` function. This approach allows you to handle unexpected conditions gracefully, ensuring that your program can recover from errors and continue execution. While Go's error handling idiomatically relies on returned error values, `panic` and `recover` provide a powerful mechanism for dealing with exceptional situations.