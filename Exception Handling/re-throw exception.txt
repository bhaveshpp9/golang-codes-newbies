\\ Exceptions Handling — re-throw exception


In Go, there's no traditional exception handling mechanism like in other languages such as Java or Python. Instead, Go uses error values for handling expected errors and the `panic` and `recover` functions for dealing with exceptional situations. 

If you catch a panic using `recover`, you might want to handle it, log it, or even re-throw it (i.e., cause another panic) if you decide that you cannot fully recover from the situation. Here's how you can handle and re-throw a panic:

### Re-throwing a Panic

When you re-throw a panic, you effectively call `panic` again within your `recover` block. This allows the panic to propagate further up the call stack after you’ve done some intermediate handling.

### Example of Catching and Re-throwing a Panic

```go
package main

import (
	"fmt"
)

func main() {
	defer func() {
		if r := recover(); r != nil {
			fmt.Println("Recovered in main:", r)
			// Re-throwing the panic
			panic(r)
		}
	}()

	fmt.Println("Calling function that panics")
	callPanic()
	fmt.Println("This will not be printed")
}

func callPanic() {
	defer func() {
		if r := recover(); r != nil {
			fmt.Println("Recovered in callPanic:", r)
			// Decide whether to handle or re-throw the panic
			panic(r) // Re-throw the panic
		}
	}()

	fmt.Println("About to panic in callPanic")
	panic("Something went wrong in callPanic")
}
```

### Explanation

1. **Main Function Deferred Recovery:**
   ```go
   defer func() {
       if r := recover(); r != nil {
           fmt.Println("Recovered in main:", r)
           // Re-throwing the panic
           panic(r)
       }
   }()
   ```
   In the `main` function, a deferred function calls `recover` to catch any panic. If a panic is caught, it prints a message and then re-throws the panic by calling `panic(r)`.

2. **Intermediate Function Recovery:**
   ```go
   defer func() {
       if r := recover(); r != nil {
           fmt.Println("Recovered in callPanic:", r)
           // Re-throw the panic
           panic(r)
       }
   }()
   ```
   In the `callPanic` function, a similar deferred function catches the panic, logs it, and re-throws it by calling `panic(r)` again. This allows the panic to propagate back to the `main` function, where it can be caught and handled again.

3. **Panic Trigger:**
   ```go
   panic("Something went wrong in callPanic")
   ```
   This line triggers the initial panic, which is caught by the deferred function in `callPanic`.

### Practical Use Case

Re-throwing a panic can be useful when you want to perform some intermediate cleanup or logging but still want the panic to propagate up to a higher level in the call stack where it can be handled more appropriately.

### Example in a Web Server Context

Here’s an example of using re-throwing a panic in a web server context where an intermediate function handles some cleanup but decides to let the panic propagate:

```go
package main

import (
	"fmt"
	"net/http"
)

func main() {
	http.HandleFunc("/", safeHandler)
	http.ListenAndServe(":8080", nil)
}

func safeHandler(w http.ResponseWriter, r *http.Request) {
	defer func() {
		if err := recover(); err != nil {
			fmt.Println("Recovered in safeHandler:", err)
			// Re-throwing the panic to be handled by a higher-level recover
			panic(err)
		}
	}()

	doSomethingDangerous()

	fmt.Fprintln(w, "This will not be printed if panic occurs")
}

func doSomethingDangerous() {
	defer func() {
		if err := recover(); err != nil {
			fmt.Println("Recovered in doSomethingDangerous:", err)
			// Log and cleanup
			// Re-throwing the panic
			panic(err)
		}
	}()

	// Simulate a panic
	panic("A critical error occurred in doSomethingDangerous")
}
```

### Explanation

1. **Handler Function Recovery:**
   ```go
   defer func() {
       if err := recover(); err != nil {
           fmt.Println("Recovered in safeHandler:", err)
           panic(err) // Re-throw the panic
       }
   }()
   ```
   The `safeHandler` function has a deferred `recover` that logs the panic and re-throws it to be caught by a higher-level recover.

2. **Dangerous Operation Recovery:**
   ```go
   defer func() {
       if err := recover(); err != nil {
           fmt.Println("Recovered in doSomethingDangerous:", err)
           panic(err) // Re-throw the panic
       }
   }()
   ```
   The `doSomethingDangerous` function has a deferred `recover` that logs the panic and re-throws it.

3. **Simulating a Panic:**
   ```go
   panic("A critical error occurred in doSomethingDangerous")
   ```
   This line triggers the panic, which is first caught and logged by `doSomethingDangerous`, then re-thrown and eventually caught by `safeHandler`.

### Conclusion

Re-throwing a panic in Go is a useful technique for handling and logging errors at different levels of your application while allowing the panic to propagate up the call stack for further handling. Use it judiciously to maintain clarity and control over your error-handling logic.