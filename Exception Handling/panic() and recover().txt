\\ Exceptions Handling â€” panic() and recover()

In Go, error handling primarily relies on returning error values. However, for handling truly exceptional situations, Go provides the `panic` and `recover` functions. These functions are used to handle unexpected conditions that the program cannot easily recover from.

### `panic`

The `panic` function is used to stop the normal execution of a program and start panicking. When a function calls `panic`, it stops executing, and any deferred functions are run. After all deferred functions have completed, the program crashes with the panic message.

### `recover`

The `recover` function is used to regain control of a panicking goroutine. `recover` can only be called from within a deferred function. If `recover` is called and the current goroutine is panicking, `recover` will stop the panic and return the value passed to `panic`.

### Example of Using `panic` and `recover`

Here's an example that demonstrates how `panic` and `recover` work together:

```go
package main

import (
	"fmt"
)

func main() {
	fmt.Println("Starting the program")

	// Deferred function to recover from a panic
	defer func() {
		if err := recover(); err != nil {
			fmt.Println("Recovered from panic:", err)
		}
	}()

	fmt.Println("About to panic")
	causePanic()

	fmt.Println("This line will not be executed")
}

func causePanic() {
	panic("Something went wrong!")
}
```

### Explanation

1. **Starting the Program:**
   The program begins and prints "Starting the program".

2. **Deferred Function with `recover`:**
   ```go
   defer func() {
       if err := recover(); err != nil {
           fmt.Println("Recovered from panic:", err)
       }
   }()
   ```
   This deferred function will be executed when the surrounding function (`main`) returns, either normally or due to a panic. If a panic occurs, `recover` will catch it, and the program will print the panic message instead of crashing.

3. **Causing a Panic:**
   ```go
   causePanic()
   ```
   The `causePanic` function is called, which in turn calls `panic("Something went wrong!")`. This triggers a panic, and the deferred function is executed.

4. **Recovering from Panic:**
   The deferred function catches the panic using `recover`, prints "Recovered from panic: Something went wrong!", and prevents the program from crashing.

### Practical Use Case: Handling Panics in a Web Server

In a web server, you might want to handle panics to prevent the server from crashing and instead return an appropriate HTTP error response:

```go
package main

import (
	"fmt"
	"net/http"
)

func main() {
	http.HandleFunc("/", safeHandler)
	http.ListenAndServe(":8080", nil)
}

func safeHandler(w http.ResponseWriter, r *http.Request) {
	defer func() {
		if err := recover(); err != nil {
			http.Error(w, fmt.Sprintf("Internal Server Error: %v", err), http.StatusInternalServerError)
		}
	}()

	doSomethingDangerous()

	fmt.Fprintln(w, "This will not be printed if panic occurs")
}

func doSomethingDangerous() {
	// Simulate a panic
	panic("A critical error occurred!")
}
```

### Explanation

1. **HTTP Handler with Deferred Recovery:**
   ```go
   defer func() {
       if err := recover(); err != nil {
           http.Error(w, fmt.Sprintf("Internal Server Error: %v", err), http.StatusInternalServerError)
       }
   }()
   ```
   This deferred function in `safeHandler` catches any panic that occurs within the HTTP handler, preventing the server from crashing and returning a 500 Internal Server Error response instead.

2. **Simulating a Panic:**
   ```go
   doSomethingDangerous()
   ```
   This function simulates a panic by calling `panic("A critical error occurred!")`.

### Best Practices

1. **Use `panic` for Truly Exceptional Situations:**
   Use `panic` only for situations where the program cannot continue to run, such as unrecoverable errors. For regular error handling, prefer returning error values.

2. **Recover at Higher Levels:**
   Place `recover` in higher-level functions to centralize panic handling and maintain readability.

3. **Clean Up with Deferred Functions:**
   Use deferred functions to clean up resources (e.g., closing files, releasing locks) in case of a panic.

4. **Logging and Monitoring:**
   Log panic messages and stack traces to monitor and debug issues in production.

### Conclusion

Using `panic` and `recover` in Go allows for handling unexpected and exceptional conditions gracefully. While `panic` stops the normal execution flow, `recover` provides a way to regain control, ensuring that the program can handle errors without crashing. Proper use of these mechanisms helps maintain robust and reliable applications.