\\ Patterns — creational patterns — Abstract factory


The Abstract Factory pattern is a creational design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes. It allows you to create a suite of products that work together, ensuring that products from one family are used together.

### Key Components

1. **Abstract Factory**: Declares interfaces for creating abstract products.
2. **Concrete Factories**: Implement the creation methods for specific product families.
3. **Abstract Products**: Declare interfaces for a set of related products.
4. **Concrete Products**: Implement the abstract product interfaces.
5. **Client**: Uses the abstract factory to create instances of abstract products.

### Example: GUI Widgets

Let's create an example where different GUI components (buttons and checkboxes) are created by different factories (Windows and Mac).

#### Abstract Products

```go
package main

// Button is the abstract product for buttons
type Button interface {
    Render() string
}

// Checkbox is the abstract product for checkboxes
type Checkbox interface {
    Render() string
}
```

#### Concrete Products

```go
package main

// WindowsButton is a concrete product for Windows buttons
type WindowsButton struct{}

func (b *WindowsButton) Render() string {
    return "Rendering Windows Button"
}

// MacButton is a concrete product for Mac buttons
type MacButton struct{}

func (b *MacButton) Render() string {
    return "Rendering Mac Button"
}

// WindowsCheckbox is a concrete product for Windows checkboxes
type WindowsCheckbox struct{}

func (c *WindowsCheckbox) Render() string {
    return "Rendering Windows Checkbox"
}

// MacCheckbox is a concrete product for Mac checkboxes
type MacCheckbox struct{}

func (c *MacCheckbox) Render() string {
    return "Rendering Mac Checkbox"
}
```

#### Abstract Factory

```go
package main

// GUIFactory is the abstract factory interface
type GUIFactory interface {
    CreateButton() Button
    CreateCheckbox() Checkbox
}
```

#### Concrete Factories

```go
package main

// WindowsFactory is a concrete factory for creating Windows GUI components
type WindowsFactory struct{}

func (f *WindowsFactory) CreateButton() Button {
    return &WindowsButton{}
}

func (f *WindowsFactory) CreateCheckbox() Checkbox {
    return &WindowsCheckbox{}
}

// MacFactory is a concrete factory for creating Mac GUI components
type MacFactory struct{}

func (f *MacFactory) CreateButton() Button {
    return &MacButton{}
}

func (f *MacFactory) CreateCheckbox() Checkbox {
    return &MacCheckbox{}
}
```

#### Client

```go
package main

import "fmt"

// Application is the client that uses the abstract factory to create GUI components
type Application struct {
    factory GUIFactory
}

func NewApplication(factory GUIFactory) *Application {
    return &Application{factory: factory}
}

func (a *Application) CreateUI() {
    button := a.factory.CreateButton()
    checkbox := a.factory.CreateCheckbox()

    fmt.Println(button.Render())
    fmt.Println(checkbox.Render())
}

func main() {
    // Creating a Windows GUI
    windowsFactory := &WindowsFactory{}
    app := NewApplication(windowsFactory)
    app.CreateUI()

    // Creating a Mac GUI
    macFactory := &MacFactory{}
    app = NewApplication(macFactory)
    app.CreateUI()
}
```

### Explanation

1. **Abstract Products**: `Button` and `Checkbox` are interfaces that declare the methods for rendering the respective GUI components.
2. **Concrete Products**: `WindowsButton`, `MacButton`, `WindowsCheckbox`, and `MacCheckbox` implement the `Button` and `Checkbox` interfaces, providing specific render methods for each platform.
3. **Abstract Factory**: The `GUIFactory` interface declares methods for creating abstract products: `CreateButton` and `CreateCheckbox`.
4. **Concrete Factories**: `WindowsFactory` and `MacFactory` implement the `GUIFactory` interface, creating Windows and Mac-specific products.
5. **Client**: The `Application` struct uses the `GUIFactory` to create and render GUI components. It can work with any factory that implements the `GUIFactory` interface.

### Advantages

- **Isolation of Concrete Classes**: The client code works with interfaces, which reduces the dependency on concrete classes.
- **Consistency Among Products**: Ensures that products created by a factory are compatible with each other.
- **Flexibility**: It is easy to change the product family by changing the factory used by the client.

### Disadvantages

- **Complexity**: The pattern adds complexity by introducing many new interfaces and classes.
- **Difficulty in Extending**: Adding new product families requires changes to the abstract factory interface and all its implementations.

By using the Abstract Factory pattern, you can create families of related objects without specifying their concrete classes. This is particularly useful when the system needs to be independent of how its objects are created and when it needs to work with multiple families of products.