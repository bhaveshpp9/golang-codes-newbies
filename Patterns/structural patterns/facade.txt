\\ Patterns — structural patterns — facade


The Facade pattern is a structural design pattern that provides a simplified interface to a complex subsystem. It offers a high-level interface that makes the subsystem easier to use by hiding its complexity and exposing only the necessary functionality. This pattern is particularly useful when dealing with a complex set of classes or APIs.

### Key Components

1. **Facade**: The class that provides a simplified interface to the complex subsystem.
2. **Subsystem Classes**: The classes that make up the subsystem. These classes handle the actual work but are often complex and not directly exposed to the client.

### Example: Home Theater System

Let's create an example where we have a complex home theater system consisting of various components like DVD player, projector, lights, and screen. We will create a Facade to simplify the operation of the home theater system.

#### Subsystem Classes

```go
package main

import "fmt"

// DVDPlayer is a subsystem class
type DVDPlayer struct{}

func (d *DVDPlayer) On() {
    fmt.Println("DVD Player is on")
}

func (d *DVDPlayer) Play(movie string) {
    fmt.Println("Playing movie:", movie)
}

func (d *DVDPlayer) Stop() {
    fmt.Println("Stopping DVD")
}

func (d *DVDPlayer) Off() {
    fmt.Println("DVD Player is off")
}

// Projector is a subsystem class
type Projector struct{}

func (p *Projector) On() {
    fmt.Println("Projector is on")
}

func (p *Projector) Off() {
    fmt.Println("Projector is off")
}

// Lights is a subsystem class
type Lights struct{}

func (l *Lights) Dim() {
    fmt.Println("Lights are dimmed")
}

func (l *Lights) On() {
    fmt.Println("Lights are on")
}

// Screen is a subsystem class
type Screen struct{}

func (s *Screen) Down() {
    fmt.Println("Screen is down")
}

func (s *Screen) Up() {
    fmt.Println("Screen is up")
}
```

#### Facade

```go
package main

// HomeTheaterFacade provides a simplified interface to the complex subsystem
type HomeTheaterFacade struct {
    dvdPlayer *DVDPlayer
    projector *Projector
    lights    *Lights
    screen    *Screen
}

func NewHomeTheaterFacade(dvd *DVDPlayer, projector *Projector, lights *Lights, screen *Screen) *HomeTheaterFacade {
    return &HomeTheaterFacade{
        dvdPlayer: dvd,
        projector: projector,
        lights:    lights,
        screen:    screen,
    }
}

func (h *HomeTheaterFacade) WatchMovie(movie string) {
    fmt.Println("Get ready to watch a movie...")
    h.lights.Dim()
    h.screen.Down()
    h.projector.On()
    h.dvdPlayer.On()
    h.dvdPlayer.Play(movie)
}

func (h *HomeTheaterFacade) EndMovie() {
    fmt.Println("Shutting movie theater down...")
    h.dvdPlayer.Stop()
    h.dvdPlayer.Off()
    h.projector.Off()
    h.screen.Up()
    h.lights.On()
}
```

#### Client

```go
package main

func main() {
    dvdPlayer := &DVDPlayer{}
    projector := &Projector{}
    lights := &Lights{}
    screen := &Screen{}

    homeTheater := NewHomeTheaterFacade(dvdPlayer, projector, lights, screen)

    homeTheater.WatchMovie("Inception")
    // Output:
    // Get ready to watch a movie...
    // Lights are dimmed
    // Screen is down
    // Projector is on
    // DVD Player is on
    // Playing movie: Inception

    homeTheater.EndMovie()
    // Output:
    // Shutting movie theater down...
    // Stopping DVD
    // DVD Player is off
    // Projector is off
    // Screen is up
    // Lights are on
}
```

### Explanation

1. **Subsystem Classes**:
   - `DVDPlayer`, `Projector`, `Lights`, and `Screen` are classes that make up the subsystem. Each class has methods to control its respective component.
2. **Facade**:
   - The `HomeTheaterFacade` class provides a simplified interface to the complex home theater system. It aggregates the subsystem classes and exposes high-level methods (`WatchMovie` and `EndMovie`) that encapsulate the complexity of coordinating the subsystems.
3. **Client**:
   - The client code interacts with the `HomeTheaterFacade` to control the home theater system without dealing with the complexity of the subsystem classes.

### Advantages

- **Simplified Interface**: The Facade pattern provides a simple interface to a complex subsystem, making it easier to use.
- **Decoupling**: It decouples the client code from the subsystem, making the system more flexible and easier to maintain.
- **Improved Code Readability**: By providing a clear and concise interface, the Facade pattern improves the readability and maintainability of the code.

### Disadvantages

- **Not Always Necessary**: Introducing a Facade can add unnecessary complexity if the subsystem is not complex.
- **Potential Overhead**: The Facade pattern can add a layer of abstraction that might lead to slight performance overhead.

By using the Facade pattern, you can simplify interactions with complex subsystems, making your code cleaner and more maintainable. This pattern is particularly useful when dealing with complex libraries or frameworks, providing a high-level interface that encapsulates the complexity.