\\ Patterns — structural patterns — bridge


The Bridge pattern is a structural design pattern that decouples an abstraction from its implementation so that the two can vary independently. This pattern is useful when both the abstractions and their implementations can have multiple variations and should be extensible independently.

### Key Components

1. **Abstraction**: Defines the interface for the abstraction's part of the object and maintains a reference to an object of type `Implementor`.
2. **Refined Abstraction**: Extends the interface defined by Abstraction.
3. **Implementor**: Defines the interface for implementation classes.
4. **Concrete Implementors**: Implements the `Implementor` interface.

### Example: Shape and Color

Let's create an example where we have different shapes (Circle and Square) that can be drawn in different colors (Red and Blue) using the Bridge pattern.

#### Implementor

```go
package main

import "fmt"

// Color is the implementor interface
type Color interface {
    Paint() string
}
```

#### Concrete Implementors

```go
package main

// Red is a concrete implementor for the Color interface
type Red struct{}

func (r *Red) Paint() string {
    return "Red"
}

// Blue is a concrete implementor for the Color interface
type Blue struct{}

func (b *Blue) Paint() string {
    return "Blue"
}
```

#### Abstraction

```go
package main

// Shape is the abstraction interface that maintains a reference to a Color
type Shape interface {
    Draw() string
}
```

#### Refined Abstraction

```go
package main

// Circle is a refined abstraction that extends Shape
type Circle struct {
    color Color
}

func NewCircle(color Color) *Circle {
    return &Circle{color: color}
}

func (c *Circle) Draw() string {
    return "Circle in " + c.color.Paint() + " color"
}

// Square is a refined abstraction that extends Shape
type Square struct {
    color Color
}

func NewSquare(color Color) *Square {
    return &Square{color: color}
}

func (s *Square) Draw() string {
    return "Square in " + s.color.Paint() + " color"
}
```

#### Client

```go
package main

import "fmt"

func main() {
    red := &Red{}
    blue := &Blue{}

    redCircle := NewCircle(red)
    blueCircle := NewCircle(blue)

    redSquare := NewSquare(red)
    blueSquare := NewSquare(blue)

    fmt.Println(redCircle.Draw())  // Output: Circle in Red color
    fmt.Println(blueCircle.Draw()) // Output: Circle in Blue color

    fmt.Println(redSquare.Draw())  // Output: Square in Red color
    fmt.Println(blueSquare.Draw()) // Output: Square in Blue color
}
```

### Explanation

1. **Implementor**: The `Color` interface defines the `Paint` method.
2. **Concrete Implementors**:
   - `Red` and `Blue` implement the `Color` interface and provide their own implementations of the `Paint` method.
3. **Abstraction**: The `Shape` interface defines the `Draw` method and maintains a reference to an object of type `Color`.
4. **Refined Abstraction**:
   - `Circle` and `Square` are concrete implementations of the `Shape` interface. They extend the `Shape` interface and use the `Color` implementor to draw themselves in different colors.
5. **Client**: The client code creates instances of `Circle` and `Square` with different colors and calls their `Draw` methods.

### Advantages

- **Decoupling**: Decouples the abstraction from its implementation, allowing them to vary independently.
- **Increased Flexibility**: Extending both abstraction and implementation independently is easier.
- **Reusability**: Promotes reusability by allowing the use of different implementations with the same abstraction.

### Disadvantages

- **Complexity**: Introduces additional layers of abstraction, which can make the code more complex and harder to understand.

By using the Bridge pattern, you can decouple the abstraction from its implementation, allowing them to vary independently. This makes your code more flexible and extensible, especially when you need to combine multiple variations of abstractions and implementations.