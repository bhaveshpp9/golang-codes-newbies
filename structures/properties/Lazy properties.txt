\\ Structures — Properties — Lazy properties

In Go, lazy properties can be implemented by deferring the computation of a property until it is actually needed. This can be achieved by using methods to check if a property has already been computed, and if not, compute and store it the first time it is accessed.

### Example: Lazy Properties

Let's create an example using a `Rectangle` struct with a lazy property for the area. The area will only be computed once and cached for subsequent accesses.

#### Step 1: Define the Struct

First, define the `Rectangle` struct with fields for width, height, and a cached area.

```go
package main

import (
    "fmt"
)

// Define the Rectangle struct
type Rectangle struct {
    Width  float64
    Height float64
    area   float64 // Cached area
    areaComputed bool
}
```

#### Step 2: Define a Method for the Lazy Property

Create a method for the `Rectangle` struct that lazily computes the area.

```go
// Method to lazily compute the area of the rectangle
func (r *Rectangle) Area() float64 {
    if !r.areaComputed {
        r.area = r.Width * r.Height
        r.areaComputed = true
    }
    return r.area
}
```

#### Step 3: Use the Method

Finally, use the method in the `main` function.

```go
func main() {
    // Create an instance of Rectangle
    rect := Rectangle{
        Width:  10.5,
        Height: 5.5,
    }

    // Call the Area method multiple times
    fmt.Printf("Area: %.2f\n", rect.Area())
    fmt.Printf("Area: %.2f\n", rect.Area())
}
```

### Explanation

1. **Define the `Rectangle` Struct**:
   - The `Rectangle` struct has fields for `Width` and `Height`, as well as an `area` field to cache the computed area and a boolean `areaComputed` to track if the area has been computed.

2. **Define the `Area` Method**:
   - The `Area` method computes the area of the rectangle if it hasn't been computed yet, stores the result in the `area` field, and sets `areaComputed` to `true`. On subsequent calls, it simply returns the cached area.

3. **Use the Method**:
   - In `main`, an instance of the `Rectangle` struct is created and initialized.
   - The `Area` method is called multiple times to demonstrate that the area is only computed once and cached for subsequent accesses.

### Detailed Output

The output of the above code will be:
```
Area: 57.75
Area: 57.75
```

### Example: Lazy Properties with More Complex Logic

Let's create a `Book` struct with a lazy property for checking availability. The availability status will only be computed once and cached for subsequent accesses.

#### Step 1: Define the Struct

First, define the `Book` struct with fields for the total number of copies, copies on loan, and a cached availability status.

```go
// Define the Book struct
type Book struct {
    Title           string
    Author          string
    TotalCopies     int
    CopiesOnLoan    int
    available       bool // Cached availability status
    availabilityComputed bool
}
```

#### Step 2: Define a Method for the Lazy Property

Create a method for the `Book` struct that lazily checks availability.

```go
// Method to lazily check if the book is available
func (b *Book) IsAvailable() bool {
    if !b.availabilityComputed {
        b.available = b.TotalCopies > b.CopiesOnLoan
        b.availabilityComputed = true
    }
    return b.available
}
```

#### Step 3: Use the Method

Finally, use the method in the `main` function.

```go
func main() {
    // Create an instance of Book
    book := Book{
        Title:        "Go Programming",
        Author:       "John Doe",
        TotalCopies:  5,
        CopiesOnLoan: 2,
    }

    // Call the IsAvailable method multiple times
    fmt.Printf("Is Available: %t\n", book.IsAvailable())
    fmt.Printf("Is Available: %t\n", book.IsAvailable())
}
```

### Explanation

1. **Define the `Book` Struct**:
   - The `Book` struct has fields for `Title`, `Author`, `TotalCopies`, `CopiesOnLoan`, a boolean `available` to cache the availability status, and a boolean `availabilityComputed` to track if the availability has been computed.

2. **Define the `IsAvailable` Method**:
   - The `IsAvailable` method computes the availability status of the book if it hasn't been computed yet, stores the result in the `available` field, and sets `availabilityComputed` to `true`. On subsequent calls, it simply returns the cached availability status.

3. **Use the Method**:
   - In `main`, an instance of the `Book` struct is created and initialized.
   - The `IsAvailable` method is called multiple times to demonstrate that the availability status is only computed once and cached for subsequent accesses.

### Detailed Output

The output of the above code will be:
```
Is Available: true
Is Available: true
```

### Summary

In Go, you can implement lazy properties by using methods that compute and cache values the first time they are accessed. By using fields to store the computed values and flags to indicate whether the computation has been performed, you can ensure that expensive operations are only done once and reused efficiently. This approach helps improve performance and provides a way to manage computed properties in a lazy manner.