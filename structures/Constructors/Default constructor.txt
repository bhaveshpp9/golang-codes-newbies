\\ Structures — Constructors — Default constructor


In Go, there is no concept of default constructors as in some other languages like Java or C#. However, you can simulate default constructors by defining functions that return instances of structs with default values. These functions are commonly referred to as constructor functions.

### Example: Default Constructor Function

Let's illustrate this with an example where we have a `Person` struct and a default constructor function that initializes it with default values.

#### Step 1: Define the Struct

First, define the `Person` struct.

```go
package main

import (
    "fmt"
)

// Define the Person struct
type Person struct {
    FirstName string
    LastName  string
    Age       int
}
```

#### Step 2: Define the Default Constructor Function

Create a constructor function to initialize the `Person` struct with default values.

```go
// Default constructor function for Person
func NewDefaultPerson() Person {
    return Person{
        FirstName: "John",
        LastName:  "Doe",
        Age:       30,
    }
}
```

#### Step 3: Use the Constructor Function

Finally, use the constructor function in the `main` function.

```go
func main() {
    // Create a Person using the default constructor
    person := NewDefaultPerson()
    fmt.Printf("Default Person: %+v\n", person)
}
```

### Explanation

1. **Define the `Person` Struct**:
   - The `Person` struct has three fields: `FirstName`, `LastName`, and `Age`.

2. **Define the Default Constructor Function**:
   - The `NewDefaultPerson` function initializes and returns a `Person` struct with default values: "John" for `FirstName`, "Doe" for `LastName`, and `30` for `Age`.

3. **Use the Constructor Function**:
   - In `main`, we call `NewDefaultPerson` to create a `Person` instance with default values and print it.

### Detailed Output

The output of the above code will be:
```
Default Person: {FirstName:John LastName:Doe Age:30}
```

### Example: Default Constructor Function with Parameters

You can also create a constructor function that accepts parameters to allow for both default and custom initialization.

#### Step 1: Define the Struct

First, define the `Person` struct.

```go
package main

import (
    "fmt"
)

// Define the Person struct
type Person struct {
    FirstName string
    LastName  string
    Age       int
}
```

#### Step 2: Define the Constructor Functions

Create constructor functions to initialize the `Person` struct with default and custom values.

```go
// Default constructor function for Person
func NewDefaultPerson() Person {
    return Person{
        FirstName: "John",
        LastName:  "Doe",
        Age:       30,
    }
}

// Custom constructor function for Person
func NewCustomPerson(firstName, lastName string, age int) Person {
    return Person{
        FirstName: firstName,
        LastName:  lastName,
        Age:       age,
    }
}
```

#### Step 3: Use the Constructor Functions

Finally, use the constructor functions in the `main` function.

```go
func main() {
    // Create a Person using the default constructor
    defaultPerson := NewDefaultPerson()
    fmt.Printf("Default Person: %+v\n", defaultPerson)

    // Create a Person using the custom constructor
    customPerson := NewCustomPerson("Alice", "Smith", 25)
    fmt.Printf("Custom Person: %+v\n", customPerson)
}
```

### Explanation

1. **Define the `Person` Struct**:
   - The `Person` struct has three fields: `FirstName`, `LastName`, and `Age`.

2. **Define the Default Constructor Function**:
   - The `NewDefaultPerson` function initializes and returns a `Person` struct with default values: "John" for `FirstName`, "Doe" for `LastName`, and `30` for `Age`.

3. **Define the Custom Constructor Function**:
   - The `NewCustomPerson` function initializes and returns a `Person` struct with values provided by the caller.

4. **Use the Constructor Functions**:
   - In `main`, we call `NewDefaultPerson` to create a `Person` instance with default values and `NewCustomPerson` to create a `Person` instance with custom values. Both instances are printed.

### Detailed Output

The output of the above code will be:
```
Default Person: {FirstName:John LastName:Doe Age:30}
Custom Person: {FirstName:Alice LastName:Smith Age:25}
```

### Summary

In Go, you can simulate default constructors by defining constructor functions that initialize structs with default values. This approach allows you to provide both default and custom initialization for your structs, promoting code reuse and maintainability. By using these constructor functions, you can ensure that your structs are always initialized with valid and consistent data.