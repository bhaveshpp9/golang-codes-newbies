\\ Structures — Constructors — without any parameters


In Go, you can create a constructor function for a struct that doesn't take any parameters. This type of constructor function typically initializes the struct with default values. Even though Go doesn't have constructors in the traditional sense like some object-oriented languages, creating these functions can help ensure that your structs are always initialized properly.

### Example: Constructor Function Without Parameters

Let's create a `Person` struct and a default constructor function that initializes it with default values.

#### Step 1: Define the Struct

First, define the `Person` struct.

```go
package main

import (
    "fmt"
)

// Define the Person struct
type Person struct {
    FirstName string
    LastName  string
    Age       int
}
```

#### Step 2: Define the Default Constructor Function

Create a constructor function that initializes the `Person` struct with default values.

```go
// Default constructor function for Person
func NewPerson() Person {
    return Person{
        FirstName: "John",
        LastName:  "Doe",
        Age:       30,
    }
}
```

#### Step 3: Use the Constructor Function

Finally, use the constructor function in the `main` function.

```go
func main() {
    // Create a Person using the default constructor
    person := NewPerson()
    fmt.Printf("Person: %+v\n", person)
}
```

### Explanation

1. **Define the `Person` Struct**:
   - The `Person` struct has three fields: `FirstName`, `LastName`, and `Age`.

2. **Define the Default Constructor Function**:
   - The `NewPerson` function initializes and returns a `Person` struct with default values: "John" for `FirstName`, "Doe" for `LastName`, and `30` for `Age`.

3. **Use the Constructor Function**:
   - In `main`, we call `NewPerson` to create a `Person` instance with default values and print it.

### Detailed Output

The output of the above code will be:
```
Person: {FirstName:John LastName:Doe Age:30}
```

### Example: Default Constructor for Structs with Nested Structs

You can also create default constructors for structs that contain nested structs.

#### Step 1: Define the Structs

First, define the `Address` and `Person` structs.

```go
// Define the Address struct
type Address struct {
    Street string
    City   string
    State  string
    Zip    string
}

// Define the Person struct with an Address field
type Person struct {
    FirstName string
    LastName  string
    Age       int
    Address   Address
}
```

#### Step 2: Define the Default Constructor Function

Create a constructor function that initializes the `Person` struct and its nested `Address` struct with default values.

```go
// Default constructor function for Person
func NewPerson() Person {
    return Person{
        FirstName: "John",
        LastName:  "Doe",
        Age:       30,
        Address: Address{
            Street: "123 Main St",
            City:   "Anytown",
            State:  "CA",
            Zip:    "12345",
        },
    }
}
```

#### Step 3: Use the Constructor Function

Finally, use the constructor function in the `main` function.

```go
func main() {
    // Create a Person using the default constructor
    person := NewPerson()
    fmt.Printf("Person: %+v\n", person)
}
```

### Explanation

1. **Define the `Address` and `Person` Structs**:
   - The `Address` struct has four fields: `Street`, `City`, `State`, and `Zip`.
   - The `Person` struct has four fields: `FirstName`, `LastName`, `Age`, and an `Address` field of type `Address`.

2. **Define the Default Constructor Function**:
   - The `NewPerson` function initializes and returns a `Person` struct with default values, including default values for the nested `Address` struct.

3. **Use the Constructor Function**:
   - In `main`, we call `NewPerson` to create a `Person` instance with default values and print it.

### Detailed Output

The output of the above code will be:
```
Person: {FirstName:John LastName:Doe Age:30 Address:{Street:123 Main St City:Anytown State:CA Zip:12345}}
```

### Summary

In Go, you can create constructor functions that initialize structs with default values. These functions can help ensure that your structs are always initialized properly, even when no parameters are provided. This approach is useful for providing default configurations and promoting consistent initialization throughout your code. By using these constructor functions, you can create instances of your structs with predefined values, ensuring that they start in a valid and predictable state.