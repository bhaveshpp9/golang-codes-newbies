\\ Structures — Constructors — Optional parameter values


In Go, you can't directly use optional parameters like in some other languages. However, you can simulate optional parameters in constructor functions by using variadic functions, which allow you to pass a variable number of arguments, or by passing a struct with configuration options.

### Example: Using Variadic Functions

Let's consider an example where we use variadic functions to simulate optional parameters in a constructor for a `Person` struct.

#### Step 1: Define the Struct

First, define the `Person` struct.

```go
package main

import (
    "fmt"
)

// Define the Person struct
type Person struct {
    FirstName string
    LastName  string
    Age       int
}
```

#### Step 2: Define the Constructor Function with Variadic Parameters

Create a constructor function that accepts variadic parameters and assigns default values if the parameters are not provided.

```go
// Constructor function for Person with optional parameters
func NewPerson(firstName string, lastName string, age ...int) Person {
    p := Person{
        FirstName: firstName,
        LastName:  lastName,
        Age:       30, // default age
    }

    if len(age) > 0 {
        p.Age = age[0]
    }

    return p
}
```

#### Step 3: Use the Constructor Function

Finally, use the constructor function in the `main` function.

```go
func main() {
    // Create a Person using the constructor with default age
    person1 := NewPerson("John", "Doe")
    fmt.Printf("Person1: %+v\n", person1)

    // Create a Person using the constructor with custom age
    person2 := NewPerson("Alice", "Smith", 25)
    fmt.Printf("Person2: %+v\n", person2)
}
```

### Explanation

1. **Define the `Person` Struct**:
   - The `Person` struct has three fields: `FirstName`, `LastName`, and `Age`.

2. **Define the Constructor Function with Variadic Parameters**:
   - The `NewPerson` function initializes and returns a `Person` struct with default values for `Age`.
   - If an age is provided as an optional parameter, it overrides the default age.

3. **Use the Constructor Function**:
   - In `main`, we create two `Person` instances: one using the default age and another with a custom age. Both instances are printed.

### Detailed Output

The output of the above code will be:
```
Person1: {FirstName:John LastName:Doe Age:30}
Person2: {FirstName:Alice LastName:Smith Age:25}
```

### Example: Using a Configuration Struct

Another approach is to use a configuration struct to pass optional parameters.

#### Step 1: Define the Struct

First, define the `Person` struct.

```go
package main

import (
    "fmt"
)

// Define the Person struct
type Person struct {
    FirstName string
    LastName  string
    Age       int
}
```

#### Step 2: Define the Configuration Struct

Define a configuration struct that includes optional parameters.

```go
// Define the PersonConfig struct
type PersonConfig struct {
    FirstName string
    LastName  string
    Age       int
}

// Default values for PersonConfig
func defaultPersonConfig() PersonConfig {
    return PersonConfig{
        Age: 30, // default age
    }
}
```

#### Step 3: Define the Constructor Function

Create a constructor function that accepts the configuration struct.

```go
// Constructor function for Person using PersonConfig
func NewPersonWithConfig(config PersonConfig) Person {
    return Person{
        FirstName: config.FirstName,
        LastName:  config.LastName,
        Age:       config.Age,
    }
}
```

#### Step 4: Use the Constructor Function

Finally, use the constructor function in the `main` function.

```go
func main() {
    // Create a Person using the constructor with default config
    defaultConfig := defaultPersonConfig()
    defaultConfig.FirstName = "John"
    defaultConfig.LastName = "Doe"
    person1 := NewPersonWithConfig(defaultConfig)
    fmt.Printf("Person1: %+v\n", person1)

    // Create a Person using the constructor with custom config
    customConfig := PersonConfig{
        FirstName: "Alice",
        LastName:  "Smith",
        Age:       25,
    }
    person2 := NewPersonWithConfig(customConfig)
    fmt.Printf("Person2: %+v\n", person2)
}
```

### Explanation

1. **Define the `Person` Struct**:
   - The `Person` struct has three fields: `FirstName`, `LastName`, and `Age`.

2. **Define the Configuration Struct and Default Values**:
   - The `PersonConfig` struct contains the fields used to configure a `Person`.
   - The `defaultPersonConfig` function returns a `PersonConfig` with default values for `Age`.

3. **Define the Constructor Function**:
   - The `NewPersonWithConfig` function initializes and returns a `Person` struct using values from the `PersonConfig`.

4. **Use the Constructor Function**:
   - In `main`, we create two `Person` instances: one using default configuration values and another with custom configuration values. Both instances are printed.

### Detailed Output

The output of the above code will be:
```
Person1: {FirstName:John LastName:Doe Age:30}
Person2: {FirstName:Alice LastName:Smith Age:25}
```

### Summary

In Go, you can simulate optional parameters in constructor functions by using variadic functions or configuration structs. Variadic functions allow you to pass a variable number of arguments, while configuration structs provide a flexible way to pass optional parameters with default values. Both approaches help you create flexible and maintainable constructor functions in Go.