\\ Structures â€” Check for reference equality


In Go, checking for reference equality means determining whether two variables refer to the same instance of a struct. This is relevant primarily when working with pointers to structs. When comparing two struct instances directly, Go compares their fields for value equality, not reference equality. To check if two struct pointers point to the same instance, you can use the `==` operator.

### Example: Checking Reference Equality

Let's create an example to illustrate how to check for reference equality with struct pointers.

#### Example Code

```go
package main

import (
    "fmt"
)

// Define the Person struct
type Person struct {
    FirstName string
    LastName  string
    Age       int
}

func main() {
    // Create two different Person instances
    person1 := &Person{FirstName: "Alice", LastName: "Johnson", Age: 28}
    person2 := &Person{FirstName: "Alice", LastName: "Johnson", Age: 28}

    // Create another pointer pointing to the same instance as person1
    person3 := person1

    // Check for value equality
    fmt.Printf("person1 == person2 (value equality): %v\n", *person1 == *person2)

    // Check for reference equality
    fmt.Printf("person1 == person2 (reference equality): %v\n", person1 == person2)
    fmt.Printf("person1 == person3 (reference equality): %v\n", person1 == person3)
}
```

### Explanation

1. **Define the `Person` Struct**:
   - The `Person` struct has three fields: `FirstName`, `LastName`, and `Age`.

2. **Create Two Different `Person` Instances**:
   - `person1` and `person2` are two different instances of `Person` with the same field values.
   - `person3` is another pointer pointing to the same instance as `person1`.

3. **Check for Value Equality**:
   - We use `*person1 == *person2` to check if the values of `person1` and `person2` are equal. This compares the fields of the structs.

4. **Check for Reference Equality**:
   - We use `person1 == person2` to check if `person1` and `person2` point to the same instance.
   - We use `person1 == person3` to check if `person1` and `person3` point to the same instance.

### Detailed Output

The output of the above code will be:
```
person1 == person2 (value equality): true
person1 == person2 (reference equality): false
person1 == person3 (reference equality): true
```

### Summary

In Go, reference equality checks whether two pointers point to the same memory address, i.e., the same instance of a struct. This is achieved by directly comparing the pointers using the `==` operator. Value equality, on the other hand, compares the actual data within the structs. By understanding and utilizing both types of comparisons, you can effectively manage and compare struct instances in Go.