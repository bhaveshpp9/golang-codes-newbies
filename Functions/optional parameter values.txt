\\ Functions â€” optional parameter values


In Go, there is no built-in support for optional parameters or default parameter values as seen in some other languages like Python or JavaScript. However, you can achieve similar functionality using a few idiomatic approaches:

1. **Variadic Functions:** Use variadic parameters for optional arguments.
2. **Structs with Fields:** Use structs to pass multiple optional parameters.
3. **Functional Options:** Use functional options to configure parameters.

### Using Variadic Functions

Variadic functions allow you to pass a variable number of arguments of the same type. You can use this feature to simulate optional parameters.

#### Example: Variadic Function with Optional Parameters

```go
package main

import "fmt"

// greet takes a name and an optional list of greetings
func greet(name string, greetings ...string) {
	if len(greetings) == 0 {
		fmt.Printf("Hello, %s!\n", name)
	} else {
		for _, greeting := range greetings {
			fmt.Printf("%s, %s!\n", greeting, name)
		}
	}
}

func main() {
	greet("Alice")                        // Default greeting
	greet("Bob", "Hi")                    // One optional greeting
	greet("Charlie", "Good morning", "Hi") // Multiple optional greetings
}
```

### Explanation

1. **Defining the Variadic Function:**
   ```go
   func greet(name string, greetings ...string) {
       if len(greetings) == 0 {
           fmt.Printf("Hello, %s!\n", name)
       } else {
           for _, greeting := range greetings {
               fmt.Printf("%s, %s!\n", greeting, name)
           }
       }
   }
   ```
   The `greet` function takes a mandatory `name` parameter and a variadic `greetings` parameter. If no greetings are provided, it defaults to "Hello".

2. **Calling the Function:**
   ```go
   func main() {
       greet("Alice")                        // Default greeting
       greet("Bob", "Hi")                    // One optional greeting
       greet("Charlie", "Good morning", "Hi") // Multiple optional greetings
   }
   ```
   The `main` function demonstrates calling `greet` with different numbers of greeting arguments.

### Using Structs with Fields

Another approach is to use a struct to encapsulate parameters, including optional ones. This allows you to provide a more flexible interface.

#### Example: Using Structs for Optional Parameters

```go
package main

import "fmt"

type Config struct {
	Prefix string
	Suffix string
}

func greet(name string, cfg *Config) {
	prefix := ""
	suffix := ""
	if cfg != nil {
		prefix = cfg.Prefix
		suffix = cfg.Suffix
	}
	fmt.Printf("%s%s%s\n", prefix, name, suffix)
}

func main() {
	greet("Alice", nil) // No optional parameters

	cfg := &Config{
		Prefix: "Dr. ",
		Suffix: " Jr.",
	}
	greet("Bob", cfg) // Optional parameters provided
}
```

### Explanation

1. **Defining the Config Struct:**
   ```go
   type Config struct {
       Prefix string
       Suffix string
   }
   ```
   The `Config` struct holds optional parameters.

2. **Using the Config Struct:**
   ```go
   func greet(name string, cfg *Config) {
       prefix := ""
       suffix := ""
       if cfg != nil {
           prefix = cfg.Prefix
           suffix = cfg.Suffix
       }
       fmt.Printf("%s%s%s\n", prefix, name, suffix)
   }
   ```
   The `greet` function takes a mandatory `name` parameter and a pointer to a `Config` struct for optional parameters.

3. **Calling the Function:**
   ```go
   func main() {
       greet("Alice", nil) // No optional parameters

       cfg := &Config{
           Prefix: "Dr. ",
           Suffix: " Jr.",
       }
       greet("Bob", cfg) // Optional parameters provided
   }
   ```
   The `main` function demonstrates calling `greet` with and without optional parameters using a `Config` struct.

### Using Functional Options

Functional options provide a more advanced and flexible way to handle optional parameters. This approach involves passing configuration functions to the main function to set optional parameters.

#### Example: Using Functional Options

```go
package main

import "fmt"

type Config struct {
	Prefix string
	Suffix string
}

type Option func(*Config)

func WithPrefix(prefix string) Option {
	return func(cfg *Config) {
		cfg.Prefix = prefix
	}
}

func WithSuffix(suffix string) Option {
	return func(cfg *Config) {
		cfg.Suffix = suffix
	}
}

func greet(name string, opts ...Option) {
	cfg := &Config{}
	for _, opt := range opts {
		opt(cfg)
	}
	fmt.Printf("%s%s%s\n", cfg.Prefix, name, cfg.Suffix)
}

func main() {
	greet("Alice") // No optional parameters

	greet("Bob", WithPrefix("Dr. "), WithSuffix(" Jr.")) // Optional parameters provided
}
```

### Explanation

1. **Defining the Config Struct and Options:**
   ```go
   type Config struct {
       Prefix string
       Suffix string
   }

   type Option func(*Config)

   func WithPrefix(prefix string) Option {
       return func(cfg *Config) {
           cfg.Prefix = prefix
       }
   }

   func WithSuffix(suffix string) Option {
       return func(cfg *Config) {
           cfg.Suffix = suffix
       }
   }
   ```
   The `Config` struct holds optional parameters. Functions like `WithPrefix` and `WithSuffix` return `Option` functions that modify the `Config` struct.

2. **Using Functional Options:**
   ```go
   func greet(name string, opts ...Option) {
       cfg := &Config{}
       for _, opt := range opts {
           opt(cfg)
       }
       fmt.Printf("%s%s%s\n", cfg.Prefix, name, cfg.Suffix)
   }
   ```
   The `greet` function takes a mandatory `name` parameter and a variadic `opts` parameter for options. It applies each option to the `Config` struct.

3. **Calling the Function:**
   ```go
   func main() {
       greet("Alice") // No optional parameters

       greet("Bob", WithPrefix("Dr. "), WithSuffix(" Jr.")) // Optional parameters provided
   }
   ```
   The `main` function demonstrates calling `greet` with and without optional parameters using functional options.

### Conclusion

While Go does not natively support optional parameters or default values, you can achieve similar functionality using variadic functions, structs with fields, or functional options. These idiomatic approaches provide flexibility and maintain the clarity and simplicity that Go promotes.