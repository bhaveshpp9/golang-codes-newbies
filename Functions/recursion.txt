\\ Functions — recursion


Recursion in programming refers to a function calling itself in order to solve a problem. Recursive functions are particularly useful for problems that can be broken down into smaller, similar sub-problems. In Go, recursion is implemented just like in many other programming languages.

### Example: Factorial Using Recursion

The factorial of a non-negative integer \( n \) is the product of all positive integers less than or equal to \( n \). The factorial of \( n \) can be defined recursively as:
- \( 0! = 1 \)
- \( n! = n \times (n - 1)! \)

Here’s how you can implement a recursive function to calculate the factorial of a number in Go:

```go
package main

import "fmt"

// factorial calculates the factorial of a given number n
func factorial(n int) int {
	if n == 0 {
		return 1
	}
	return n * factorial(n-1)
}

func main() {
	number := 5
	fmt.Printf("Factorial of %d is %d\n", number, factorial(number))
}
```

### Explanation

1. **Defining the Recursive Function:**
   ```go
   func factorial(n int) int {
       if n == 0 {
           return 1
       }
       return n * factorial(n-1)
   }
   ```
   The `factorial` function checks if `n` is 0, in which case it returns 1. Otherwise, it returns `n` multiplied by the result of `factorial(n-1)`.

2. **Calling the Recursive Function:**
   ```go
   func main() {
       number := 5
       fmt.Printf("Factorial of %d is %d\n", number, factorial(number))
   }
   ```
   The `main` function calls the `factorial` function with the argument `5` and prints the result.

### Example: Fibonacci Sequence Using Recursion

The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The \( n \)-th Fibonacci number can be defined recursively as:
- \( F(0) = 0 \)
- \( F(1) = 1 \)
- \( F(n) = F(n-1) + F(n-2) \) for \( n > 1 \)

Here’s how you can implement a recursive function to calculate the \( n \)-th Fibonacci number in Go:

```go
package main

import "fmt"

// fibonacci calculates the nth Fibonacci number
func fibonacci(n int) int {
	if n <= 1 {
		return n
	}
	return fibonacci(n-1) + fibonacci(n-2)
}

func main() {
	number := 10
	fmt.Printf("Fibonacci number %d is %d\n", number, fibonacci(number))
}
```

### Explanation

1. **Defining the Recursive Function:**
   ```go
   func fibonacci(n int) int {
       if n <= 1 {
           return n
       }
       return fibonacci(n-1) + fibonacci(n-2)
   }
   ```
   The `fibonacci` function checks if `n` is less than or equal to 1, in which case it returns `n`. Otherwise, it returns the sum of `fibonacci(n-1)` and `fibonacci(n-2)`.

2. **Calling the Recursive Function:**
   ```go
   func main() {
       number := 10
       fmt.Printf("Fibonacci number %d is %d\n", number, fibonacci(number))
   }
   ```
   The `main` function calls the `fibonacci` function with the argument `10` and prints the result.

### Tail Recursion

Tail recursion is a special case of recursion where the recursive call is the last operation in the function. While Go does not optimize tail-recursive functions to iterative loops, understanding tail recursion is important for optimizing recursive algorithms in other languages that do support such optimizations.

### Example: Tail Recursive Factorial

Here is a tail-recursive version of the factorial function:

```go
package main

import "fmt"

// tailFactorial is a helper function for the tail-recursive calculation
func tailFactorial(n int, accumulator int) int {
	if n == 0 {
		return accumulator
	}
	return tailFactorial(n-1, n*accumulator)
}

// factorial calculates the factorial of a given number n using tail recursion
func factorial(n int) int {
	return tailFactorial(n, 1)
}

func main() {
	number := 5
	fmt.Printf("Factorial of %d is %d\n", number, factorial(number))
}
```

### Explanation

1. **Defining the Tail-Recursive Helper Function:**
   ```go
   func tailFactorial(n int, accumulator int) int {
       if n == 0 {
           return accumulator
       }
       return tailFactorial(n-1, n*accumulator)
   }
   ```
   The `tailFactorial` function performs the recursive call as its last operation, passing an accumulator to hold the intermediate results.

2. **Using the Tail-Recursive Function:**
   ```go
   func factorial(n int) int {
       return tailFactorial(n, 1)
   }
   ```
   The `factorial` function initializes the accumulator with 1 and calls the tail-recursive helper function.

### Conclusion

Recursion is a powerful tool in Go for solving problems that can be broken down into smaller sub-problems. Recursive functions call themselves with modified arguments until a base case is reached. While Go does not perform tail-call optimization, understanding both regular and tail recursion can help you write more efficient and readable recursive algorithms.