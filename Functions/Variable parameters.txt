\\ Functions â€” Variable parameters


In Go, you can define functions that accept a variable number of parameters using the `...` syntax. These functions are often referred to as variadic functions. Variadic functions allow you to pass zero or more arguments of the specified type.

### Example: Summing Variable Number of Integers

Here's a simple example of a variadic function that calculates the sum of an arbitrary number of integers:

```go
package main

import "fmt"

// sum takes a variable number of integers and returns their sum
func sum(numbers ...int) int {
	total := 0
	for _, number := range numbers {
		total += number
	}
	return total
}

func main() {
	fmt.Println("Sum of 1, 2, 3:", sum(1, 2, 3))           // Output: 6
	fmt.Println("Sum of 10, 20, 30, 40, 50:", sum(10, 20, 30, 40, 50)) // Output: 150
	fmt.Println("Sum of no numbers:", sum())                 // Output: 0
}
```

### Explanation

1. **Defining the Variadic Function:**
   ```go
   func sum(numbers ...int) int {
       total := 0
       for _, number := range numbers {
           total += number
       }
       return total
   }
   ```
   The `sum` function accepts a variable number of integers (`numbers ...int`). Inside the function, the variadic parameter `numbers` is treated as a slice of integers. The function iterates over this slice, calculates the total, and returns it.

2. **Calling the Variadic Function:**
   ```go
   func main() {
       fmt.Println("Sum of 1, 2, 3:", sum(1, 2, 3))
       fmt.Println("Sum of 10, 20, 30, 40, 50:", sum(10, 20, 30, 40, 50))
       fmt.Println("Sum of no numbers:", sum())
   }
   ```
   The `main` function demonstrates calling the `sum` function with different numbers of arguments, including no arguments.

### Example: Joining Strings with a Separator

Here is an example of a variadic function that joins an arbitrary number of strings with a specified separator:

```go
package main

import "fmt"
import "strings"

// joinStrings joins a variable number of strings with a specified separator
func joinStrings(separator string, elements ...string) string {
	return strings.Join(elements, separator)
}

func main() {
	fmt.Println(joinStrings(", ", "apple", "banana", "cherry")) // Output: apple, banana, cherry
	fmt.Println(joinStrings(" - ", "a", "b", "c"))              // Output: a - b - c
	fmt.Println(joinStrings(", "))                              // Output: (empty string)
}
```

### Explanation

1. **Defining the Variadic Function:**
   ```go
   func joinStrings(separator string, elements ...string) string {
       return strings.Join(elements, separator)
   }
   ```
   The `joinStrings` function accepts a fixed parameter `separator` of type `string` and a variadic parameter `elements` of type `string`. The function uses `strings.Join` to join the elements with the specified separator and returns the resulting string.

2. **Calling the Variadic Function:**
   ```go
   func main() {
       fmt.Println(joinStrings(", ", "apple", "banana", "cherry"))
       fmt.Println(joinStrings(" - ", "a", "b", "c"))
       fmt.Println(joinStrings(", "))
   }
   ```
   The `main` function demonstrates calling the `joinStrings` function with different numbers of string arguments.

### Example: Passing a Slice to a Variadic Function

You can also pass a slice to a variadic function by using the `...` operator.

```go
package main

import "fmt"

// printNumbers prints a variable number of integers
func printNumbers(numbers ...int) {
	for _, number := range numbers {
		fmt.Println(number)
	}
}

func main() {
	numbers := []int{1, 2, 3, 4, 5}
	printNumbers(numbers...) // Pass slice to variadic function
}
```

### Explanation

1. **Defining the Variadic Function:**
   ```go
   func printNumbers(numbers ...int) {
       for _, number := range numbers {
           fmt.Println(number)
       }
   }
   ```
   The `printNumbers` function accepts a variable number of integers and prints each one.

2. **Calling the Variadic Function with a Slice:**
   ```go
   func main() {
       numbers := []int{1, 2, 3, 4, 5}
       printNumbers(numbers...) // Pass slice to variadic function
   }
   ```
   The `main` function creates a slice of integers and passes it to the `printNumbers` function using the `...` operator.

### Conclusion

Variadic functions in Go are useful for scenarios where you need to handle an arbitrary number of arguments. They provide flexibility and convenience by allowing functions to accept zero or more parameters of the same type. By using the `...` syntax, you can define, call, and work with variadic functions effectively in your Go programs.