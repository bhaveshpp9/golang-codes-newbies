\\ Generic Types â€” Generic collections


In Go, generics can also be used to create generic collections. This allows you to write data structures like lists, stacks, or maps that can operate on any type, providing greater flexibility and reusability. Let's go through an example of a generic collection, specifically a generic list.

### Example: Generic List

We'll define a generic `List` type that can hold elements of any type.

#### Defining a Generic List

```go
package main

import "fmt"

// List is a generic list type
type List[T any] struct {
	items []T
}

// NewList creates a new List
func NewList[T any]() *List[T] {
	return &List[T]{}
}

// Add adds an item to the list
func (l *List[T]) Add(item T) {
	l.items = append(l.items, item)
}

// Get retrieves an item from the list by index
func (l *List[T]) Get(index int) (T, bool) {
	if index < 0 || index >= len(l.items) {
		var zero T
		return zero, false
	}
	return l.items[index], true
}

// Size returns the number of items in the list
func (l *List[T]) Size() int {
	return len(l.items)
}

func main() {
	// Create a list of integers
	intList := NewList[int]()
	intList.Add(1)
	intList.Add(2)
	intList.Add(3)

	fmt.Printf("Integer List Size: %d\n", intList.Size())
	for i := 0; i < intList.Size(); i++ {
		item, _ := intList.Get(i)
		fmt.Printf("Item %d: %d\n", i, item)
	}

	// Create a list of strings
	strList := NewList[string]()
	strList.Add("Hello")
	strList.Add("World")

	fmt.Printf("\nString List Size: %d\n", strList.Size())
	for i := 0; i < strList.Size(); i++ {
		item, _ := strList.Get(i)
		fmt.Printf("Item %d: %s\n", i, item)
	}
}
```

### Explanation

1. **Defining the Generic Type:**
   ```go
   type List[T any] struct {
       items []T
   }
   ```
   The `List` type is defined with a type parameter `T`, which can be any type. The `items` field is a slice of `T`.

2. **Creating a New List:**
   ```go
   func NewList[T any]() *List[T] {
       return &List[T]{}
   }
   ```
   The `NewList` function creates and returns a new `List` instance.

3. **Adding Items to the List:**
   ```go
   func (l *List[T]) Add(item T) {
       l.items = append(l.items, item)
   }
   ```
   The `Add` method appends an item of type `T` to the list.

4. **Retrieving Items from the List:**
   ```go
   func (l *List[T]) Get(index int) (T, bool) {
       if index < 0 || index >= len(l.items) {
           var zero T
           return zero, false
       }
       return l.items[index], true
   }
   ```
   The `Get` method retrieves an item by index and returns a boolean indicating whether the retrieval was successful.

5. **Getting the Size of the List:**
   ```go
   func (l *List[T]) Size() int {
       return len(l.items)
   }
   ```
   The `Size` method returns the number of items in the list.

6. **Using the Generic List:**
   ```go
   func main() {
       // Create a list of integers
       intList := NewList[int]()
       intList.Add(1)
       intList.Add(2)
       intList.Add(3)

       fmt.Printf("Integer List Size: %d\n", intList.Size())
       for i := 0; i < intList.Size(); i++ {
           item, _ := intList.Get(i)
           fmt.Printf("Item %d: %d\n", i, item)
       }

       // Create a list of strings
       strList := NewList[string]()
       strList.Add("Hello")
       strList.Add("World")

       fmt.Printf("\nString List Size: %d\n", strList.Size())
       for i := 0; i < strList.Size(); i++ {
           item, _ := strList.Get(i)
           fmt.Printf("Item %d: %s\n", i, item)
       }
   }
   ```
   The `main` function demonstrates creating and using `List` instances for integers and strings. Items are added to the lists, and their sizes and elements are printed.

### Conclusion

With Go's support for generics, you can create flexible and reusable generic collections. By defining generic types and methods, you can operate on any type while maintaining type safety. The example above demonstrates a generic list, but you can similarly create other generic collections like stacks, queues, and maps using the same principles.