\\ Initialising of types â€” simple types

In Go, initializing simple types such as integers, floats, strings, booleans, arrays, and slices can be done in various ways. Let's go through the different simple types and their initialization methods.

### 1. Integers
Integers in Go can be of different sizes, such as `int`, `int8`, `int16`, `int32`, `int64`, as well as their unsigned counterparts `uint`, `uint8`, `uint16`, `uint32`, `uint64`.

```go
package main

import "fmt"

func main() {
	// Initializing integers
	var a int = 42
	var b int8 = -128
	var c int16 = 32767
	var d int32 = 2147483647
	var e int64 = 9223372036854775807

	fmt.Println(a, b, c, d, e)
}
```

### 2. Floats
Floats in Go are `float32` and `float64`.

```go
package main

import "fmt"

func main() {
	// Initializing floats
	var f1 float32 = 3.14
	var f2 float64 = 2.718281828

	fmt.Println(f1, f2)
}
```

### 3. Strings
Strings in Go are a sequence of bytes, usually UTF-8 encoded text.

```go
package main

import "fmt"

func main() {
	// Initializing strings
	var s1 string = "Hello, World!"
	var s2 = "Go is awesome"

	fmt.Println(s1, s2)
}
```

### 4. Booleans
Booleans in Go represent true or false values.

```go
package main

import "fmt"

func main() {
	// Initializing booleans
	var b1 bool = true
	var b2 = false

	fmt.Println(b1, b2)
}
```

### 5. Arrays
Arrays in Go have a fixed size and are homogeneous.

```go
package main

import "fmt"

func main() {
	// Initializing arrays
	var arr1 [3]int = [3]int{1, 2, 3}
	var arr2 = [3]string{"a", "b", "c"}

	fmt.Println(arr1, arr2)
}
```

### 6. Slices
Slices in Go are dynamically-sized arrays.

```go
package main

import "fmt"

func main() {
	// Initializing slices
	var slice1 []int = []int{1, 2, 3}
	slice2 := []string{"a", "b", "c"}

	fmt.Println(slice1, slice2)
}
```

### 7. Structs
Structs are composite data types that group together variables under a single name.

```go
package main

import "fmt"

// Defining a struct type
type Person struct {
	Name string
	Age  int
}

func main() {
	// Initializing structs
	var p1 Person = Person{Name: "Alice", Age: 30}
	p2 := Person{Name: "Bob", Age: 25}

	fmt.Println(p1, p2)
}
```

### 8. Pointers
Pointers hold the memory address of another variable.

```go
package main

import "fmt"

func main() {
	// Initializing pointers
	var x int = 10
	var ptr *int = &x

	fmt.Println("Value of x:", x)
	fmt.Println("Address of x:", &x)
	fmt.Println("Value of ptr:", ptr)
	fmt.Println("Value pointed by ptr:", *ptr)
}
```

### 9. Maps
Maps are key-value pairs.

```go
package main

import "fmt"

func main() {
	// Initializing maps
	var m1 map[string]int = map[string]int{"one": 1, "two": 2}
	m2 := map[string]string{"a": "apple", "b": "banana"}

	fmt.Println(m1, m2)
}
```

### 10. Channels
Channels are used for communication between goroutines.

```go
package main

import "fmt"

func main() {
	// Initializing channels
	var ch1 chan int = make(chan int)
	ch2 := make(chan string)

	go func() {
		ch1 <- 42
		ch2 <- "Hello"
	}()

	fmt.Println(<-ch1)
	fmt.Println(<-ch2)
}
```

### Summary

This guide demonstrates how to initialize various simple types in Go. Here's a quick summary:
- **Integers:** `int`, `int8`, `int16`, `int32`, `int64`, `uint`, `uint8`, `uint16`, `uint32`, `uint64`
- **Floats:** `float32`, `float64`
- **Strings:** String literals
- **Booleans:** `true`, `false`
- **Arrays:** `[n]Type{...}`
- **Slices:** `[]Type{...}`
- **Structs:** `StructType{...}`
- **Pointers:** `&variable`
- **Maps:** `map[KeyType]ValueType{...}`
- **Channels:** `make(chan Type)`

Understanding how to initialize these basic types is fundamental to programming in Go, allowing you to work effectively with more complex data structures and algorithms.