\\ Initialising of types —   structures — Without any constructor


In Go, structures (structs) are a composite data type that groups together fields. Go does not have constructors in the traditional sense as seen in other languages like Java or C++. However, you can initialize structs in several ways, even without using explicit constructor functions.

### Defining a Struct

First, let's define a simple struct.

```go
package main

import "fmt"

// Define a struct type
type Person struct {
    Name string
    Age  int
    Email string
}
```

### Initializing Structs Without a Constructor

#### 1. Using Composite Literal

You can initialize a struct using a composite literal.

```go
package main

import "fmt"

type Person struct {
    Name  string
    Age   int
    Email string
}

func main() {
    // Initialize struct with composite literal
    p1 := Person{
        Name:  "Alice",
        Age:   30,
        Email: "alice@example.com",
    }

    fmt.Println(p1)
}
```

#### 2. Using Named Fields

You can also initialize only specific fields, leaving others with their zero values.

```go
package main

import "fmt"

type Person struct {
    Name  string
    Age   int
    Email string
}

func main() {
    // Initialize struct with named fields
    p2 := Person{
        Name: "Bob",
        Age:  25,
        // Email is omitted and will have zero value (empty string)
    }

    fmt.Println(p2)
}
```

#### 3. Using Positional Syntax

You can initialize a struct using positional syntax, but this is generally less readable and more error-prone, especially for larger structs.

```go
package main

import "fmt"

type Person struct {
    Name  string
    Age   int
    Email string
}

func main() {
    // Initialize struct using positional syntax
    p3 := Person{"Charlie", 28, "charlie@example.com"}
    
    fmt.Println(p3)
}
```

#### 4. Zero Value Initialization

A struct can be initialized to its zero value using a variable declaration.

```go
package main

import "fmt"

type Person struct {
    Name  string
    Age   int
    Email string
}

func main() {
    // Initialize struct to its zero value
    var p4 Person
    
    fmt.Println(p4)
}
```

#### 5. Using the `new` Function

The `new` function can be used to allocate a zero-initialized instance of a struct and return a pointer to it.

```go
package main

import "fmt"

type Person struct {
    Name  string
    Age   int
    Email string
}

func main() {
    // Initialize struct using the new function
    p5 := new(Person)
    
    // Setting values using the pointer
    p5.Name = "Diana"
    p5.Age = 35
    p5.Email = "diana@example.com"
    
    fmt.Println(*p5)
}
```

### Example: Combining Initialization Methods

Here’s an example combining different initialization methods.

```go
package main

import "fmt"

type Person struct {
    Name  string
    Age   int
    Email string
}

func main() {
    // Using composite literal
    p1 := Person{
        Name:  "Alice",
        Age:   30,
        Email: "alice@example.com",
    }

    // Using named fields
    p2 := Person{
        Name: "Bob",
        Age:  25,
    }

    // Using positional syntax
    p3 := Person{"Charlie", 28, "charlie@example.com"}

    // Using zero value initialization
    var p4 Person

    // Using the new function
    p5 := new(Person)
    p5.Name = "Diana"
    p5.Age = 35
    p5.Email = "diana@example.com"

    fmt.Println("Composite literal:", p1)
    fmt.Println("Named fields:", p2)
    fmt.Println("Positional syntax:", p3)
    fmt.Println("Zero value:", p4)
    fmt.Println("Using new:", *p5)
}
```

### Conclusion

Go structs can be initialized in various ways without explicit constructors:
- Composite literals
- Named fields
- Positional syntax
- Zero value initialization
- Using the `new` function

These methods provide flexibility and simplicity for struct initialization, making it straightforward to create and work with complex data structures in Go.