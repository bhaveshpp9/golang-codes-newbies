\\ Control flow — Conditional Statements — if/else statements -- complex conditions


Sure! I can help with that. Let’s dive into some Go code involving `if/else` statements with complex conditions.

In Go, complex conditions in `if/else` statements often involve logical operators such as `&&` (and), `||` (or), and `!` (not). These allow you to combine multiple conditions to make more nuanced decisions. Here’s a detailed example to illustrate how you can use complex conditions effectively:

### Scenario
Imagine we're writing a function to determine a user's access level in a system based on their age and job role. The conditions for access are:
- **Admin access:** The user is over 18 and must be either a manager or an executive.
- **General access:** The user is over 18 but does not meet the admin role criteria.
- **No access:** The user is 18 or younger.

### Go Code
```go
package main

import "fmt"

// define a struct to hold user details
type User struct {
    Age  int
    Role string
}

// function to determine access level based on age and role
func determineAccess(user User) string {
    if user.Age > 18 && (user.Role == "manager" || user.Role == "executive") {
        return "Admin access"
    } else if user.Age > 18 {
        return "General access"
    } else {
        return "No access"
    }
}

func main() {
    // creating a few sample users
    users := []User{
        {30, "manager"},
        {22, "staff"},
        {19, "executive"},
        {17, "intern"},
    }

    // determining and printing access level for each user
    for _, user := range users {
        access := determineAccess(user)
        fmt.Printf("User: %d years old, Role: %s -> %s\n", user.Age, user.Role, access)
    }
}

```

### Explanation
1. **User struct**: We define a `User` struct to store age and role, making it easier to pass user information around.
2. **determineAccess Function**: This function uses `if/else` statements with complex conditions combining age and role to return the appropriate access level.
3. **Main function**: We test this logic with a list of users, each with different ages and roles.

This example demonstrates how to handle multiple conditions in a clear and structured way. It's quite handy for making complex logical decisions in your Go applications! 🛠️🤖🔧