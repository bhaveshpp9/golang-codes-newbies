\\ Arrays and collections â€” Stack<T> (LIFO)


Implementing a stack in Go using generics allows you to create a versatile Last-In-First-Out (LIFO) data structure. A stack is used in various applications, such as parsing expressions, backtracking algorithms, and maintaining function calls in computer memory. Here's how to implement a generic stack in Go:

### Stack Implementation:

```go
package main

import (
	"fmt"
)

// Stack represents a LIFO (last in, first out) structure
type Stack[T any] struct {
	elements []T
}

// NewStack creates a new Stack instance
func NewStack[T any]() *Stack[T] {
	return &Stack[T]{}
}

// Push adds an element to the top of the stack
func (s *Stack[T]) Push(value T) {
	s.elements = append(s.elements, value)
}

// Pop removes the element from the top of the stack and returns it
// If the stack is empty, it returns the zero value of the type T and false
func (s *Stack[T]) Pop() (T, bool) {
	if len(s.elements) == 0 {
		var zero T
		return zero, false
	}
	index := len(s.elements) - 1
	element := s.elements[index]
	s.elements = s.elements[:index]
	return element, true
}

// Peek returns the element at the top of the stack without removing it
// If the stack is empty, it returns the zero value of the type T and false
func (s *Stack[T]) Peek() (T, bool) {
	if len(s.elements) == 0 {
		var zero T
		return zero, false
	}
	return s.elements[len(s.elements)-1], true
}

func main() {
	stack := NewStack[int]()
	stack.Push(10)
	stack.Push(20)
	stack.Push(30)

	fmt.Println("Stack:", stack.elements)

	if top, ok := stack.Pop(); ok {
		fmt.Println("Popped:", top)
		fmt.Println("Stack after pop:", stack.elements)
	}

	if top, ok := stack.Peek(); ok {
		fmt.Println("Peek at top:", top)
	}
}
```

### Explanation:

- **Generic Stack Type**: The `Stack` struct is defined with a type parameter `[T any]`, which means it can store elements of any type.
- **Push**: Adds an element to the end of the internal slice, which is considered the top of the stack.
- **Pop**: Removes the element from the end of the slice (top of the stack) and returns it, along with a boolean indicating success. If the stack is empty, it returns the zero value of the type and `false`.
- **Peek**: Returns the element at the end of the slice (top of the stack) without removing it, similar to `Pop` but does not modify the stack.

This example demonstrates the basic operations of a stack: pushing (adding) items, popping (removing) items, and peeking (viewing the last item) using Go's slice as the underlying data structure and generics for flexibility. The stack is intuitive and efficient for tasks that require reversing order or maintaining a simple history of elements.