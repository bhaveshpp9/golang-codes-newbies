\\ Arrays and collections —  Dictionaries — sort dictionary by keys


Sorting a dictionary, or a map, by keys in Go involves extracting the keys into a slice, sorting the slice, and then iterating over the sorted keys to access the map in a sorted order. Since maps in Go do not maintain any inherent order, this is a necessary process to retrieve elements in a specific sequence.

### Example: Sorting a Map by Keys

Let's demonstrate how to sort a map by its keys using a simple example. This will involve string keys, but the approach is similar for any sortable key type.

```go
package main

import (
    "fmt"
    "sort"
)

func main() {
    // Define a map with string keys and integer values
    fruits := map[string]int{
        "banana": 3,
        "apple": 5,
        "pear": 2,
        "orange": 9,
    }

    // Create a slice to hold the keys of the map
    keys := make([]string, 0, len(fruits))
    for key := range fruits {
        keys = append(keys, key)
    }

    // Sort the slice of keys
    sort.Strings(keys)

    // Iterate over the sorted keys to access values from the map
    for _, key := range keys {
        fmt.Printf("%s: %d\n", key, fruits[key])
    }
}
```

### Explanation:
- **Extract Keys**: First, we extract the keys from the map and append them to a slice.
- **Sort Keys**: We then sort the slice of keys using `sort.Strings`, which is appropriate for slices of strings.
- **Access in Sorted Order**: Finally, we iterate over the sorted keys and retrieve each corresponding value from the map, ensuring the output is in the order of the sorted keys.

### Generalizing for Different Key Types

If your keys aren't strings, you might use `sort.Ints` for integers or implement `sort.Slice` for custom sorting logic or other types. Here's how you might do it for a map with integer keys:

```go
package main

import (
    "fmt"
    "sort"
)

func main() {
    // Define a map with integer keys and string values
    ages := map[int]string{
        30: "Alice",
        22: "Bob",
        25: "Claire",
        21: "David",
    }

    // Create a slice to hold the keys of the map
    keys := make([]int, 0, len(ages))
    for key := range ages {
        keys = append(keys, key)
    }

    // Sort the slice of keys
    sort.Ints(keys)

    // Iterate over the sorted keys to access values from the map
    for _, key := range keys {
        fmt.Printf("%d: %s\n", key, ages[key])
    }
}
```

### Explanation:
- **Sort.Ints**: This function is used to sort a slice of integers. The rest of the process remains the same but adapted for integer keys.

These examples demonstrate how to sort dictionaries by keys in Go. Sorting by keys is useful for displaying map contents in a predictable order, especially for reports, ordered configurations, or any other situation where ordered data presentation is beneficial.