\\ Arrays and collections —  Dictionaries — Adding and removing of elements


In Go, managing elements in a dictionary (or map) involves straightforward operations for adding and removing items. Here, I'll demonstrate how to add new entries to a map and how to remove entries from it.

### Example: Adding and Removing Elements in a Map

This example covers basic operations to add and remove key-value pairs in a Go map. We'll create a map, modify it by adding new entries, and remove some entries based on conditions.

```go
package main

import (
    "fmt"
)

func main() {
    // Create a map
    pets := map[string]string{
        "Fido": "Dog",
        "Milo": "Cat",
    }

    // Adding elements to the map
    pets["Charlie"] = "Parrot"  // Add a new key-value pair
    fmt.Println("Updated Pets Map:", pets)

    // Removing elements from the map
    delete(pets, "Milo")  // Remove the entry with key "Milo"
    fmt.Println("Pets Map after deletion:", pets)

    // Trying to delete a non-existent key
    delete(pets, "Max")  // This does nothing as "Max" is not in the map
    fmt.Println("Pets Map after trying to delete non-existent key:", pets)
}
```

### Explanation:
- **Creating and Adding**: Maps are created using the built-in `map` keyword followed by the key type in brackets and the value type. Adding an element is as simple as assigning a value to a key in the map.
- **Removing Elements**: The built-in `delete()` function is used to remove an element from the map. It takes two arguments: the map and the key to be removed. If the key exists, it removes the key-value pair; if it does not exist, the operation does nothing and does not cause an error.
- **Printing Map**: The current state of the map is printed after each operation to show the effect of the additions and deletions.

### Considerations for Managing Maps
- **Checking Existence**: Before removing an element, you might want to check if the key exists. This can be achieved using the two-value assignment form:

```go
if _, ok := pets["Milo"]; ok {
    delete(pets, "Milo")
    fmt.Println("Deleted Milo from the map.")
} else {
    fmt.Println("Milo was not found in the map.")
}
```

- **Dynamic Size**: Unlike arrays, the size of a map is dynamic, meaning it can grow or shrink as you add or remove elements. There is no need to specify an initial size or manage resizing manually.

This example provides a fundamental guide on how to manage dictionaries in Go efficiently, demonstrating the ease with which you can manipulate map data structures for everyday programming tasks.