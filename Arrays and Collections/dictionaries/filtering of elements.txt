\\ Arrays and collections —  Dictionaries — filtering of elements


Filtering elements in a dictionary or map in Go involves iterating through the map and selectively keeping elements that satisfy a specific condition. Because Go does not inherently support high-level functional constructs for filtering directly on maps, you have to manually implement such logic. 

Here's how you can filter a map based on a condition and create a new map with only the elements that meet this condition:

### Example: Filtering a Map by Value

Let's create a function that filters a map of string keys and integer values, keeping only the key-value pairs where the value meets a specific criteria, such as being greater than a specified threshold.

```go
package main

import (
    "fmt"
)

// filterMap creates a new map containing only the elements from the original map
// that satisfy a given condition.
func filterMap(m map[string]int, condition func(int) bool) map[string]int {
    filtered := make(map[string]int)
    for key, value := range m {
        if condition(value) {
            filtered[key] = value
        }
    }
    return filtered
}

func main() {
    // Original map
    scores := map[string]int{
        "Alice": 92,
        "Bob":   67,
        "Clara": 85,
        "David": 76,
    }

    // Define a condition: keep scores greater than 80
    highScores := filterMap(scores, func(score int) bool {
        return score > 80
    })

    // Print the filtered map
    fmt.Println("High scores:", highScores)
}
```

### Explanation:
- **Function `filterMap`**: This function takes a map and a predicate function as parameters. It iterates over each key-value pair in the original map and applies the predicate to the value.
- **Condition Function**: The `condition` is a function that takes an integer and returns a boolean. In the `main` function, this is defined to return `true` for scores greater than 80.
- **Resulting Map**: The `filtered` map is populated only with those entries that satisfy the condition.

### Filtering Based on Keys

You might also want to filter based on keys. Here's an example where you filter a map based on the keys satisfying a certain condition, such as matching a specific pattern or starting with a certain letter.

```go
package main

import (
    "fmt"
    "strings"
)

// filterKeys returns a new map containing only the elements from the original map
// whose keys satisfy the specified condition.
func filterKeys(m map[string]int, condition func(string) bool) map[string]int {
    filtered := make(map[string]int)
    for key, value := range m {
        if condition(key) {
            filtered[key] = value
        }
    }
    return filtered
}

func main() {
    // Original map
    products := map[string]int{
        "milk":   3,
        "bread":  2,
        "butter": 5,
        "honey":  4,
    }

    // Define a condition: keep products that start with 'b'
    bProducts := filterKeys(products, func(key string) bool {
        return strings.HasPrefix(key, "b")
    })

    // Print the filtered map
    fmt.Println("Products starting with 'b':", bProducts)
}
```

### Explanation:
- **Function `filterKeys`**: Similar to `filterMap`, but the condition is applied to map keys.
- **Condition on Keys**: The condition checks if the key starts with the letter "b".

These examples show the versatility of filtering maps in Go using custom conditions on either keys or values. This approach is fundamental in Go for data manipulation and can be adapted for more complex data structures and conditions as needed.