\\ Arrays and collections —  Arrays and Slices — Iterating over an slice


Iterating over a slice in Go is typically done using the `range` clause, which makes it easy to loop through all the elements in the slice. This approach is idiomatic and efficient, especially when you only need to access each element without modifying the slice structure.

Here's a basic example to illustrate how to iterate over a slice in Go:

### Basic Example: Iterating Over a Slice Using `range`

```go
package main

import (
    "fmt"
)

func main() {
    // Define a slice of integers
    numbers := []int{10, 20, 30, 40, 50}

    // Using range to iterate over the slice
    for _, number := range numbers {
        fmt.Println(number)
    }
}
```

### Explanation:
- **Range Clause**: In the loop `for _, number := range numbers`, `range` provides each element of the slice `numbers`. The underscore `_` is used to ignore the index since it's not required in this example.
- **Printing Elements**: Each element, referred to as `number` in the loop, is printed out.

### More Detailed Example: Using Index and Value

If you need to access the index of each element during iteration (for example, for debugging or conditional processing based on position), you can capture it as follows:

```go
package main

import (
    "fmt"
)

func main() {
    // Define a slice of strings
    names := []string{"Alice", "Bob", "Charlie", "Diana"}

    // Iterate over the slice with index and value
    for index, name := range names {
        fmt.Printf("Index %d: %s\n", index, name)
    }
}
```

### Explanation:
- **Index and Value**: The `range` loop provides two values: the index of the current element and the value of the element itself.
- **Printf for Formatting**: Using `fmt.Printf` allows combining the index and value in a formatted string for clearer output.

### Iteration Without Range (Using Traditional Loop)

If you prefer or need a traditional `for` loop (perhaps for more complex iteration conditions or modifications), you can do so by iterating over the indices directly:

```go
package main

import (
    "fmt"
)

func main() {
    // Define a slice of integers
    scores := []int{90, 85, 80, 75, 70}

    // Iterate over the slice using a traditional for loop
    for i := 0; i < len(scores); i++ {
        fmt.Println(scores[i])
    }
}
```

### Explanation:
- **Traditional For Loop**: Uses the length of the slice `len(scores)` to determine how many times to loop.
- **Element Access**: Each element is accessed by its index `scores[i]`.

These examples provide different ways to iterate over slices in Go, each useful depending on your specific needs. Using `range` is generally the most idiomatic and simplest way for straightforward iteration over slice elements, while traditional loops offer more control.