\\ Arrays and collections —  Arrays and Slices — Getting min and Max values


Finding the minimum and maximum values in an array or slice in Go can be accomplished by iterating through the elements and comparing them. Since Go does not have a built-in function for this specific task, you'll need to manually implement the logic.

Here are examples to demonstrate how you can determine both the minimum and maximum values from a slice of integers.

### Finding the Minimum and Maximum Values

```go
package main

import (
    "fmt"
)

func findMinAndMax(values []int) (int, int) {
    if len(values) == 0 {
        return 0, 0 // Return zeros if the slice is empty
    }

    minVal := values[0]
    maxVal := values[0]

    for _, value := range values {
        if value < minVal {
            minVal = value
        }
        if value > maxVal {
            maxVal = value
        }
    }

    return minVal, maxVal
}

func main() {
    numbers := []int{10, 55, -3, 15, 48, 99, -100, 48, 57}

    min, max := findMinAndMax(numbers)
    fmt.Printf("The minimum value is %d and the maximum value is %d\n", min, max)
}
```

### Explanation:
- **Function `findMinAndMax`**: This function takes a slice of integers and returns the minimum and maximum values. It first checks if the slice is empty to avoid errors when accessing `values[0]`.
- **Iteration**: The function iterates through the slice, checking each element against the current `minVal` and `maxVal` to update these values accordingly.
- **Return Values**: It returns the determined minimum and maximum values.

### Edge Cases:
- **Empty Slice**: The function returns `0, 0` when provided an empty slice. Depending on your specific use case, you might want to handle this differently, perhaps by returning an error.

### Modifying the Example for Other Data Types

The concept demonstrated above can easily be adapted for other types of data, such as floats or even custom types, as long as they can be compared. Here’s how you could adapt it to work with a slice of `float64`:

```go
package main

import (
    "fmt"
)

func findMinAndMaxFloats(values []float64) (float64, float64) {
    if len(values) == 0 {
        return 0.0, 0.0 // Return zeros if the slice is empty
    }

    minVal := values[0]
    maxVal := values[0]

    for _, value := range values {
        if value < minVal {
            minVal = value
        }
        if value > maxVal {
            maxVal = value
        }
    }

    return minVal, maxVal
}

func main() {
    numbers := []float64{10.1, 55.2, -3.3, 15.5, 48.8, 99.9, -100.1, 48.0, 57.3}

    min, max := findMinAndMaxFloats(numbers)
    fmt.Printf("The minimum value is %.1f and the maximum value is %.1f\n", min, max)
}
```

### Conclusion:
These examples showcase basic Go programming practices for managing and processing data in slices, providing a flexible foundation for finding minimum and maximum values across a wide array of applications.
