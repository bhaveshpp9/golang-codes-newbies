\\ Arrays and collections —  Arrays and Slices — iterating over and slice with index


Iterating over slices in Go can be achieved using a few different techniques, depending on whether you need access to the index, the value, or both. Below, I’ll demonstrate how to iterate over slices with emphasis on accessing the index, along with the value, using the `range` keyword, which is a powerful feature for looping over elements in slices (and other data structures).

### Example: Iterating Over a Slice with Index

```go
package main

import (
    "fmt"
)

func main() {
    // Initialize a slice of strings
    fruits := []string{"apple", "banana", "cherry"}

    // Using range to iterate over the slice
    for index, value := range fruits {
        fmt.Printf("Index: %d, Value: %s\n", index, value)
    }
}
```

### Explanation:
- **Range Loop**: This loop uses `range`, which returns two values for each iteration. The first is the index of the current element, and the second is a copy of the element itself (`value`). This is the most common way to iterate over a slice when you need both the index and the value.
- **`fmt.Printf`**: This function is used to format and print the index and value of each slice element.

### Using Indices Directly

If you only need the index, you can ignore the value using the blank identifier `_`.

```go
package main

import (
    "fmt"
)

func main() {
    // Initialize a slice of integers
    numbers := []int{10, 20, 30, 40, 50}

    // Iterating using index only
    for index := range numbers {
        // Access the slice value using the index
        fmt.Printf("Index: %d, Value: %d\n", index, numbers[index])
    }
}
```

### Explanation:
- **Ignore Value**: The `_` is used to ignore the second value (the slice element) that `range` returns, allowing you to focus on the index.
- **Direct Access**: The value is then accessed using `numbers[index]`, which directly retrieves elements from the slice based on their index.

### Traditional For Loop

For scenarios where you may want a more traditional loop control (e.g., skipping certain indices or custom increment), you can use a traditional `for` loop:

```go
package main

import (
    "fmt"
)

func main() {
    // Initialize a slice
    scores := []int{95, 85, 76, 88, 92}

    // Traditional for loop
    for i := 0; i < len(scores); i++ {
        fmt.Printf("Index: %d, Score: %d\n", i, scores[i])
    }
}
```

### Explanation:
- **`len(scores)`**: This ensures the loop runs exactly as many times as there are elements in the slice, using `i` as the index to access each element.

Each of these methods is suitable for different situations depending on your specific requirements regarding loop control and element access. The `range` keyword provides a more idiomatic approach in Go, especially when you need both the index and the element values. Meanwhile, the traditional `for` loop offers more control over the iteration process.