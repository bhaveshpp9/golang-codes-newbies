\\ Arrays and collections —  Arrays and Slices — slice length


In Go, working with the length of slices is a fundamental aspect of managing collections of data. The `len` function is used to obtain the current length of a slice, which is the number of elements it currently holds.

### Basic Example: Checking the Length of a Slice

Here's a simple example that demonstrates how to check the length of a slice in Go:

```go
package main

import (
    "fmt"
)

func main() {
    // Creating a slice with some elements
    slice := []int{10, 20, 30, 40, 50}

    // Printing the length of the slice
    fmt.Println("Length of the slice:", len(slice))

    // Adding more elements to the slice
    slice = append(slice, 60, 70)

    // Printing the new length of the slice
    fmt.Println("New length of the slice:", len(slice))

    // Creating an empty slice
    emptySlice := make([]int, 0)

    // Printing the length of an empty slice
    fmt.Println("Length of the empty slice:", len(emptySlice))
}
```

### Explanation:
- **Creating and Modifying Slices**: The slice is initialized with five integers. The `len` function is then used to get the number of elements in the slice.
- **Appending Elements**: Additional elements are appended to the slice using the `append` function, which increases the length of the slice. The new length is obtained using `len`.
- **Empty Slice**: An empty slice is created with `make`, specifying zero length. The `len` function confirms that the length is zero.

### Use of Length in Slices

The length of a slice is frequently used in loops and conditional statements to manage data within the slice:

```go
package main

import (
    "fmt"
)

func main() {
    // Create a slice with some elements
    numbers := []int{1, 2, 3, 4, 5}

    // Loop through the slice using its length
    for i := 0; i < len(numbers); i++ {
        fmt.Printf("Element at index %d is %d\n", i, numbers[i])
    }
}
```

### Explanation:
- **For Loop**: This loop iterates through the slice, using `len(numbers)` to determine the number of iterations. Each element is accessed using its index.

### Dynamic Length Changes

It's important to note that the length of a slice can change dynamically as you append elements to it. This flexibility is a key feature of slices compared to arrays, which have a fixed size.

These examples illustrate basic and practical uses of slice length in Go programming, showcasing how to efficiently manage and iterate through slices based on their dynamic lengths. Understanding and utilizing the `len` function is crucial for effectively handling slices in Go.