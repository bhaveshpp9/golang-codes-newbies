\\ Arrays and collections —  Arrays and Slices — sum of elements


To calculate the sum of elements in an array or slice in Go, you can iterate through the elements and accumulate their values. Since Go treats arrays and slices similarly when accessed in a loop, you can use the same code to handle both types.

Here's a simple example that demonstrates how to sum the elements in a slice (which can be adapted for an array by changing the slice to an array definition).

### Example: Sum of Elements in a Slice

```go
package main

import (
	"fmt"
)

// sumSlice sums the elements of an integer slice.
func sumSlice(data []int) int {
	sum := 0
	for _, value := range data {
		sum += value
	}
	return sum
}

func main() {
	// Define a slice of integers.
	slice := []int{10, 20, 30, 40, 50}
	fmt.Println("Elements in slice:", slice)

	// Calculate the sum of the elements.
	total := sumSlice(slice)
	fmt.Println("Sum of elements:", total)
}
```

### Explanation:
- **Function `sumSlice`**: This function takes a slice of integers as an argument and returns their sum. It initializes a sum variable to zero, iterates over each element in the slice using a range loop, and adds each element to the sum.
- **Range Loop**: The `range` keyword in Go iterates over each element in the slice. The underscore (`_`) is used to ignore the index returned by `range`, as only the values are needed for the sum.
- **Main Function**: The slice is defined, and the `sumSlice` function is called with this slice to compute the sum of its elements.

This approach is straightforward and effectively demonstrates how to process slices (and arrays, with slight modifications) to perform calculations. The same principle can be extended to perform other aggregate operations like finding the average, minimum, or maximum values in a slice.