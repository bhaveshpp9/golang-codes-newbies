\\ Arrays and collections —  Arrays and Slices — Adding and removing of elements


In Go, arrays are fixed-size collections of elements of the same type, while slices are flexible and can grow or shrink dynamically. Given these characteristics, the operations to add or remove elements typically involve slices rather than arrays, since arrays cannot be resized after their declaration.

Here’s an overview with examples of how to add and remove elements from slices in Go:

### Adding Elements to Slices

You can add elements to a slice using the `append` function. This function returns a new slice that includes the added elements, potentially in a new underlying array if there's not enough capacity in the original slice.

```go
package main

import (
	"fmt"
)

func main() {
	// Creating a slice
	slice := []int{1, 2, 3}
	fmt.Println("Original slice:", slice)

	// Adding elements
	slice = append(slice, 4, 5)
	fmt.Println("Slice after adding elements:", slice)
}
```

### Removing Elements from Slices

Removing elements from a slice can be done by slicing out the part you want to remove. This doesn't shrink the underlying array but returns a new slice header pointing to the same array, excluding the removed element(s).

**Removing an element at a specific index:**

```go
package main

import (
	"fmt"
)

func main() {
	slice := []int{1, 2, 3, 4, 5}
	fmt.Println("Original slice:", slice)

	// Removing the element at index 2
	index := 2
	slice = append(slice[:index], slice[index+1:]...)
	fmt.Println("Slice after removing element:", slice)
}
```

### Explanation of Removing an Element:
- **Slicing Before the Index**: `slice[:index]` creates a slice of all elements before the index.
- **Slicing After the Index**: `slice[index+1:]` creates a slice of all elements after the index.
- **Appending**: `append` combines the two slices, effectively removing the element at the specified index.

These operations provide a basic framework for handling slices in Go. Slices are incredibly versatile, supporting efficient insertions and deletions when used with built-in functions like `append`. The removal method shown here is basic and does not handle edge cases, such as removing elements from the beginning or end of the slice, which can be done more efficiently by simply adjusting the slice boundaries without appending.