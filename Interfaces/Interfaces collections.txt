\\ interfaces â€”  Interfaces collections


In Go, you can create collections of interface types, allowing you to store and manipulate a diverse set of types that satisfy a particular interface. This approach leverages Go's type system to work with different types through a common interface, enhancing code flexibility and reuse.

### Example: Collection of Interfaces

Let's consider a scenario where we have multiple types implementing a common interface, and we want to store them in a collection.

```go
package main

import "fmt"

// Define the Animal interface
type Animal interface {
    Speak() string
}

// Define a Dog type that implements the Animal interface
type Dog struct {
    Name string
}

func (d Dog) Speak() string {
    return "Woof!"
}

// Define a Cat type that implements the Animal interface
type Cat struct {
    Name string
}

func (c Cat) Speak() string {
    return "Meow!"
}

// Define a Bird type that implements the Animal interface
type Bird struct {
    Name string
}

func (b Bird) Speak() string {
    return "Chirp!"
}

func main() {
    // Create a slice of the Animal interface type
    animals := []Animal{
        Dog{Name: "Buddy"},
        Cat{Name: "Whiskers"},
        Bird{Name: "Tweety"},
    }

    // Iterate over the collection and call the Speak method
    for _, animal := range animals {
        fmt.Println(animal.Speak())
    }
}
```

### Explanation

1. **Interface Definition:** The `Animal` interface is defined with a single method, `Speak`.
2. **Type Implementation:** The `Dog`, `Cat`, and `Bird` types implement the `Animal` interface by defining the `Speak` method.
3. **Collection Initialization:** A slice of `Animal` interface type is created and initialized with instances of `Dog`, `Cat`, and `Bird`.
4. **Iteration:** The program iterates over the collection, calling the `Speak` method on each element.

### Using Maps with Interface Collections

You can also use maps to store collections of interfaces. Here's an example:

```go
package main

import "fmt"

// Define the Animal interface
type Animal interface {
    Speak() string
}

// Define a Dog type that implements the Animal interface
type Dog struct {
    Name string
}

func (d Dog) Speak() string {
    return "Woof!"
}

// Define a Cat type that implements the Animal interface
type Cat struct {
    Name string
}

func (c Cat) Speak() string {
    return "Meow!"
}

// Define a Bird type that implements the Animal interface
type Bird struct {
    Name string
}

func (b Bird) Speak() string {
    return "Chirp!"
}

func main() {
    // Create a map of the Animal interface type
    animalMap := map[string]Animal{
        "dog":   Dog{Name: "Buddy"},
        "cat":   Cat{Name: "Whiskers"},
        "bird":  Bird{Name: "Tweety"},
    }

    // Iterate over the map and call the Speak method
    for key, animal := range animalMap {
        fmt.Printf("%s says: %s\n", key, animal.Speak())
    }
}
```

### Explanation

1. **Map Initialization:** A map of `Animal` interface type is created, mapping string keys to instances of `Dog`, `Cat`, and `Bird`.
2. **Iteration:** The program iterates over the map, printing the key and the result of the `Speak` method for each entry.

### Practical Example: Interface Collection in a Function

You might want to pass a collection of interfaces to a function for processing. Here's an example:

```go
package main

import "fmt"

// Define the Animal interface
type Animal interface {
    Speak() string
}

// Define a Dog type that implements the Animal interface
type Dog struct {
    Name string
}

func (d Dog) Speak() string {
    return "Woof!"
}

// Define a Cat type that implements the Animal interface
type Cat struct {
    Name string
}

func (c Cat) Speak() string {
    return "Meow!"
}

// Define a Bird type that implements the Animal interface
type Bird struct {
    Name string
}

func (b Bird) Speak() string {
    return "Chirp!"
}

// Function to process a collection of Animal interfaces
func printAnimalSounds(animals []Animal) {
    for _, animal := range animals {
        fmt.Println(animal.Speak())
    }
}

func main() {
    // Create a slice of the Animal interface type
    animals := []Animal{
        Dog{Name: "Buddy"},
        Cat{Name: "Whiskers"},
        Bird{Name: "Tweety"},
    }

    // Pass the collection to the function
    printAnimalSounds(animals)
}
```

### Summary

- **Interface Collection:** You can create slices or maps of interface types to store diverse types that implement the same interface.
- **Iteration and Processing:** You can iterate over these collections and call interface methods on each element, enabling polymorphic behavior.
- **Function Parameters:** You can pass collections of interfaces to functions for flexible and reusable processing.

By using collections of interfaces, you can write more generic and reusable code, leveraging Go's powerful type system to handle various concrete types through a unified interface.
var list = ""
for _, row := range rows {
    if len(list) > 0 {
        list += ", "
    }
    list += row.getName()
}
//list is "Rome, Sirius, "