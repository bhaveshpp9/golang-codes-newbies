\\ Simple types.— Numbers — integer — getting random values


In Go, you can generate random integers using the `math/rand` package. This package provides functions like `rand.Int`, `rand.Intn`, and `rand.Int63` to generate random integer values of different types and within specified ranges.

### Example: Generating Random Integers

Here’s an example demonstrating how to generate random integers using the `math/rand` package.

#### Example Code

```go
package main

import (
    "fmt"
    "math/rand"
    "time"
)

func main() {
    // Seed the random number generator
    rand.Seed(time.Now().UnixNano())

    // Generate a random int
    randomInt := rand.Int()
    fmt.Printf("Random int: %d\n", randomInt)

    // Generate a random int in the range [0, 100)
    randomIntn := rand.Intn(100)
    fmt.Printf("Random int in [0, 100): %d\n", randomIntn)

    // Generate a random int64
    randomInt64 := rand.Int63()
    fmt.Printf("Random int64: %d\n", randomInt64)

    // Generate a random int64 in the range [0, 1000)
    randomInt64n := rand.Int63n(1000)
    fmt.Printf("Random int64 in [0, 1000): %d\n", randomInt64n)
}
```

### Explanation

1. **Seed the Random Number Generator**:
   - We use `rand.Seed(time.Now().UnixNano())` to seed the random number generator with the current time. This ensures that the sequence of random numbers is different each time the program runs.

2. **Generate a Random `int`**:
   - We use `rand.Int()` to generate a random integer. The generated value can be any non-negative integer in the range [0, math.MaxInt).

3. **Generate a Random `int` in a Specified Range**:
   - We use `rand.Intn(100)` to generate a random integer in the range [0, 100). The parameter specifies the upper bound of the range.

4. **Generate a Random `int64`**:
   - We use `rand.Int63()` to generate a random 64-bit integer. The generated value can be any non-negative integer in the range [0, math.MaxInt64).

5. **Generate a Random `int64` in a Specified Range**:
   - We use `rand.Int63n(1000)` to generate a random 64-bit integer in the range [0, 1000). The parameter specifies the upper bound of the range.

### Detailed Output

The output of the above code will vary each time the program runs. Here’s an example of what it might look like:
```
Random int: 123456789
Random int in [0, 100): 42
Random int64: 9876543210123456789
Random int64 in [0, 1000): 123
```

### Working with Different Integer Types

You can generate random values for different integer types by casting the results from the `math/rand` functions.

#### Example: Generating Random Values for Different Integer Types

```go
package main

import (
    "fmt"
    "math/rand"
    "time"
)

func main() {
    // Seed the random number generator
    rand.Seed(time.Now().UnixNano())

    // Generate random int8 value
    randomInt8 := int8(rand.Intn(128))
    fmt.Printf("Random int8: %d\n", randomInt8)

    // Generate random int16 value
    randomInt16 := int16(rand.Intn(32768))
    fmt.Printf("Random int16: %d\n", randomInt16)

    // Generate random int32 value
    randomInt32 := int32(rand.Int31())
    fmt.Printf("Random int32: %d\n", randomInt32)

    // Generate random uint value
    randomUint := uint(rand.Uint32())
    fmt.Printf("Random uint: %d\n", randomUint)

    // Generate random uint64 value
    randomUint64 := rand.Uint64()
    fmt.Printf("Random uint64: %d\n", randomUint64)
}
```

### Explanation

1. **Generate Random `int8` Value**:
   - We use `rand.Intn(128)` to generate a random integer in the range [0, 128) and cast it to `int8`.

2. **Generate Random `int16` Value**:
   - We use `rand.Intn(32768)` to generate a random integer in the range [0, 32768) and cast it to `int16`.

3. **Generate Random `int32` Value**:
   - We use `rand.Int31()` to generate a random 32-bit integer and cast it to `int32`.

4. **Generate Random `uint` Value**:
   - We use `rand.Uint32()` to generate a random unsigned 32-bit integer and cast it to `uint`.

5. **Generate Random `uint64` Value**:
   - We use `rand.Uint64()` to generate a random unsigned 64-bit integer.

### Detailed Output

The output of the above code will vary each time the program runs. Here’s an example of what it might look like:
```
Random int8: 42
Random int16: 12345
Random int32: 987654321
Random uint: 1234567890
Random uint64: 9876543210123456789
```

### Summary

In Go, you can generate random integers using the `math/rand` package. Functions like `rand.Int`, `rand.Intn`, `rand.Int63`, and `rand.Int63n` allow you to generate random integer values of different types and within specified ranges. By understanding these functions, you can effectively generate random integers for various scenarios in your Go programs.