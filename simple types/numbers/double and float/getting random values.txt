\\ Simple types.— Numbers — double and float — getting random values


In Go, you can generate random floating-point numbers (`float32` and `float64`) using the `math/rand` package. The `rand.Float32` and `rand.Float64` functions generate random floating-point numbers in the range [0.0, 1.0). You can scale and shift these values to fit other ranges if needed.

### Example: Generating Random Floating-Point Numbers

Here’s an example demonstrating how to generate random `float32` and `float64` values.

#### Example Code

```go
package main

import (
    "fmt"
    "math/rand"
    "time"
)

func main() {
    // Seed the random number generator
    rand.Seed(time.Now().UnixNano())

    // Generate random float32 value in [0.0, 1.0)
    randomFloat32 := rand.Float32()
    fmt.Printf("Random float32: %f\n", randomFloat32)

    // Generate random float64 value in [0.0, 1.0)
    randomFloat64 := rand.Float64()
    fmt.Printf("Random float64: %f\n", randomFloat64)

    // Generate random float32 value in a specific range, e.g., [10.0, 20.0)
    min32 := 10.0
    max32 := 20.0
    randomFloat32InRange := min32 + rand.Float32()*(max32-min32)
    fmt.Printf("Random float32 in range [%.2f, %.2f): %f\n", min32, max32, randomFloat32InRange)

    // Generate random float64 value in a specific range, e.g., [100.0, 200.0)
    min64 := 100.0
    max64 := 200.0
    randomFloat64InRange := min64 + rand.Float64()*(max64-min64)
    fmt.Printf("Random float64 in range [%.2f, %.2f): %f\n", min64, max64, randomFloat64InRange)
}
```

### Explanation

1. **Seed the Random Number Generator**:
   - We use `rand.Seed(time.Now().UnixNano())` to seed the random number generator with the current time. This ensures that the sequence of random numbers is different each time the program runs.

2. **Generate Random `float32` Value**:
   - We use `rand.Float32()` to generate a random `float32` value in the range [0.0, 1.0).
   - We print the generated value using `fmt.Printf`.

3. **Generate Random `float64` Value**:
   - We use `rand.Float64()` to generate a random `float64` value in the range [0.0, 1.0).
   - We print the generated value using `fmt.Printf`.

4. **Generate Random `float32` Value in a Specific Range**:
   - We define a minimum value (`min32`) and a maximum value (`max32`).
   - We generate a random `float32` value in the range [min32, max32) using `min32 + rand.Float32()*(max32-min32)`.
   - We print the generated value using `fmt.Printf`.

5. **Generate Random `float64` Value in a Specific Range**:
   - We define a minimum value (`min64`) and a maximum value (`max64`).
   - We generate a random `float64` value in the range [min64, max64) using `min64 + rand.Float64()*(max64-min64)`.
   - We print the generated value using `fmt.Printf`.

### Detailed Output

The output of the above code will vary each time the program runs. Here’s an example of what it might look like:
```
Random float32: 0.597489
Random float64: 0.145643
Random float32 in range [10.00, 20.00): 13.674936
Random float64 in range [100.00, 200.00): 145.892347
```

### Summary

Generating random floating-point numbers in Go is straightforward using the `math/rand` package. The `rand.Float32` and `rand.Float64` functions generate random numbers in the range [0.0, 1.0). By scaling and shifting these values, you can generate random numbers in any desired range. Seeding the random number generator with the current time ensures that the sequence of random numbers is different each time the program runs. Understanding these techniques allows you to effectively generate random floating-point numbers in your Go programs.