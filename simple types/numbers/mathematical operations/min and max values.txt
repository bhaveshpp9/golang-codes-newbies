\\ Simple types.— Numbers —mathematical operations — min and max values


In Go, you can determine the minimum and maximum values between two numbers using the `math` package, which provides the `math.Min` and `math.Max` functions for floating-point numbers. For integer types, you can implement similar functionality using conditional checks.

### Min and Max for Floating-Point Numbers

The `math.Min` and `math.Max` functions are used to find the minimum and maximum of two floating-point numbers, respectively.

#### Example: Finding Min and Max for Floating-Point Numbers

```go
package main

import (
    "fmt"
    "math"
)

func main() {
    // Define two floating-point numbers
    num1 := 3.14
    num2 := 2.71

    // Find the minimum and maximum
    minVal := math.Min(num1, num2)
    maxVal := math.Max(num1, num2)

    // Print the results
    fmt.Printf("The minimum of %f and %f is %f\n", num1, num2, minVal)
    fmt.Printf("The maximum of %f and %f is %f\n", num1, num2, maxVal)
}
```

### Detailed Output

The output of the above code will be:
```
The minimum of 3.140000 and 2.710000 is 2.710000
The maximum of 3.140000 and 2.710000 is 3.140000
```

### Min and Max for Integer Numbers

For integer numbers, you can implement similar functionality using conditional checks.

#### Example: Finding Min and Max for Integer Numbers

```go
package main

import "fmt"

// MinInt returns the minimum of two int values
func MinInt(a, b int) int {
    if a < b {
        return a
    }
    return b
}

// MaxInt returns the maximum of two int values
func MaxInt(a, b int) int {
    if a > b {
        return a
    }
    return b
}

func main() {
    // Define two integer numbers
    num1 := 42
    num2 := 27

    // Find the minimum and maximum
    minVal := MinInt(num1, num2)
    maxVal := MaxInt(num1, num2)

    // Print the results
    fmt.Printf("The minimum of %d and %d is %d\n", num1, num2, minVal)
    fmt.Printf("The maximum of %d and %d is %d\n", num1, num2, maxVal)
}
```

### Detailed Output

The output of the above code will be:
```
The minimum of 42 and 27 is 27
The maximum of 42 and 27 is 42
```

### Min and Max for Different Integer Types

You can generalize the min and max functions for other integer types (`int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`).

#### Example: Finding Min and Max for Different Integer Types

```go
package main

import "fmt"

// MinInt64 returns the minimum of two int64 values
func MinInt64(a, b int64) int64 {
    if a < b {
        return a
    }
    return b
}

// MaxInt64 returns the maximum of two int64 values
func MaxInt64(a, b int64) int64 {
    if a > b {
        return a
    }
    return b
}

// MinUint returns the minimum of two uint values
func MinUint(a, b uint) uint {
    if a < b {
        return a
    }
    return b
}

// MaxUint returns the maximum of two uint values
func MaxUint(a, b uint) uint {
    if a > b {
        return a
    }
    return b
}

func main() {
    // Define integer numbers of different types
    num1Int64 := int64(42)
    num2Int64 := int64(27)
    num1Uint := uint(42)
    num2Uint := uint(27)

    // Find the minimum and maximum for int64
    minInt64 := MinInt64(num1Int64, num2Int64)
    maxInt64 := MaxInt64(num1Int64, num2Int64)
    fmt.Printf("The minimum of %d and %d is %d\n", num1Int64, num2Int64, minInt64)
    fmt.Printf("The maximum of %d and %d is %d\n", num1Int64, num2Int64, maxInt64)

    // Find the minimum and maximum for uint
    minUint := MinUint(num1Uint, num2Uint)
    maxUint := MaxUint(num1Uint, num2Uint)
    fmt.Printf("The minimum of %d and %d is %d\n", num1Uint, num2Uint, minUint)
    fmt.Printf("The maximum of %d and %d is %d\n", num1Uint, num2Uint, maxUint)
}
```

### Detailed Output

The output of the above code will be:
```
The minimum of 42 and 27 is 27
The maximum of 42 and 27 is 42
The minimum of 42 and 27 is 27
The maximum of 42 and 27 is 42
```

### Summary

In Go, you can determine the minimum and maximum values between two numbers using the `math.Min` and `math.Max` functions for floating-point numbers. For integer types, you can implement similar functionality using simple conditional checks. By understanding these functions and techniques, you can effectively handle min and max operations in your Go programs for both floating-point and integer numbers.