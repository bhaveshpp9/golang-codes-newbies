\\ Simple types.— Character type — converting to a string


In Go, you can convert a single character (represented by a `rune`) to a string using type conversion or string formatting. The `rune` type is an alias for `int32` and is used to represent a Unicode code point. Converting a `rune` to a string involves creating a string that contains just that single character.

### Converting a `rune` to a String

#### Example: Using Type Conversion

You can convert a `rune` to a string directly using type conversion.

```go
package main

import (
    "fmt"
)

func main() {
    // Define a rune (character)
    var r rune = 'A'

    // Convert the rune to a string
    str := string(r)

    fmt.Printf("The character '%c' as a string: %s\n", r, str) // Output: The character 'A' as a string: A
}
```

### Example: Using `fmt.Sprintf`

You can also convert a `rune` to a string using `fmt.Sprintf`.

```go
package main

import (
    "fmt"
)

func main() {
    // Define a rune (character)
    var r rune = 'B'

    // Convert the rune to a string using fmt.Sprintf
    str := fmt.Sprintf("%c", r)

    fmt.Printf("The character '%c' as a string: %s\n", r, str) // Output: The character 'B' as a string: B
}
```

### Combining Conversions in a Program

Let's combine both conversion methods in a single program to demonstrate how you can convert `rune` values to strings using different techniques.

#### Example: Character to String Using Both Methods

```go
package main

import (
    "fmt"
)

func main() {
    // Define runes (characters)
    var r1 rune = 'C'
    var r2 rune = 'D'

    // Convert runes to strings using type conversion
    str1 := string(r1)

    // Convert runes to strings using fmt.Sprintf
    str2 := fmt.Sprintf("%c", r2)

    fmt.Printf("The character '%c' as a string: %s (using type conversion)\n", r1, str1) // Output: The character 'C' as a string: C
    fmt.Printf("The character '%c' as a string: %s (using fmt.Sprintf)\n", r2, str2)    // Output: The character 'D' as a string: D
}
```

### Explanation

1. **Define Runes**:
   - We define `r1` with the value `'C'` and `r2` with the value `'D'`.

2. **Convert Using Type Conversion**:
   - We convert `r1` to a string using `string(r1)`.

3. **Convert Using `fmt.Sprintf`**:
   - We convert `r2` to a string using `fmt.Sprintf("%c", r2)`.

4. **Print Results**:
   - We print the original runes and their corresponding string representations using both methods.

### Detailed Output

The output of the above code will be:
```
The character 'C' as a string: C (using type conversion)
The character 'D' as a string: D (using fmt.Sprintf)
```

### Practical Example: Iterating Over a String and Converting Characters to Strings

Here's a practical example that demonstrates iterating over a string, converting each character to a `rune`, and then converting each `rune` back to a string.

#### Example: Iterating Over a String

```go
package main

import (
    "fmt"
)

func main() {
    // Define a string
    str := "Hello, Go!"

    // Iterate over each character in the string
    for _, char := range str {
        // Convert the character (rune) to a string using type conversion
        charStr := string(char)

        fmt.Printf("Character: '%c', as string: %s\n", char, charStr)
    }
}
```

### Detailed Output

The output of the above code will be:
```
Character: 'H', as string: H
Character: 'e', as string: e
Character: 'l', as string: l
Character: 'l', as string: l
Character: 'o', as string: o
Character: ',', as string: ,
Character: ' ', as string:  
Character: 'G', as string: G
Character: 'o', as string: o
Character: '!', as string: !
```

### Summary

By using type conversion or `fmt.Sprintf`, you can easily convert `rune` values to strings in Go. This allows you to manipulate and work with individual characters and their string representations effectively. Whether you are processing text, performing string manipulations, or handling Unicode characters, these conversion methods are essential tools in Go.