\\ Simple types.— Strings — Characters count

In Go, you can count the number of characters in a string using several approaches. The simplest way is to use the built-in `len` function to get the length of the string in bytes. However, this approach may not work correctly for strings containing multi-byte Unicode characters. Instead, you can convert the string to a slice of runes to accurately count Unicode characters.

### Example: Counting Characters Using `len`

This method counts the number of bytes in the string, which is appropriate for ASCII strings.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define a string
    str := "hello world"

    // Count the number of characters using len
    byteCount := len(str)

    // Print the result
    fmt.Printf("Number of bytes: %d\n", byteCount)
}
```

### Explanation

1. **Define a String**:
   - We define a string `str` with the value "hello world".

2. **Count the Number of Characters Using `len`**:
   - We use the `len` function to count the number of bytes in the string.

3. **Print the Result**:
   - We print the byte count using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Number of bytes: 11
```

### Example: Counting Characters Using Rune Slice

This method accurately counts the number of characters in a string, including multi-byte Unicode characters.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define a string
    str := "hello 世界"

    // Convert the string to a slice of runes
    runeSlice := []rune(str)

    // Count the number of characters
    charCount := len(runeSlice)

    // Print the result
    fmt.Printf("Number of characters: %d\n", charCount)
}
```

### Explanation

1. **Define a String**:
   - We define a string `str` with the value "hello 世界", which includes multi-byte Unicode characters.

2. **Convert the String to a Slice of Runes**:
   - We convert the string to a slice of runes using `[]rune(str)`.

3. **Count the Number of Characters**:
   - We use the `len` function on the rune slice to count the number of characters.

4. **Print the Result**:
   - We print the character count using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Number of characters: 8
```

### Example: Counting Specific Characters

You can also count the occurrences of a specific character in a string using a loop.

#### Example Code

```go
package main

import (
    "fmt"
)

func countChar(s string, target rune) int {
    count := 0
    for _, ch := range s {
        if ch == target {
            count++
        }
    }
    return count
}

func main() {
    // Define a string
    str := "hello world"

    // Count the occurrences of 'l'
    targetChar := 'l'
    count := countChar(str, targetChar)

    // Print the result
    fmt.Printf("Number of '%c' characters: %d\n", targetChar, count)
}
```

### Explanation

1. **Define a Function to Count Specific Characters**:
   - The `countChar` function takes a string `s` and a target character `target`.
   - It iterates over the string, counting occurrences of the target character.

2. **Count the Occurrences of a Specific Character**:
   - We call `countChar(str, 'l')` to count the occurrences of the character 'l' in the string.

3. **Print the Result**:
   - We print the count using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Number of 'l' characters: 3
```

### Summary

In Go, you can count characters in a string using different methods. The `len` function counts the number of bytes, which is appropriate for ASCII strings. For Unicode strings, converting the string to a slice of runes allows you to accurately count the number of characters. Additionally, you can count occurrences of specific characters using a loop. These methods provide flexibility in handling different string character counting scenarios in Go programs.