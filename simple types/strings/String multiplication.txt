\\ Simple types.— Strings — String multiplication


In Go, there isn't a built-in operator for string multiplication (repeating a string multiple times) like in some other languages (e.g., Python's `"hello" * 3`). However, you can achieve this by using a loop or by leveraging the `strings.Builder` or `strings.Repeat` function from the `strings` package for efficiency.

### Using `strings.Repeat`

The `strings.Repeat` function is the most straightforward way to repeat a string multiple times in Go.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func main() {
    // Define a string
    str := "Hello"

    // Define the number of repetitions
    count := 3

    // Repeat the string using strings.Repeat
    repeatedStr := strings.Repeat(str, count)

    // Print the repeated string
    fmt.Printf("Repeated string: %s\n", repeatedStr)
}
```

### Explanation

1. **Import the `strings` Package**:
   - The `strings` package provides the `Repeat` function for repeating strings.

2. **Define a String and the Number of Repetitions**:
   - We define a string `str` with the value "Hello".
   - We define an integer `count` with the value `3` to specify the number of times the string should be repeated.

3. **Repeat the String Using `strings.Repeat`**:
   - We use `strings.Repeat(str, count)` to repeat the string `str` `count` times.

4. **Print the Repeated String**:
   - We print the repeated string using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Repeated string: HelloHelloHello
```

### Using a Loop

You can also repeat a string by using a loop to concatenate the string multiple times.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define a string
    str := "Hello"

    // Define the number of repetitions
    count := 3

    // Initialize an empty string for the result
    var repeatedStr string

    // Repeat the string using a loop
    for i := 0; i < count; i++ {
        repeatedStr += str
    }

    // Print the repeated string
    fmt.Printf("Repeated string: %s\n", repeatedStr)
}
```

### Explanation

1. **Define a String and the Number of Repetitions**:
   - We define a string `str` with the value "Hello".
   - We define an integer `count` with the value `3` to specify the number of times the string should be repeated.

2. **Initialize an Empty String for the Result**:
   - We initialize an empty string `repeatedStr` to hold the concatenated result.

3. **Repeat the String Using a Loop**:
   - We use a `for` loop to concatenate `str` to `repeatedStr` `count` times.

4. **Print the Repeated String**:
   - We print the repeated string using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Repeated string: HelloHelloHello
```

### Using `strings.Builder`

For more efficient string concatenation, especially when dealing with a large number of repetitions, you can use `strings.Builder`.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func main() {
    // Define a string
    str := "Hello"

    // Define the number of repetitions
    count := 3

    // Initialize a strings.Builder
    var builder strings.Builder

    // Repeat the string using strings.Builder
    for i := 0; i < count; i++ {
        builder.WriteString(str)
    }

    // Convert the builder to a string
    repeatedStr := builder.String()

    // Print the repeated string
    fmt.Printf("Repeated string: %s\n", repeatedStr)
}
```

### Explanation

1. **Import the `strings` Package**:
   - The `strings` package provides the `Builder` type for efficient string concatenation.

2. **Define a String and the Number of Repetitions**:
   - We define a string `str` with the value "Hello".
   - We define an integer `count` with the value `3` to specify the number of times the string should be repeated.

3. **Initialize a `strings.Builder`**:
   - We initialize a `strings.Builder` named `builder`.

4. **Repeat the String Using `strings.Builder`**:
   - We use a `for` loop to write `str` to the `builder` `count` times using `builder.WriteString(str)`.

5. **Convert the Builder to a String**:
   - We convert the `builder` to a string using `builder.String()`.

6. **Print the Repeated String**:
   - We print the repeated string using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Repeated string: HelloHelloHello
```

### Summary

In Go, you can repeat a string multiple times using the `strings.Repeat` function, which is the simplest and most efficient method. Alternatively, you can use a loop or `strings.Builder` for more control and efficiency, especially with large strings or high repetition counts. These methods allow you to handle string repetition effectively in your Go programs.