\\ Simple types.— Strings — strings concatenating


In Go, you can concatenate strings using various methods. The most common methods include using the `+` operator, the `fmt.Sprintf` function, the `strings.Join` function, and the `strings.Builder` type. Each method has its own use cases and performance characteristics.

### Concatenating Strings Using the `+` Operator

The simplest way to concatenate strings is by using the `+` operator.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define two strings
    str1 := "Hello"
    str2 := "World"

    // Concatenate strings using the + operator
    concatenatedStr := str1 + ", " + str2 + "!"

    // Print the concatenated string
    fmt.Println(concatenatedStr)
}
```

### Explanation

1. **Define Two Strings**:
   - We define two strings `str1` with the value "Hello" and `str2` with the value "World".

2. **Concatenate Strings Using the `+` Operator**:
   - We use the `+` operator to concatenate `str1`, a comma and space, `str2`, and an exclamation mark.

3. **Print the Concatenated String**:
   - We print the concatenated string using `fmt.Println`.

### Detailed Output

The output of the above code will be:
```
Hello, World!
```

### Concatenating Strings Using `fmt.Sprintf`

The `fmt.Sprintf` function provides a flexible way to concatenate strings using formatted strings.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define two strings
    str1 := "Hello"
    str2 := "World"

    // Concatenate strings using fmt.Sprintf
    concatenatedStr := fmt.Sprintf("%s, %s!", str1, str2)

    // Print the concatenated string
    fmt.Println(concatenatedStr)
}
```

### Explanation

1. **Define Two Strings**:
   - We define two strings `str1` with the value "Hello" and `str2` with the value "World".

2. **Concatenate Strings Using `fmt.Sprintf`**:
   - We use `fmt.Sprintf` to format and concatenate `str1`, a comma and space, `str2`, and an exclamation mark.

3. **Print the Concatenated String**:
   - We print the concatenated string using `fmt.Println`.

### Detailed Output

The output of the above code will be:
```
Hello, World!
```

### Concatenating Strings Using `strings.Join`

The `strings.Join` function is useful for concatenating a slice of strings with a separator.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func main() {
    // Define a slice of strings
    strSlice := []string{"Hello", "World"}

    // Concatenate strings using strings.Join
    concatenatedStr := strings.Join(strSlice, ", ")

    // Print the concatenated string
    fmt.Println(concatenatedStr)
}
```

### Explanation

1. **Define a Slice of Strings**:
   - We define a slice of strings `strSlice` containing "Hello" and "World".

2. **Concatenate Strings Using `strings.Join`**:
   - We use `strings.Join(strSlice, ", ")` to concatenate the strings in the slice with a comma and space as the separator.

3. **Print the Concatenated String**:
   - We print the concatenated string using `fmt.Println`.

### Detailed Output

The output of the above code will be:
```
Hello, World
```

### Concatenating Strings Using `strings.Builder`

The `strings.Builder` type is recommended for efficient string concatenation, especially when concatenating multiple strings in a loop or a large number of strings.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func main() {
    // Define a slice of strings
    strSlice := []string{"Hello", "World", "This", "Is", "Go"}

    // Initialize a strings.Builder
    var builder strings.Builder

    // Concatenate strings using strings.Builder
    for i, str := range strSlice {
        builder.WriteString(str)
        if i < len(strSlice)-1 {
            builder.WriteString(", ")
        }
    }

    // Convert the builder to a string
    concatenatedStr := builder.String()

    // Print the concatenated string
    fmt.Println(concatenatedStr)
}
```

### Explanation

1. **Define a Slice of Strings**:
   - We define a slice of strings `strSlice` containing "Hello", "World", "This", "Is", and "Go".

2. **Initialize a `strings.Builder`**:
   - We initialize a `strings.Builder` named `builder`.

3. **Concatenate Strings Using `strings.Builder`**:
   - We use a `for` loop to iterate over `strSlice`, writing each string to the builder and adding a comma and space between the strings.

4. **Convert the Builder to a String**:
   - We convert the builder to a string using `builder.String()`.

5. **Print the Concatenated String**:
   - We print the concatenated string using `fmt.Println`.

### Detailed Output

The output of the above code will be:
```
Hello, World, This, Is, Go
```

### Summary

In Go, you can concatenate strings using various methods:
- **`+` Operator**: Simple and straightforward for small numbers of strings.
- **`fmt.Sprintf`**: Flexible for formatted strings.
- **`strings.Join`**: Ideal for concatenating a slice of strings with a separator.
- **`strings.Builder`**: Efficient for concatenating multiple strings, especially in loops.

These methods provide flexibility and efficiency for different string concatenation scenarios in your Go programs.