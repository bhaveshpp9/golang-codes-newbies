\\ Simple types.— Strings — Replace multiple characters

In Go, you can replace multiple characters in a string using various techniques, such as iterating through the string and building a new string with the replacements, or using the `strings.Replace` function for each character. 

### Example: Replacing Multiple Characters Using `strings.Replace`

The `strings.Replace` function can be used to replace occurrences of a character with another character. You can chain multiple `strings.Replace` calls to replace multiple characters.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func main() {
    // Define a string
    str := "Hello, World!"

    // Replace multiple characters
    // Replace 'H' with 'h', 'e' with 'E', and 'o' with 'O'
    replacedStr := strings.Replace(str, "H", "h", -1)
    replacedStr = strings.Replace(replacedStr, "e", "E", -1)
    replacedStr = strings.Replace(replacedStr, "o", "O", -1)

    // Print the original and replaced strings
    fmt.Printf("Original string: %s\n", str)
    fmt.Printf("Replaced string: %s\n", replacedStr)
}
```

### Explanation

1. **Define a String**:
   - We define a string `str` with the value "Hello, World!".

2. **Replace Multiple Characters**:
   - We use `strings.Replace` to replace 'H' with 'h', 'e' with 'E', and 'o' with 'O'.
   - The `-1` argument specifies that all occurrences of the character should be replaced.

3. **Print the Original and Replaced Strings**:
   - We print the original and replaced strings using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Original string: Hello, World!
Replaced string: hEllO, WOrld!
```

### Example: Replacing Multiple Characters Using a Loop

You can also replace multiple characters by iterating through the string and building a new string with the replacements.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func replaceMultipleChars(s string, replacements map[rune]rune) string {
    var builder strings.Builder
    for _, char := range s {
        if newChar, ok := replacements[char]; ok {
            builder.WriteRune(newChar)
        } else {
            builder.WriteRune(char)
        }
    }
    return builder.String()
}

func main() {
    // Define a string
    str := "Hello, World!"

    // Define the characters to replace and their replacements
    replacements := map[rune]rune{
        'H': 'h',
        'e': 'E',
        'o': 'O',
    }

    // Replace multiple characters
    replacedStr := replaceMultipleChars(str, replacements)

    // Print the original and replaced strings
    fmt.Printf("Original string: %s\n", str)
    fmt.Printf("Replaced string: %s\n", replacedStr)
}
```

### Explanation

1. **Define a Function to Replace Multiple Characters**:
   - The `replaceMultipleChars` function takes a string `s` and a map of replacements `replacements`.
   - It iterates through each character in the string, checking if the character has a replacement in the map.
   - If a replacement is found, the new character is written to the `strings.Builder`.
   - If no replacement is found, the original character is written to the `strings.Builder`.
   - The function returns the resulting string.

2. **Define a String**:
   - We define a string `str` with the value "Hello, World!".

3. **Define the Characters to Replace and Their Replacements**:
   - We define a map `replacements` with the characters to replace as keys and their replacements as values.

4. **Replace Multiple Characters**:
   - We call `replaceMultipleChars` with the string and the map of replacements to get the modified string.

5. **Print the Original and Replaced Strings**:
   - We print the original and replaced strings using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Original string: Hello, World!
Replaced string: hEllO, WOrld!
```

### Summary

In Go, you can replace multiple characters in a string using the `strings.Replace` function in a chain for each character to be replaced, or by iterating through the string and using a map of replacements. These methods allow you to handle multiple character replacements efficiently in your Go programs.