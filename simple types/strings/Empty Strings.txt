\\ Simple types.— Strings — Empty Strings


In Go, working with empty strings is straightforward. An empty string is simply a string with no characters, denoted by `""`. You can check for an empty string, compare it with other strings, and handle it in various ways.

### Checking for Empty Strings

To check if a string is empty, you can use a simple comparison.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define an empty string
    var str string

    // Check if the string is empty
    if str == "" {
        fmt.Println("The string is empty.")
    } else {
        fmt.Println("The string is not empty.")
    }

    // Assign a non-empty value to the string
    str = "Hello, Go!"

    // Check again if the string is empty
    if str == "" {
        fmt.Println("The string is empty.")
    } else {
        fmt.Println("The string is not empty.")
    }
}
```

### Explanation

1. **Define an Empty String**:
   - We define a string variable `str` without initializing it, so it defaults to an empty string.

2. **Check if the String is Empty**:
   - We use the comparison `str == ""` to check if the string is empty and print a corresponding message.

3. **Assign a Non-Empty Value to the String**:
   - We assign a non-empty string `"Hello, Go!"` to `str`.

4. **Check Again if the String is Empty**:
   - We perform the same check to see if the string is empty and print a corresponding message.

### Detailed Output

The output of the above code will be:
```
The string is empty.
The string is not empty.
```

### Comparing Empty Strings

You can compare an empty string with another string using the `==` operator. This is useful in conditional statements and loops.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define an empty string and a non-empty string
    emptyStr := ""
    nonEmptyStr := "Go"

    // Compare the empty string with the non-empty string
    if emptyStr == nonEmptyStr {
        fmt.Println("The strings are equal.")
    } else {
        fmt.Println("The strings are not equal.")
    }

    // Compare the empty string with another empty string
    anotherEmptyStr := ""
    if emptyStr == anotherEmptyStr {
        fmt.Println("The empty strings are equal.")
    } else {
        fmt.Println("The empty strings are not equal.")
    }
}
```

### Explanation

1. **Define an Empty String and a Non-Empty String**:
   - We define an empty string `emptyStr` and a non-empty string `nonEmptyStr` with the value `"Go"`.

2. **Compare the Empty String with the Non-Empty String**:
   - We use the comparison `emptyStr == nonEmptyStr` to check if the strings are equal and print a corresponding message.

3. **Compare the Empty String with Another Empty String**:
   - We define another empty string `anotherEmptyStr` and compare it with `emptyStr`.

### Detailed Output

The output of the above code will be:
```
The strings are not equal.
The empty strings are equal.
```

### Using Empty Strings in Functions

You can pass empty strings to functions and handle them as needed.

#### Example Code

```go
package main

import (
    "fmt"
)

// Function that checks if a string is empty and returns a message
func checkString(str string) string {
    if str == "" {
        return "The string is empty."
    }
    return "The string is not empty."
}

func main() {
    // Define an empty string and a non-empty string
    emptyStr := ""
    nonEmptyStr := "Go"

    // Pass the strings to the function and print the results
    fmt.Println(checkString(emptyStr))
    fmt.Println(checkString(nonEmptyStr))
}
```

### Explanation

1. **Define a Function to Check if a String is Empty**:
   - The `checkString` function takes a string `str` as input and returns a message indicating whether the string is empty.

2. **Define an Empty String and a Non-Empty String**:
   - We define an empty string `emptyStr` and a non-empty string `nonEmptyStr` with the value `"Go"`.

3. **Pass the Strings to the Function and Print the Results**:
   - We call `checkString` with `emptyStr` and `nonEmptyStr` and print the returned messages.

### Detailed Output

The output of the above code will be:
```
The string is empty.
The string is not empty.
```

### Summary

In Go, working with empty strings involves simple comparisons and conditional checks. You can easily check if a string is empty using `str == ""`, compare empty strings with other strings, and pass empty strings to functions. This allows you to handle empty strings effectively in your Go programs.