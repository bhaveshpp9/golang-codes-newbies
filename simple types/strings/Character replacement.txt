\\ Simple types.â€” Strings â€” Character replacement


In Go, you can replace characters in a string using various methods depending on whether you want to replace all occurrences of a character or only specific ones. The `strings` package provides the `strings.ReplaceAll` function for replacing all occurrences of a substring, while for more complex replacements, you can use rune slices or the `strings.Builder` for efficient string modifications.

### Example: Replacing All Occurrences of a Character

You can use the `strings.ReplaceAll` function to replace all occurrences of a specific character in a string.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func main() {
    // Define a string
    str := "hello world"

    // Replace all occurrences of 'l' with 'x'
    replacedStr := strings.ReplaceAll(str, "l", "x")

    // Print the modified string
    fmt.Printf("Original string: %s\n", str)
    fmt.Printf("Modified string: %s\n", replacedStr)
}
```

### Explanation

1. **Import the `strings` Package**:
   - The `strings` package provides functions for string manipulation, including `ReplaceAll`.

2. **Define a String**:
   - We define a string `str` with the value "hello world".

3. **Replace All Occurrences of a Character**:
   - We use `strings.ReplaceAll(str, "l", "x")` to replace all occurrences of 'l' with 'x' in the string.

4. **Print the Modified String**:
   - We print the original and modified strings using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Original string: hello world
Modified string: hexxo worxd
```

### Example: Replacing a Specific Character at a Given Index

To replace a character at a specific index, you can convert the string to a slice of runes, perform the replacement, and convert it back to a string.

#### Example Code

```go
package main

import (
    "fmt"
)

func replaceAtIndex(s string, index int, newChar rune) string {
    runes := []rune(s)
    if index >= 0 && index < len(runes) {
        runes[index] = newChar
    }
    return string(runes)
}

func main() {
    // Define a string
    str := "hello world"

    // Replace the character at index 6 with 'W'
    replacedStr := replaceAtIndex(str, 6, 'W')

    // Print the modified string
    fmt.Printf("Original string: %s\n", str)
    fmt.Printf("Modified string: %s\n", replacedStr)
}
```

### Explanation

1. **Define a Function for Character Replacement at a Specific Index**:
   - The `replaceAtIndex` function takes a string `s`, an index `index`, and a new character `newChar`.
   - It converts the string to a slice of runes, performs the replacement if the index is valid, and converts the rune slice back to a string.

2. **Replace the Character at a Specific Index**:
   - We call `replaceAtIndex(str, 6, 'W')` to replace the character at index 6 with 'W'.

3. **Print the Modified String**:
   - We print the original and modified strings using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Original string: hello world
Modified string: hello World
```

### Example: Replacing Specific Characters Using `strings.Builder`

For more efficient string building and replacement, you can use `strings.Builder`.

#### Example Code

```go
package main

import (
    "fmt"
    "strings"
)

func replaceChar(s string, oldChar, newChar rune) string {
    var builder strings.Builder
    for _, ch := range s {
        if ch == oldChar {
            builder.WriteRune(newChar)
        } else {
            builder.WriteRune(ch)
        }
    }
    return builder.String()
}

func main() {
    // Define a string
    str := "hello world"

    // Replace all occurrences of 'o' with '0'
    replacedStr := replaceChar(str, 'o', '0')

    // Print the modified string
    fmt.Printf("Original string: %s\n", str)
    fmt.Printf("Modified string: %s\n", replacedStr)
}
```

### Explanation

1. **Define a Function for Character Replacement Using `strings.Builder`**:
   - The `replaceChar` function takes a string `s`, an old character `oldChar`, and a new character `newChar`.
   - It uses a `strings.Builder` to efficiently build the modified string by iterating over the original string and replacing occurrences of `oldChar` with `newChar`.

2. **Replace Specific Characters**:
   - We call `replaceChar(str, 'o', '0')` to replace all occurrences of 'o' with '0'.

3. **Print the Modified String**:
   - We print the original and modified strings using `fmt.Printf`.

### Detailed Output

The output of the above code will be:
```
Original string: hello world
Modified string: hell0 w0rld
```

### Summary

In Go, you can replace characters in a string using functions from the `strings` package for simple replacements, or by converting the string to a rune slice for more complex replacements. Using `strings.Builder` can provide efficient string modifications. These methods allow you to perform character replacement effectively in your Go programs.