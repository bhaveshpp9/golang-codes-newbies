\\ Simple types.— Boolean — Conversion from a string


In Go, you can convert a string to a boolean using the `strconv` package, which provides functions for parsing boolean values from strings. The `strconv.ParseBool` function can be used to convert a string to a boolean.

### Example: Converting a String to a Boolean

Here is a simple example demonstrating how to convert a string to a boolean using `strconv.ParseBool`.

#### Example Code

```go
package main

import (
    "fmt"
    "strconv"
)

func main() {
    // Define some test strings
    testStrings := []string{"true", "false", "1", "0", "yes", "no"}

    for _, str := range testStrings {
        // Convert the string to a boolean
        boolValue, err := strconv.ParseBool(str)
        if err != nil {
            fmt.Printf("Error converting '%s' to boolean: %v\n", str, err)
        } else {
            fmt.Printf("The string '%s' converts to boolean: %t\n", str, boolValue)
        }
    }
}
```

### Explanation

1. **Import Packages**: We import the `fmt` package for printing and the `strconv` package for parsing.
2. **Define Test Strings**: We define a slice of strings that we want to convert to boolean values.
3. **Loop Through Test Strings**: We loop through each string in the slice.
4. **Convert String to Boolean**:
   - We use `strconv.ParseBool` to attempt to convert the string to a boolean.
   - If the conversion is successful, it returns the boolean value and a nil error.
   - If the conversion fails, it returns an error, which we handle and print.
5. **Print Results**: We print the results of the conversions.

### Detailed Output

The output of the above code will be:
```
The string 'true' converts to boolean: true
The string 'false' converts to boolean: false
The string '1' converts to boolean: true
The string '0' converts to boolean: false
Error converting 'yes' to boolean: strconv.ParseBool: parsing "yes": invalid syntax
Error converting 'no' to boolean: strconv.ParseBool: parsing "no": invalid syntax
```

### Notes on `strconv.ParseBool`

- **Accepted Values**:
  - `"1"` and `"t"` (case-insensitive) convert to `true`.
  - `"0"` and `"f"` (case-insensitive) convert to `false`.
  - `"true"` and `"false"` (case-insensitive) convert to `true` and `false`, respectively.
- **Error Handling**: If the string does not represent a valid boolean value, `strconv.ParseBool` returns an error.
- **Case Insensitivity**: The function is case-insensitive for the boolean values (`true`, `false`, `t`, `f`).

### Custom Conversion

If you need to handle more custom boolean representations, such as `"yes"` or `"no"`, you can implement a custom conversion function.

#### Example: Custom String to Boolean Conversion

```go
package main

import (
    "fmt"
    "strings"
)

func customParseBool(str string) (bool, error) {
    str = strings.ToLower(str)
    switch str {
    case "true", "1", "t", "yes":
        return true, nil
    case "false", "0", "f", "no":
        return false, nil
    default:
        return false, fmt.Errorf("invalid boolean string: %s", str)
    }
}

func main() {
    // Define some test strings
    testStrings := []string{"true", "false", "1", "0", "yes", "no", "TRUE", "FALSE", "yEs", "No"}

    for _, str := range testStrings {
        // Convert the string to a boolean using the custom function
        boolValue, err := customParseBool(str)
        if err != nil {
            fmt.Printf("Error converting '%s' to boolean: %v\n", str, err)
        } else {
            fmt.Printf("The string '%s' converts to boolean: %t\n", str, boolValue)
        }
    }
}
```

### Detailed Output

The output of the custom conversion example will be:
```
The string 'true' converts to boolean: true
The string 'false' converts to boolean: false
The string '1' converts to boolean: true
The string '0' converts to boolean: false
The string 'yes' converts to boolean: true
The string 'no' converts to boolean: false
The string 'TRUE' converts to boolean: true
The string 'FALSE' converts to boolean: false
The string 'yEs' converts to boolean: true
The string 'No' converts to boolean: false
```

By using `strconv.ParseBool` or a custom conversion function, you can effectively handle various boolean string representations and convert them to boolean values in Go.