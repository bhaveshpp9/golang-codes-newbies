\\ Simple types.— Boolean — logical operations


In Go, boolean values (`bool`) can be manipulated using logical operations. The primary logical operators are:

1. **AND (`&&`)**: Returns `true` if both operands are `true`.
2. **OR (`||`)**: Returns `true` if at least one of the operands is `true`.
3. **NOT (`!`)**: Inverts the boolean value; returns `true` if the operand is `false`, and vice versa.

These operators can be used to build complex logical expressions.

### Example: Using Logical Operations

Here is an example demonstrating the use of logical operations in Go.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Define some boolean values
    a := true
    b := false

    // AND operation
    c := a && b
    fmt.Printf("%t AND %t = %t\n", a, b, c) // Output: true AND false = false

    // OR operation
    d := a || b
    fmt.Printf("%t OR %t = %t\n", a, b, d) // Output: true OR false = true

    // NOT operation
    e := !a
    fmt.Printf("NOT %t = %t\n", a, e) // Output: NOT true = false

    // Combined operations
    f := (a && b) || (!a && !b)
    fmt.Printf("(%t AND %t) OR (NOT %t AND NOT %t) = %t\n", a, b, a, b, f) // Output: (true AND false) OR (NOT true AND NOT false) = true

    // More complex example
    x := true
    y := false
    z := true

    // Evaluate complex boolean expression
    result := (x && y) || (x && z) || (!x && !y && z)
    fmt.Printf("(%t AND %t) OR (%t AND %t) OR (NOT %t AND NOT %t AND %t) = %t\n", x, y, x, z, x, y, z, result) // Output: (true AND false) OR (true AND true) OR (NOT true AND NOT false AND true) = true
}
```

### Explanation

1. **AND Operation (`&&`)**:
   - The expression `a && b` evaluates to `true` only if both `a` and `b` are `true`.
   - In this example, `a` is `true` and `b` is `false`, so `a && b` evaluates to `false`.

2. **OR Operation (`||`)**:
   - The expression `a || b` evaluates to `true` if either `a` or `b` (or both) are `true`.
   - In this example, `a` is `true` and `b` is `false`, so `a || b` evaluates to `true`.

3. **NOT Operation (`!`)**:
   - The expression `!a` inverts the boolean value of `a`.
   - In this example, `a` is `true`, so `!a` evaluates to `false`.

4. **Combined Operations**:
   - The expression `(a && b) || (!a && !b)` combines multiple logical operations.
   - In this example, `(true && false) || (!true && !false)` evaluates to `true`.

5. **Complex Example**:
   - The expression `(x && y) || (x && z) || (!x && !y && z)` is more complex and evaluates to `true`.
   - It demonstrates how multiple logical operations can be combined to form a more complex boolean expression.

### Detailed Output

The output of the above code will be:
```
true AND false = false
true OR false = true
NOT true = false
(true AND false) OR (NOT true AND NOT false) = true
(true AND false) OR (true AND true) OR (NOT true AND NOT false AND true) = true
```

### Notes on Logical Operations

- **Short-Circuit Evaluation**: Go uses short-circuit evaluation for logical operators:
  - For `&&`, if the left operand is `false`, the right operand is not evaluated because the result is already determined to be `false`.
  - For `||`, if the left operand is `true`, the right operand is not evaluated because the result is already determined to be `true`.
- **Operator Precedence**: The NOT operator (`!`) has higher precedence than AND (`&&`), which in turn has higher precedence than OR (`||`). Use parentheses to ensure the correct order of evaluation in complex expressions.
- **Readability**: When writing complex logical expressions, using parentheses to group conditions can improve readability and ensure the correct evaluation order.

### Practical Example: Access Control

Here's a practical example that uses logical operations to determine access permissions.

```go
package main

import (
    "fmt"
)

func main() {
    // Example user permissions
    isAdmin := true
    isEditor := false
    isAuthor := true

    // Determine if the user has access to a specific action
    canPublish := isAdmin || isEditor
    canEdit := isAdmin || isEditor || isAuthor
    canDelete := isAdmin

    fmt.Printf("Can publish: %t\n", canPublish) // Output: Can publish: true
    fmt.Printf("Can edit: %t\n", canEdit)       // Output: Can edit: true
    fmt.Printf("Can delete: %t\n", canDelete)   // Output: Can delete: true
}
```

### Detailed Output

The output of the practical example will be:
```
Can publish: true
Can edit: true
Can delete: true
```

By using logical operations, you can implement complex boolean logic in your programs, such as determining access permissions, evaluating conditions, and controlling the flow of your application.