\\ Simple types.— Pointers — struct pointers

In Go, you can work with pointers to structs to manipulate struct data directly via the pointer. This is useful for efficient memory management and when you want to pass large structs to functions without copying the entire struct.

### Declaring and Initializing Struct Pointers

#### Example: Basic Usage of Struct Pointers

Here's an example demonstrating how to declare, initialize, and use pointers to structs in Go.

```go
package main

import (
    "fmt"
)

// Define a struct type
type Person struct {
    name string
    age  int
}

func main() {
    // Create an instance of Person
    p1 := Person{"Alice", 30}

    // Create a pointer to the Person instance
    p := &p1

    // Print the fields of the struct via the pointer
    fmt.Printf("Name: %s, Age: %d\n", p.name, p.age)

    // Modify the fields of the struct via the pointer
    p.name = "Bob"
    p.age = 25

    // Print the modified fields of the struct
    fmt.Printf("Modified Name: %s, Modified Age: %d\n", p.name, p.age)
}
```

### Explanation

1. **Define a Struct Type**:
   - We define a struct type `Person` with fields `name` and `age`.

2. **Create an Instance of `Person`**:
   - We create an instance of `Person` named `p1`.

3. **Create a Pointer to the `Person` Instance**:
   - We create a pointer `p` to the `Person` instance `p1` using the `&` operator.

4. **Print the Fields of the Struct via the Pointer**:
   - We access and print the fields of the struct via the pointer `p`.

5. **Modify the Fields of the Struct via the Pointer**:
   - We modify the fields of the struct via the pointer `p`.

6. **Print the Modified Fields of the Struct**:
   - We print the modified fields to verify the changes.

### Detailed Output

The output of the above code will be:
```
Name: Alice, Age: 30
Modified Name: Bob, Modified Age: 25
```

### Passing Struct Pointers to Functions

Passing a struct pointer to a function allows the function to modify the original struct data without making a copy of the entire struct.

#### Example: Passing Struct Pointers to Functions

```go
package main

import (
    "fmt"
)

// Define a struct type
type Person struct {
    name string
    age  int
}

// Function to modify the fields of a Person struct
func updatePerson(p *Person, name string, age int) {
    p.name = name
    p.age = age
}

func main() {
    // Create an instance of Person
    p := Person{"Alice", 30}

    // Print the original fields
    fmt.Printf("Original Name: %s, Original Age: %d\n", p.name, p.age)

    // Update the Person struct via the function
    updatePerson(&p, "Bob", 25)

    // Print the updated fields
    fmt.Printf("Updated Name: %s, Updated Age: %d\n", p.name, p.age)
}
```

### Explanation

1. **Define a Struct Type**:
   - We define a struct type `Person` with fields `name` and `age`.

2. **Define a Function to Modify the Fields of a `Person` Struct**:
   - We define a function `updatePerson` that takes a pointer to a `Person` struct and new values for `name` and `age`.
   - The function modifies the fields of the struct via the pointer.

3. **Create an Instance of `Person`**:
   - We create an instance of `Person` named `p`.

4. **Print the Original Fields**:
   - We print the original values of the fields in the `Person` struct.

5. **Update the `Person` Struct via the Function**:
   - We call `updatePerson` with a pointer to the `Person` struct and new values for `name` and `age`.

6. **Print the Updated Fields**:
   - We print the updated values of the fields to verify the changes.

### Detailed Output

The output of the above code will be:
```
Original Name: Alice, Original Age: 30
Updated Name: Bob, Updated Age: 25
```

### Creating Struct Pointers with `new`

You can also use the `new` function to allocate memory for a struct and obtain a pointer to it.

#### Example: Creating Struct Pointers with `new`

```go
package main

import (
    "fmt"
)

// Define a struct type
type Person struct {
    name string
    age  int
}

func main() {
    // Allocate memory for a Person struct and get a pointer to it
    p := new(Person)

    // Initialize the fields of the struct via the pointer
    p.name = "Alice"
    p.age = 30

    // Print the fields of the struct via the pointer
    fmt.Printf("Name: %s, Age: %d\n", p.name, p.age)
}
```

### Explanation

1. **Define a Struct Type**:
   - We define a struct type `Person` with fields `name` and `age`.

2. **Allocate Memory for a `Person` Struct and Get a Pointer to It**:
   - We use `new(Person)` to allocate memory for a `Person` struct and get a pointer to it.

3. **Initialize the Fields of the Struct via the Pointer**:
   - We initialize the fields of the struct via the pointer `p`.

4. **Print the Fields of the Struct via the Pointer**:
   - We print the values of the fields in the struct pointed to by `p`.

### Detailed Output

The output of the above code will be:
```
Name: Alice, Age: 30
```

### Summary

In Go, you can work with pointers to structs to manipulate struct data efficiently. You can declare and initialize struct pointers using the `&` operator, pass struct pointers to functions for modifications, and use the `new` function to allocate memory for structs. Understanding how to work with struct pointers is essential for managing complex data structures and optimizing memory usage in Go programs.