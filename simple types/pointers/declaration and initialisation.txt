\\ Simple types.— Pointers — declaration and initialisation

In Go, pointers are variables that store the memory address of another variable. Pointers can be declared and initialized to point to different types of data. Here’s how you can work with pointers in Go:

### Declaring and Initializing Pointers

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Declare an integer variable
    var x int = 42

    // Declare a pointer to an integer and initialize it
    var p *int
    p = &x

    // Print the value of x, the pointer p, and the value pointed to by p
    fmt.Printf("Value of x: %d\n", x)
    fmt.Printf("Address of x: %p\n", &x)
    fmt.Printf("Value of p: %p\n", p)
    fmt.Printf("Value pointed to by p: %d\n", *p)

    // Modify the value of x using the pointer
    *p = 21

    // Print the modified value of x
    fmt.Printf("Modified value of x: %d\n", x)
}
```

### Explanation

1. **Declare an Integer Variable**:
   - We declare an integer variable `x` and initialize it with the value `42`.

2. **Declare a Pointer to an Integer and Initialize It**:
   - We declare a pointer variable `p` of type `*int` (pointer to an integer).
   - We initialize `p` with the address of `x` using the `&` operator.

3. **Print the Value of `x`, the Pointer `p`, and the Value Pointed to by `p`**:
   - We print the value of `x` using `%d`.
   - We print the address of `x` using `%p`.
   - We print the value of `p` (which is the address of `x`) using `%p`.
   - We print the value pointed to by `p` using `*p`.

4. **Modify the Value of `x` Using the Pointer**:
   - We modify the value of `x` by dereferencing the pointer `p` and assigning a new value `21` to `*p`.

5. **Print the Modified Value of `x`**:
   - We print the modified value of `x` to verify that it has been updated.

### Detailed Output

The output of the above code will be:
```
Value of x: 42
Address of x: 0xc0000180a0
Value of p: 0xc0000180a0
Value pointed to by p: 42
Modified value of x: 21
```

### Short Variable Declaration with Pointers

You can also use short variable declaration syntax to declare and initialize pointers.

#### Example Code

```go
package main

import (
    "fmt"
)

func main() {
    // Declare and initialize an integer variable
    x := 42

    // Declare and initialize a pointer to an integer
    p := &x

    // Print the value of x, the pointer p, and the value pointed to by p
    fmt.Printf("Value of x: %d\n", x)
    fmt.Printf("Address of x: %p\n", &x)
    fmt.Printf("Value of p: %p\n", p)
    fmt.Printf("Value pointed to by p: %d\n", *p)

    // Modify the value of x using the pointer
    *p = 21

    // Print the modified value of x
    fmt.Printf("Modified value of x: %d\n", x)
}
```

### Explanation

1. **Declare and Initialize an Integer Variable**:
   - We use short variable declaration syntax to declare and initialize `x` with the value `42`.

2. **Declare and Initialize a Pointer to an Integer**:
   - We use short variable declaration syntax to declare and initialize `p` with the address of `x`.

3. **Print the Value of `x`, the Pointer `p`, and the Value Pointed to by `p`**:
   - Similar to the previous example, we print the value of `x`, the address of `x`, the value of `p`, and the value pointed to by `p`.

4. **Modify the Value of `x` Using the Pointer**:
   - We modify the value of `x` using the pointer `p` and print the modified value.

### Detailed Output

The output of the above code will be:
```
Value of x: 42
Address of x: 0xc0000180a0
Value of p: 0xc0000180a0
Value pointed to by p: 42
Modified value of x: 21
```

### Pointers to Structs

You can also work with pointers to more complex data types, such as structs.

#### Example Code

```go
package main

import (
    "fmt"
)

// Define a struct type
type Person struct {
    name string
    age  int
}

func main() {
    // Create a new instance of Person
    p1 := Person{"Alice", 30}

    // Create a pointer to the Person instance
    p := &p1

    // Print the fields of the struct via the pointer
    fmt.Printf("Name: %s, Age: %d\n", p.name, p.age)

    // Modify the fields of the struct via the pointer
    p.name = "Bob"
    p.age = 25

    // Print the modified fields of the struct
    fmt.Printf("Modified Name: %s, Modified Age: %d\n", p.name, p.age)
}
```

### Explanation

1. **Define a Struct Type**:
   - We define a struct type `Person` with fields `name` and `age`.

2. **Create a New Instance of `Person`**:
   - We create a new instance of `Person` named `p1`.

3. **Create a Pointer to the `Person` Instance**:
   - We create a pointer `p` to the `Person` instance `p1` using the `&` operator.

4. **Print the Fields of the Struct via the Pointer**:
   - We access and print the fields of the struct via the pointer `p`.

5. **Modify the Fields of the Struct via the Pointer**:
   - We modify the fields of the struct via the pointer `p` and print the modified fields.

### Detailed Output

The output of the above code will be:
```
Name: Alice, Age: 30
Modified Name: Bob, Modified Age: 25
```

### Summary

In Go, you can declare and initialize pointers to different types of data, including basic types like integers and more complex types like structs. You can use pointers to access and modify the values of the variables they point to. Understanding how to work with pointers is essential for managing references and efficiently manipulating data in Go programs.