\\ work with database(DB) â€” Execute SQL query


To execute an SQL query in a Go application, you typically use the `database/sql` package, which provides a generic interface around SQL databases. You'll also need a database driver that implements the `database/sql` package interfaces. For example, you can use `github.com/go-sql-driver/mysql` for MySQL or `github.com/lib/pq` for PostgreSQL.

### Example: Executing an SQL Query

Let's create an example where we connect to a MySQL database and execute an SQL query to retrieve data from a table.

#### Step 1: Import Necessary Packages

First, import the necessary packages.

```go
package main

import (
    "database/sql"
    "fmt"
    _ "github.com/go-sql-driver/mysql" // Import the MySQL driver
)
```

#### Step 2: Define the Function to Execute an SQL Query

Create a function that connects to the database, executes an SQL query, and retrieves the data.

```go
// Function to execute an SQL query and retrieve data
func executeSQLQuery(db *sql.DB, query string) (*sql.Rows, error) {
    // Execute the SQL query
    rows, err := db.Query(query)
    if err != nil {
        return nil, err
    }
    return rows, nil
}
```

#### Step 3: Use the Function

Finally, use the `executeSQLQuery` function in the `main` function to execute an SQL query and print the retrieved data.

```go
func main() {
    // Database connection details
    dsn := "username:password@tcp(127.0.0.1:3306)/dbname"

    // Open a connection to the database
    db, err := sql.Open("mysql", dsn)
    if err != nil {
        fmt.Printf("Failed to connect to database: %v\n", err)
        return
    }
    defer db.Close()

    // Test the database connection
    err = db.Ping()
    if err != nil {
        fmt.Printf("Failed to ping database: %v\n", err)
        return
    }

    // SQL query to retrieve data from the table
    query := "SELECT id, name FROM example;"

    // Execute the SQL query
    rows, err := executeSQLQuery(db, query)
    if err != nil {
        fmt.Printf("Failed to execute SQL query: %v\n", err)
        return
    }
    defer rows.Close()

    // Print the retrieved data
    fmt.Println("Data retrieved from the database:")
    for rows.Next() {
        var id int
        var name string
        err := rows.Scan(&id, &name)
        if err != nil {
            fmt.Printf("Failed to scan row: %v\n", err)
            return
        }
        fmt.Printf("ID: %d, Name: %s\n", id, name)
    }

    // Check for errors after iterating through the rows
    if err := rows.Err(); err != nil {
        fmt.Printf("Error iterating through rows: %v\n", err)
        return
    }
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `database/sql` package is used for database operations.
   - The `_ "github.com/go-sql-driver/mysql"` import is a side-effect import that registers the MySQL driver with the `database/sql` package.

2. **Define the `executeSQLQuery` Function**:
   - The function takes a database connection and an SQL query as inputs.
   - It uses the `db.Query` method to execute the SQL query and retrieve the data.
   - It returns the rows retrieved and any error encountered.

3. **Use the Function in `main`**:
   - In `main`, the database connection details are defined.
   - The `sql.Open` function is used to open a connection to the database.
   - The `db.Ping` method is used to verify the connection to the database.
   - An SQL query to retrieve data from the `example` table is defined.
   - The `executeSQLQuery` function is called to execute the SQL query.
   - The retrieved data is iterated through using `rows.Next` and printed.
   - The `rows.Scan` method is used to scan each row into variables.
   - Errors encountered during iteration are checked using `rows.Err`.

### Detailed Output

The program will connect to the MySQL database, execute the SQL query to retrieve data from the `example` table, and print the retrieved data. For example:

```
Data retrieved from the database:
ID: 1, Name: Alice
ID: 2, Name: Bob
ID: 3, Name: Charlie
```

### Summary

In Go, you can execute SQL queries using the `database/sql` package. By defining functions to handle SQL query execution and data retrieval, you can efficiently manage database operations in your applications. This approach is useful for tasks such as retrieving data, querying records, and performing other database operations.