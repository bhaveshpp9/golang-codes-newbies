\\ work with database(DB) — SQL — Data Manipulation Functions — Using Aggregate Functions — AVG() Function

The `AVG()` function in SQL is used to calculate the average value of a numeric column. This function is a common aggregate function and is supported by many SQL databases, including MySQL, SQL Server, PostgreSQL, and SQLite. Here’s a detailed guide on how to use the `AVG()` function across various SQL databases.

### Usage of `AVG()` Function

The basic syntax of the `AVG()` function is:

```sql
AVG(expression)
```

- `expression`: A column name or any valid expression for which you want to calculate the average.

### Examples in Different SQL Databases

#### MySQL

In MySQL, the `AVG()` function calculates the average value of a numeric column:

```sql
SELECT AVG(Salary) AS AverageSalary
FROM Employees;
```

#### SQL Server

In SQL Server, the `AVG()` function works similarly to MySQL:

```sql
SELECT AVG(Salary) AS AverageSalary
FROM Employees;
```

#### PostgreSQL

In PostgreSQL, the `AVG()` function performs the same task:

```sql
SELECT AVG(Salary) AS AverageSalary
FROM Employees;
```

#### SQLite

In SQLite, the `AVG()` function also calculates the average value of a numeric column:

```sql
SELECT AVG(Salary) AS AverageSalary
FROM Employees;
```

### Additional Examples and Use Cases

#### Calculating Average with Group By

You can use the `AVG()` function in conjunction with the `GROUP BY` clause to calculate the average for each group. For example, to calculate the average salary for each department:

##### MySQL

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department;
```

##### SQL Server

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department;
```

##### PostgreSQL

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department;
```

##### SQLite

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department;
```

#### Filtering Results with HAVING Clause

You can use the `HAVING` clause to filter groups based on the average value. For example, to find departments with an average salary greater than 50000:

##### MySQL

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department
HAVING AVG(Salary) > 50000;
```

##### SQL Server

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department
HAVING AVG(Salary) > 50000;
```

##### PostgreSQL

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department
HAVING AVG(Salary) > 50000;
```

##### SQLite

```sql
SELECT Department, AVG(Salary) AS AverageSalary
FROM Employees
GROUP BY Department
HAVING AVG(Salary) > 50000;
```

#### Combining with Other Aggregate Functions

You can combine the `AVG()` function with other aggregate functions like `SUM()`, `COUNT()`, `MIN()`, and `MAX()` in the same query. For example, to get the average, minimum, and maximum salary for each department:

##### MySQL

```sql
SELECT Department, 
       AVG(Salary) AS AverageSalary, 
       MIN(Salary) AS MinimumSalary, 
       MAX(Salary) AS MaximumSalary
FROM Employees
GROUP BY Department;
```

##### SQL Server

```sql
SELECT Department, 
       AVG(Salary) AS AverageSalary, 
       MIN(Salary) AS MinimumSalary, 
       MAX(Salary) AS MaximumSalary
FROM Employees
GROUP BY Department;
```

##### PostgreSQL

```sql
SELECT Department, 
       AVG(Salary) AS AverageSalary, 
       MIN(Salary) AS MinimumSalary, 
       MAX(Salary) AS MaximumSalary
FROM Employees
GROUP BY Department;
```

##### SQLite

```sql
SELECT Department, 
       AVG(Salary) AS AverageSalary, 
       MIN(Salary) AS MinimumSalary, 
       MAX(Salary) AS MaximumSalary
FROM Employees
GROUP BY Department;
```

### Handling NULL Values

The `AVG()` function automatically ignores `NULL` values in the column during calculation. For example, if some employees do not have their salary recorded (`NULL`), those rows are excluded from the average calculation.

### Summary

The `AVG()` function is used to calculate the average value of a numeric column in SQL. This function is supported across various SQL databases and is useful for statistical analysis and reporting. You can use it with `GROUP BY` to calculate averages per group, with `HAVING` to filter based on average values, and in combination with other aggregate functions for comprehensive data summaries.

These examples demonstrate how to use the `AVG()` function across different SQL databases, ensuring you can handle numerical data analysis tasks effectively regardless of the SQL dialect you are working with. If you have more specific queries or need further examples, feel free to ask! ✔️
