\\ work with database(DB) — SQL — Data Manipulation Functions — Date and Time Manipulation — PostgreSQL


Date and time manipulation in PostgreSQL involves using a variety of functions and operators to handle and format date and time values. Here’s a comprehensive guide to help you with these operations.

### Common Date and Time Manipulation Functions

1. **CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP**: Retrieve the current date, time, or timestamp.
2. **EXTRACT()**: Extract parts of a date.
3. **DATE_TRUNC()**: Truncate a date to a specified precision.
4. **AGE()**: Calculate the age between two dates.
5. **TO_CHAR()**: Convert a date or timestamp to a string with a specified format.
6. **TO_DATE()**: Convert a string to a date.
7. **TO_TIMESTAMP()**: Convert a string to a timestamp.
8. **DATE_PART()**: Extract a subfield from a date/time value.
9. **INTERVAL**: Represents a span of time.
10. **JUSTIFY_DAYS, JUSTIFY_HOURS, JUSTIFY_INTERVAL**: Adjust intervals to more human-readable forms.

### Examples of Date and Time Manipulation Functions

#### Retrieving Current Date and Time

```sql
SELECT CURRENT_DATE AS CurrentDate;                 -- Retrieves the current date
SELECT CURRENT_TIME AS CurrentTime;                 -- Retrieves the current time
SELECT CURRENT_TIMESTAMP AS CurrentTimestamp;       -- Retrieves the current timestamp
```

#### Extracting Date and Time Parts

```sql
SELECT EXTRACT(YEAR FROM CURRENT_DATE) AS YearPart;     -- Extracts the year part
SELECT EXTRACT(MONTH FROM CURRENT_DATE) AS MonthPart;   -- Extracts the month part
SELECT EXTRACT(DAY FROM CURRENT_DATE) AS DayPart;       -- Extracts the day part
SELECT EXTRACT(HOUR FROM CURRENT_TIMESTAMP) AS HourPart;        -- Extracts the hour part
SELECT EXTRACT(MINUTE FROM CURRENT_TIMESTAMP) AS MinutePart;    -- Extracts the minute part
SELECT EXTRACT(SECOND FROM CURRENT_TIMESTAMP) AS SecondPart;    -- Extracts the second part
```

#### Truncating Dates

```sql
SELECT DATE_TRUNC('year', CURRENT_DATE) AS TruncatedToYear;     -- Truncates to the start of the year
SELECT DATE_TRUNC('month', CURRENT_DATE) AS TruncatedToMonth;   -- Truncates to the start of the month
SELECT DATE_TRUNC('day', CURRENT_DATE) AS TruncatedToDay;       -- Truncates to the start of the day
SELECT DATE_TRUNC('hour', CURRENT_TIMESTAMP) AS TruncatedToHour;      -- Truncates to the start of the hour
SELECT DATE_TRUNC('minute', CURRENT_TIMESTAMP) AS TruncatedToMinute;  -- Truncates to the start of the minute
```

#### Calculating Differences Between Dates

```sql
SELECT AGE('2024-01-15', '2022-01-01') AS AgeDiff;        -- Calculates the age (difference) between two dates
SELECT '2024-01-15'::date - '2022-01-01'::date AS DayDiff; -- Difference in days
SELECT EXTRACT(EPOCH FROM ('2024-01-15'::timestamp - '2024-01-01'::timestamp)) / 3600 AS HourDiff; -- Difference in hours
```

#### Adding and Subtracting Intervals to Dates

```sql
SELECT CURRENT_DATE + INTERVAL '1 year' AS NextYear;     -- Adds 1 year to the current date
SELECT CURRENT_DATE + INTERVAL '1 month' AS NextMonth;   -- Adds 1 month to the current date
SELECT CURRENT_DATE + INTERVAL '1 day' AS Tomorrow;      -- Adds 1 day to the current date
SELECT CURRENT_TIMESTAMP + INTERVAL '1 hour' AS NextHour;      -- Adds 1 hour to the current timestamp
SELECT CURRENT_TIMESTAMP + INTERVAL '1 minute' AS NextMinute;  -- Adds 1 minute to the current timestamp
SELECT CURRENT_TIMESTAMP + INTERVAL '1 second' AS NextSecond;  -- Adds 1 second to the current timestamp
```

#### Formatting Date and Time Values

```sql
SELECT TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') AS FormattedDate;                 -- Formats date to 'YYYY-MM-DD'
SELECT TO_CHAR(CURRENT_TIMESTAMP, 'MM/DD/YYYY HH24:MI:SS') AS FormattedDateTime;    -- Formats date and time
SELECT TO_CHAR(CURRENT_DATE, 'Day, DD Month YYYY') AS LongFormattedDate;     -- Long formatted date
```

#### Converting Strings to Dates and Timestamps

```sql
SELECT TO_DATE('2024-01-01', 'YYYY-MM-DD') AS DateValue;                     -- Converts string to date
SELECT TO_TIMESTAMP('2024-01-01 10:00:00', 'YYYY-MM-DD HH24:MI:SS') AS TimestampValue; -- Converts string to timestamp
```

#### Justifying Intervals

```sql
SELECT JUSTIFY_DAYS(INTERVAL '40 days') AS JustifiedDays;                   -- Adjusts intervals to more human-readable form
SELECT JUSTIFY_HOURS(INTERVAL '40 hours') AS JustifiedHours;                -- Adjusts intervals to more human-readable form
SELECT JUSTIFY_INTERVAL(INTERVAL '1 month 40 days') AS JustifiedInterval;   -- Adjusts intervals to more human-readable form
```

### Detailed Explanation of Each Function

1. **CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP**
   - **Usage**: `CURRENT_DATE`, `CURRENT_TIME`, `CURRENT_TIMESTAMP`
   - **Example**: `SELECT CURRENT_DATE FROM dual;`

2. **EXTRACT()**
   - **Usage**: `EXTRACT(part FROM date)`
   - **Parts**: YEAR, MONTH, DAY, HOUR, MINUTE, SECOND
   - **Example**: `SELECT EXTRACT(YEAR FROM CURRENT_DATE) FROM dual;`

3. **DATE_TRUNC()**
   - **Usage**: `DATE_TRUNC('part', date)`
   - **Parts**: YEAR, MONTH, DAY, HOUR, MINUTE, SECOND
   - **Example**: `SELECT DATE_TRUNC('month', CURRENT_DATE) FROM dual;`

4. **AGE()**
   - **Usage**: `AGE(date1, date2)`
   - **Example**: `SELECT AGE('2024-01-15', '2022-01-01') FROM dual;`

5. **TO_CHAR()**
   - **Usage**: `TO_CHAR(date, format)`
   - **Example**: `SELECT TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') FROM dual;`

6. **TO_DATE()**
   - **Usage**: `TO_DATE(string, format)`
   - **Example**: `SELECT TO_DATE('2024-01-01', 'YYYY-MM-DD') FROM dual;`

7. **TO_TIMESTAMP()**
   - **Usage**: `TO_TIMESTAMP(string, format)`
   - **Example**: `SELECT TO_TIMESTAMP('2024-01-01 10:00:00', 'YYYY-MM-DD HH24:MI:SS') FROM dual;`

8. **INTERVAL**
   - **Usage**: `INTERVAL 'quantity unit'`
   - **Example**: `SELECT CURRENT_DATE + INTERVAL '1 year' FROM dual;`

9. **JUSTIFY_DAYS, JUSTIFY_HOURS, JUSTIFY_INTERVAL**
   - **Usage**: `JUSTIFY_DAYS(interval)`, `JUSTIFY_HOURS(interval)`, `JUSTIFY_INTERVAL(interval)`
   - **Example**: `SELECT JUSTIFY_DAYS(INTERVAL '40 days') FROM dual;`

### Summary

Date and time manipulation in PostgreSQL involves:

1. **Retrieving Current Date and Time**: Use `CURRENT_DATE`, `CURRENT_TIME`, and `CURRENT_TIMESTAMP` for current date, time, and datetime.
2. **Extracting Date and Time Parts**: Use `EXTRACT()` to get parts like year, month, day, hour, minute, and second.
3. **Truncating Dates**: Use `DATE_TRUNC()` to truncate dates to specified precision.
4. **Calculating Differences Between Dates**: Use `AGE()`, subtraction, and `EXTRACT(EPOCH)` for calculating differences.
5. **Adding and Subtracting Intervals**: Use `INTERVAL` with `+` or `-` operators to add or subtract time intervals.
6. **Formatting Date and Time Values**: Use `TO_CHAR()` to format date and time into various string representations.
7. **Converting Strings to Dates and Timestamps**: Use `TO_DATE()` and `TO_TIMESTAMP()` to convert strings to date and timestamp values.
8. **Justifying Intervals**: Use `JUSTIFY_DAYS()`, `JUSTIFY_HOURS()`, and `JUSTIFY_INTERVAL()` to adjust intervals to more human-readable forms.

These functions provide powerful tools for handling and manipulating date and time data in PostgreSQL databases. If you have more specific queries or need further examples, feel free to ask! ✔️
