\\ work with database(DB) — SQL — Data Manipulation Functions — Text Manipulation — UPPER() Function

The `UPPER()` function in SQL is used to convert all characters in a string to uppercase. This function is supported by many SQL databases, including MySQL, SQL Server, PostgreSQL, and SQLite. Here’s a detailed guide on how to use the `UPPER()` function across various SQL databases.

### Usage of `UPPER()` Function

The basic syntax of the `UPPER()` function is:

```sql
UPPER(text)
```

- `text`: The text string that you want to convert to uppercase.

### Examples in Different SQL Databases

#### MySQL

In MySQL, the `UPPER()` function converts the input string to uppercase:

```sql
SELECT UPPER('Hello World') AS UppercaseString;  -- Returns 'HELLO WORLD'
```

#### SQL Server

In SQL Server, the `UPPER()` function works similarly to MySQL:

```sql
SELECT UPPER('Hello World') AS UppercaseString;  -- Returns 'HELLO WORLD'
```

#### PostgreSQL

In PostgreSQL, the `UPPER()` function performs the same task:

```sql
SELECT UPPER('Hello World') AS UppercaseString;  -- Returns 'HELLO WORLD'
```

#### SQLite

In SQLite, the `UPPER()` function also converts the input string to uppercase:

```sql
SELECT UPPER('Hello World') AS UppercaseString;  -- Returns 'HELLO WORLD'
```

### Additional Examples and Use Cases

#### Converting Column Values to Uppercase

Consider a table `Employees` with a column `FullName`. To convert the `FullName` column values to uppercase:

##### MySQL

```sql
SELECT FullName, UPPER(FullName) AS UppercaseName
FROM Employees;
```

##### SQL Server

```sql
SELECT FullName, UPPER(FullName) AS UppercaseName
FROM Employees;
```

##### PostgreSQL

```sql
SELECT FullName, UPPER(FullName) AS UppercaseName
FROM Employees;
```

##### SQLite

```sql
SELECT FullName, UPPER(FullName) AS UppercaseName
FROM Employees;
```

#### Filtering Data Case-Insensitively

You can use the `UPPER()` function to perform case-insensitive filtering. For example, to find employees whose names contain 'JOHN', regardless of the case:

##### MySQL

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) LIKE '%JOHN%';
```

##### SQL Server

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) LIKE '%JOHN%';
```

##### PostgreSQL

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) LIKE '%JOHN%';
```

##### SQLite

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) LIKE '%JOHN%';
```

### Combining with Other Functions

You can combine the `UPPER()` function with other string functions to perform more complex text manipulations. For example, to convert to uppercase and trim spaces:

##### MySQL

```sql
SELECT FullName, UPPER(TRIM(FullName)) AS TrimmedUppercaseName
FROM Employees;
```

##### SQL Server

In SQL Server, you can use `LTRIM()` and `RTRIM()` together with `UPPER()`:

```sql
SELECT FullName, UPPER(LTRIM(RTRIM(FullName))) AS TrimmedUppercaseName
FROM Employees;
```

##### PostgreSQL

```sql
SELECT FullName, UPPER(TRIM(FullName)) AS TrimmedUppercaseName
FROM Employees;
```

##### SQLite

```sql
SELECT FullName, UPPER(TRIM(FullName)) AS TrimmedUppercaseName
FROM Employees;
```

### Using `UPPER()` in a WHERE Clause

You can use the `UPPER()` function in a `WHERE` clause to filter records based on uppercase text. For example, to find employees whose uppercase `FullName` is 'JOHN DOE':

##### MySQL

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) = 'JOHN DOE';
```

##### SQL Server

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) = 'JOHN DOE';
```

##### PostgreSQL

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) = 'JOHN DOE';
```

##### SQLite

```sql
SELECT FullName
FROM Employees
WHERE UPPER(FullName) = 'JOHN DOE';
```

### Summary

The `UPPER()` function is used to convert a string to uppercase in SQL. This function is supported across various SQL databases and is useful for standardizing text data, ensuring consistency, and performing case-insensitive comparisons.

These examples demonstrate how to use the `UPPER()` function across different SQL databases, ensuring you can handle text manipulation tasks effectively regardless of the SQL dialect you are working with. If you have more specific queries or need further examples, feel free to ask! ✔️
