\\ work with database(DB) — SQL — Updating and deleting data — Using Subqueries in UDATE


Using subqueries in an `UPDATE` statement allows you to update rows in a table based on conditions specified in another query. This technique is useful for performing complex updates where the new values depend on the results of other queries. Below are examples of how to use subqueries in an `UPDATE` statement across various SQL databases, including MySQL, PostgreSQL, SQLite, Microsoft SQL Server, and Oracle.

### Example Tables

Assume we have the following tables:

#### Employees Table

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT,
    salary INT
);

INSERT INTO Employees (emp_id, emp_name, dept_id, salary) VALUES
(1, 'Alice', 1, 50000),
(2, 'Bob', 2, 60000),
(3, 'Charlie', 1, 55000),
(4, 'David', 3, 45000),
(5, 'Eva', 2, 70000);
```

#### Departments Table

```sql
CREATE TABLE Departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(100),
    location VARCHAR(100)
);

INSERT INTO Departments (dept_id, dept_name, location) VALUES
(1, 'HR', 'New York'),
(2, 'Finance', 'Los Angeles'),
(3, 'IT', 'Chicago');
```

### Scenario: Update Employee Salaries Based on Department Location

Suppose we want to increase the salary of employees by 10% if they belong to departments located in 'New York'.

### MySQL

In MySQL, you can use a subquery in the `UPDATE` statement to specify the new values based on conditions from another table.

#### Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

### PostgreSQL

In PostgreSQL, you can use a subquery in the `UPDATE` statement to specify the new values based on conditions from another table.

#### Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

### SQLite

In SQLite, you can use a subquery in the `UPDATE` statement to specify the new values based on conditions from another table.

#### Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

### Microsoft SQL Server (MS SQL)

In MS SQL Server, you can use a subquery in the `UPDATE` statement to specify the new values based on conditions from another table.

#### Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

### Oracle

In Oracle, you can use a subquery in the `UPDATE` statement to specify the new values based on conditions from another table.

#### Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

### Practical Examples: Using Subqueries in UPDATE

Here are practical examples of using subqueries in an `UPDATE` statement to update employee salaries based on their department location across various SQL databases.

#### MySQL Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

#### PostgreSQL Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

#### SQLite Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

#### MS SQL Server Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

#### Oracle Example

```sql
-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');
```

### Considerations

1. **Subquery Performance**: Depending on the size of your tables and the complexity of your subqueries, performance may vary. Indexes on the columns involved in the subqueries can help improve performance.
2. **Data Integrity**: Ensure that the subquery correctly identifies the rows that need to be updated to avoid accidental data changes.
3. **Transactions**: For databases that support transactions, consider wrapping the `UPDATE` statement in a transaction to ensure you can roll back the operation if necessary.

#### Example with Transaction (MS SQL Server)

```sql
BEGIN TRANSACTION;

-- Update employee salaries by 10% if their department is located in New York
UPDATE Employees
SET salary = salary * 1.10
WHERE dept_id IN (SELECT dept_id FROM Departments WHERE location = 'New York');

-- Rollback the transaction if needed
-- ROLLBACK TRANSACTION;

-- Commit the transaction
COMMIT TRANSACTION;
```

### Summary

Using subqueries in an `UPDATE` statement allows you to update rows based on conditions specified in another query. This approach is supported across various SQL databases, including MySQL, PostgreSQL, SQLite, MS SQL Server, and Oracle. The provided examples demonstrate how to use subqueries in an `UPDATE` statement effectively.

If you have more specific queries or need further examples, feel free to ask! ✔️
