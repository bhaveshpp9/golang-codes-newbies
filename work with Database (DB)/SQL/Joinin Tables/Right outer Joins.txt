\\ work with database(DB) — SQL — Joining Table — Right outer Joins


A right outer join (or simply right join) in SQL returns all rows from the right table (table2) and the matched rows from the left table (table1). If there is no match, the result is `NULL` on the side of the left table. This is useful when you want to retrieve all records from the right table regardless of whether there is a corresponding match in the left table.

### Basic Syntax

```sql
SELECT column1, column2, ...
FROM table1
RIGHT JOIN table2
ON table1.common_column = table2.common_column;
```

### Example Tables

Assume we have two tables, `Employees` and `Departments`, with the following data:

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT
);

CREATE TABLE Departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(100)
);

INSERT INTO Employees (emp_id, emp_name, dept_id) VALUES
(1, 'Alice', 1),
(2, 'Bob', 2),
(3, 'Charlie', NULL),
(4, 'David', 4);

INSERT INTO Departments (dept_id, dept_name) VALUES
(1, 'HR'),
(2, 'Engineering'),
(3, 'Marketing');
```

### Performing a Right Outer Join

The goal is to retrieve a list of departments along with the names of their employees, including departments that do not have any employees assigned.

#### MySQL

```sql
-- Right outer join in MySQL
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id;
```

#### PostgreSQL

```sql
-- Right outer join in PostgreSQL
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id;
```

#### Oracle

```sql
-- Right outer join in Oracle
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id;
```

#### SQLite

SQLite does not directly support right joins. You can achieve the same result using a left join by swapping the table positions.

```sql
-- Equivalent of right outer join in SQLite using left join
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Departments d
LEFT JOIN Employees e ON e.dept_id = d.dept_id;
```

#### SQL Server

```sql
-- Right outer join in SQL Server
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id;
```

### Practical Examples

#### Handling NULL Values

When performing a right join, it's common to encounter `NULL` values in the result set. You can use SQL functions to handle these `NULL` values.

```sql
-- Replace NULL employee names with 'No Employee'
SELECT e.emp_id, COALESCE(e.emp_name, 'No Employee') AS emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id;
```

#### Filtering Joined Data

You can apply `WHERE` clauses to filter the joined data. However, be careful with filtering on the left table's columns as it can turn the right join into an inner join unintentionally.

```sql
-- Get departments with or without employees, but only include HR and NULL employees
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id
WHERE d.dept_name = 'HR' OR e.emp_name IS NULL;
```

### Practical Scenario: Department and Employee Information

Retrieve a list of all departments along with their employees' names. Include departments that do not have any employees.

#### Data

`Employees`:
| emp_id | emp_name | dept_id |
|--------|----------|---------|
| 1      | Alice    | 1       |
| 2      | Bob      | 2       |
| 3      | Charlie  | NULL    |
| 4      | David    | 4       |

`Departments`:
| dept_id | dept_name  |
|---------|------------|
| 1       | HR         |
| 2       | Engineering|
| 3       | Marketing  |

#### Right Outer Join Result

| emp_id | emp_name | dept_name  |
|--------|----------|------------|
| 1      | Alice    | HR         |
| 2      | Bob      | Engineering|
| NULL   | NULL     | Marketing  |
| 4      | David    | NULL       |

### Performing the Join

```sql
-- Right outer join Employees and Departments
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id;
```

### Summary

A right outer join is used to retrieve all rows from the right table and the matched rows from the left table. It is useful for including all records from the right table, regardless of whether there is a corresponding match in the left table. This guide provides examples of how to perform right outer joins in various SQL databases, including handling `NULL` values and applying filters.

These examples demonstrate how to effectively perform right outer joins across various SQL databases. If you have more specific queries or need further examples, feel free to ask! ✔️
