\\ work with database(DB) — SQL — Joining Table — Multiple Uses of the Same table


Joining a table to itself, known as a self-join, can be useful in scenarios where you need to compare rows within the same table. This is often done using aliases to distinguish between the different instances of the table.

### Example Scenario

Assume we have a table named `Employees` that includes a `manager_id` column which indicates the employee's manager.

### Example Table Structure

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    manager_id INT
);

INSERT INTO Employees (emp_id, emp_name, manager_id) VALUES
(1, 'Alice', NULL),
(2, 'Bob', 1),
(3, 'Charlie', 1),
(4, 'David', 2),
(5, 'Eva', 2);
```

### Goal

Retrieve a list of employees along with their manager's name.

### Self-Join Using the Same Table Multiple Times

#### MySQL

```sql
-- Self-join Employees to list each employee with their manager's name
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id;
```

#### PostgreSQL

```sql
-- Self-join Employees to list each employee with their manager's name
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id;
```

#### Oracle

```sql
-- Self-join Employees to list each employee with their manager's name
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id;
```

#### SQLite

```sql
-- Self-join Employees to list each employee with their manager's name
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id;
```

#### SQL Server

```sql
-- Self-join Employees to list each employee with their manager's name
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id;
```

### Practical Examples

#### Listing Employees and Their Managers

In this example, you want to see each employee along with their manager's name. If an employee doesn't have a manager, the manager's name should be `NULL`.

```sql
-- Self-join Employees to list each employee with their manager's name
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id;
```

#### Finding All Subordinates of a Manager

You can also use a self-join to find all employees who report to a specific manager.

```sql
-- Find all subordinates of the manager with emp_id = 1 (Alice)
SELECT e.emp_id, e.emp_name
FROM Employees e
INNER JOIN Employees m ON e.manager_id = m.emp_id
WHERE m.emp_id = 1;
```

#### Finding Hierarchical Relationships

You can extend the self-join concept to find hierarchical relationships within the same table.

```sql
-- List employees along with their manager's name and their grand-manager's name (if available)
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name, gm.emp_name AS grand_manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id
LEFT JOIN Employees gm ON m.manager_id = gm.emp_id;
```

### Practical Scenario: Employee-Manager Relationships

Retrieve a list of all employees along with their manager's name.

#### Data

`Employees`:
| emp_id | emp_name | manager_id |
|--------|----------|------------|
| 1      | Alice    | NULL       |
| 2      | Bob      | 1          |
| 3      | Charlie  | 1          |
| 4      | David    | 2          |
| 5      | Eva      | 2          |

#### Self-Join Result

| emp_id | emp_name | manager_name |
|--------|----------|--------------|
| 1      | Alice    | NULL         |
| 2      | Bob      | Alice        |
| 3      | Charlie  | Alice        |
| 4      | David    | Bob          |
| 5      | Eva      | Bob          |

### Performing the Self-Join

```sql
-- Self-join Employees to list each employee with their manager's name
SELECT e.emp_id, e.emp_name, m.emp_name AS manager_name
FROM Employees e
LEFT JOIN Employees m ON e.manager_id = m.emp_id;
```

### Summary

Self-joins are useful for comparing rows within the same table or retrieving hierarchical data. By using table aliases, you can distinguish between different instances of the same table and perform complex queries. This guide provides examples of how to use self-joins to retrieve employee-manager relationships and other hierarchical data across various SQL databases.

These examples demonstrate how to effectively perform self-joins across various SQL databases. If you have more specific queries or need further examples, feel free to ask! ✔️
