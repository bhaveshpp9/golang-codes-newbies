\\ work with database(DB) — SQL — Joining Table — Using Table Aliases


Using table aliases in SQL is a common practice to make queries more readable and to simplify referencing table names, especially when joining tables. Aliases provide a shorthand for table names, which can be particularly helpful in complex queries with multiple joins or when tables have long names. Here’s a detailed guide on how to use table aliases while joining tables across different SQL databases with practical examples.

### Example Tables

Assume we have two tables, `Employees` and `Departments`, with the following data:

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT
);

CREATE TABLE Departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(100)
);

INSERT INTO Employees (emp_id, emp_name, dept_id) VALUES
(1, 'Alice', 1),
(2, 'Bob', 2),
(3, 'Charlie', 1),
(4, 'David', 3);

INSERT INTO Departments (dept_id, dept_name) VALUES
(1, 'HR'),
(2, 'Engineering'),
(3, 'Marketing');
```

### Using Table Aliases

Table aliases are assigned using the `AS` keyword, though `AS` is optional and often omitted. Here’s how to perform joins using table aliases.

#### Basic Syntax with Aliases

```sql
SELECT a.column1, b.column2, ...
FROM table1 AS a
JOIN table2 AS b
ON a.common_column = b.common_column;
```

### Practical Examples

#### Inner Join with Table Aliases

Retrieve a list of employees along with their department names using table aliases.

#### MySQL

```sql
-- Inner join Employees and Departments using table aliases in MySQL
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees AS e
INNER JOIN Departments AS d ON e.dept_id = d.dept_id;
```

#### PostgreSQL

```sql
-- Inner join Employees and Departments using table aliases in PostgreSQL
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees AS e
INNER JOIN Departments AS d ON e.dept_id = d.dept_id;
```

#### Oracle

```sql
-- Inner join Employees and Departments using table aliases in Oracle
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e  -- AS is optional
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

#### SQLite

```sql
-- Inner join Employees and Departments using table aliases in SQLite
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

#### SQL Server

```sql
-- Inner join Employees and Departments using table aliases in SQL Server
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

### Additional Examples

#### Left Outer Join with Table Aliases

Retrieve a list of all employees along with their department names, including those who are not assigned to any department.

```sql
-- Left outer join Employees and Departments using table aliases
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
LEFT JOIN Departments d ON e.dept_id = d.dept_id;
```

#### Right Outer Join with Table Aliases

Retrieve a list of all departments along with their employees' names, including departments that do not have any employees.

```sql
-- Right outer join Employees and Departments using table aliases
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d ON e.dept_id = d.dept_id;
```

### Practical Scenario: Employee and Department Information

Retrieve a list of all employees along with their department names using table aliases for better readability.

#### Data

`Employees`:
| emp_id | emp_name | dept_id |
|--------|----------|---------|
| 1      | Alice    | 1       |
| 2      | Bob      | 2       |
| 3      | Charlie  | 1       |
| 4      | David    | 3       |

`Departments`:
| dept_id | dept_name  |
|---------|------------|
| 1       | HR         |
| 2       | Engineering|
| 3       | Marketing  |

#### Inner Join Result

| emp_id | emp_name | dept_name  |
|--------|----------|------------|
| 1      | Alice    | HR         |
| 2      | Bob      | Engineering|
| 3      | Charlie  | HR         |
| 4      | David    | Marketing  |

### Performing the Join with Table Aliases

```sql
-- Inner join Employees and Departments using table aliases
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

### Summary

Using table aliases in SQL joins makes queries more readable and manageable, especially when dealing with complex joins or tables with long names. This guide provides examples of how to use table aliases while performing different types of joins across various SQL databases.

These examples demonstrate how to effectively use table aliases in joins across various SQL databases. If you have more specific queries or need further examples, feel free to ask! ✔️
