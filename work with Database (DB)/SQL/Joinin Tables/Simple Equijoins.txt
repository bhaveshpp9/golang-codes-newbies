\\ work with database(DB) — SQL — Joining Table — Simple Equijoins


Equijoins in SQL are joins where the join condition is based on equality between columns from the joined tables. The most common type of equijoin is the inner join, but equijoins can also be used with outer joins. Here’s a detailed guide on how to perform simple equijoins across different SQL databases with practical examples.

### Example Tables

Assume we have two tables, `Employees` and `Departments`, with the following data:

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT
);

CREATE TABLE Departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(100)
);

INSERT INTO Employees (emp_id, emp_name, dept_id) VALUES
(1, 'Alice', 1),
(2, 'Bob', 2),
(3, 'Charlie', 1),
(4, 'David', 3);

INSERT INTO Departments (dept_id, dept_name) VALUES
(1, 'HR'),
(2, 'Engineering'),
(3, 'Marketing');
```

### Performing a Simple Equijoin

The goal is to retrieve a list of employees along with their department names using an equijoin.

#### MySQL

```sql
-- Simple equijoin in MySQL
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

#### PostgreSQL

```sql
-- Simple equijoin in PostgreSQL
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

#### Oracle

```sql
-- Simple equijoin in Oracle
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

#### SQLite

```sql
-- Simple equijoin in SQLite
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

#### SQL Server

```sql
-- Simple equijoin in SQL Server
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

### Practical Examples

#### Inner Join with Explicit Columns

Retrieve a list of employees along with their department names, specifying the columns explicitly.

```sql
-- Inner join Employees and Departments, selecting specific columns
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

#### Handling NULL Values

If you want to handle cases where employees might not be assigned to a department, you can use a left join.

```sql
-- Left join Employees and Departments, handling NULL values
SELECT e.emp_id, e.emp_name, COALESCE(d.dept_name, 'No Department') AS dept_name
FROM Employees e
LEFT JOIN Departments d ON e.dept_id = d.dept_id;
```

### Practical Scenario: Employee and Department Information

Retrieve a list of all employees along with their department names using a simple equijoin.

#### Data

`Employees`:
| emp_id | emp_name | dept_id |
|--------|----------|---------|
| 1      | Alice    | 1       |
| 2      | Bob      | 2       |
| 3      | Charlie  | 1       |
| 4      | David    | 3       |

`Departments`:
| dept_id | dept_name  |
|---------|------------|
| 1       | HR         |
| 2       | Engineering|
| 3       | Marketing  |

#### Inner Join Result

| emp_id | emp_name | dept_name  |
|--------|----------|------------|
| 1      | Alice    | HR         |
| 2      | Bob      | Engineering|
| 3      | Charlie  | HR         |
| 4      | David    | Marketing  |

### Performing the Equijoin

```sql
-- Simple equijoin Employees and Departments
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d ON e.dept_id = d.dept_id;
```

### Summary

Simple equijoins are used to retrieve rows where there is a matching value in both tables based on the equality condition. This guide provides examples of how to perform simple equijoins across various SQL databases, including handling NULL values and specifying columns explicitly.

These examples demonstrate how to effectively perform simple equijoins across various SQL databases. If you have more specific queries or need further examples, feel free to ask! ✔️
