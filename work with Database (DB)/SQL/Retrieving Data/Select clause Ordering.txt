\\ work with database(DB) — SQL — Retrieving Data — Select clause Ordering


Ordering the result set of a query in SQL is done using the `ORDER BY` clause. The `ORDER BY` clause allows you to sort the result set based on one or more columns, either in ascending (`ASC`) or descending (`DESC`) order. Below are examples of how to use the `ORDER BY` clause to order data retrieved from a table across various SQL databases, including MySQL, PostgreSQL, SQLite, Microsoft SQL Server, Microsoft Access, Interbase, Firebird, and Oracle.

### Example Table

Assume we have a table named `Employees` with the following structure and data:

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT,
    salary INT
);

INSERT INTO Employees (emp_id, emp_name, dept_id, salary) VALUES
(1, 'Alice', 1, 50000),
(2, 'Bob', 2, 60000),
(3, 'Charlie', 1, 55000),
(4, 'David', 3, 45000),
(5, 'Eva', 2, 70000);
```

### Using the `ORDER BY` Clause

#### Basic Syntax

```sql
SELECT column1, column2, ...
FROM table_name
ORDER BY column1 [ASC|DESC], column2 [ASC|DESC], ...;
```

### Practical Examples

#### MySQL

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### PostgreSQL

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### SQLite

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Microsoft SQL Server (MS SQL)

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Microsoft Access

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Interbase

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Firebird

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Oracle

```sql
-- Order by emp_name in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Order by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

### Ordering by Multiple Columns

You can also order the result set by multiple columns. For example, you can order by department ID first and then by salary within each department.

```sql
-- Order by dept_id in ascending order, and then by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;
```

### Practical Scenario: Ordering Data for Analysis

#### Retrieve Employees Ordered by Department and Salary

```sql
-- MySQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- PostgreSQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- SQLite
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- MS SQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Access
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Interbase
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Firebird
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Oracle
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;
```

### Summary

Using the `ORDER BY` clause in SQL allows you to sort the result set based on one or more columns in ascending or descending order. This guide provides examples of how to use the `ORDER BY` clause across various SQL databases to retrieve ordered data.

If you have more specific queries or need further examples, feel free to ask! ✔️
