\\ work with database(DB) — SQL — Sorting data — Sorting by Column Position


In SQL, you can sort the result set by the position of the columns in the `SELECT` clause using the `ORDER BY` clause. This is particularly useful when you want to sort by columns without explicitly specifying their names, especially when dealing with complex queries or subqueries. Below are examples of how to sort data by column position across various SQL databases, including MySQL, PostgreSQL, SQLite, Microsoft SQL Server, Microsoft Access, Interbase, Firebird, and Oracle.

### Example Table

Assume we have a table named `Employees` with the following structure and data:

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT,
    salary INT
);

INSERT INTO Employees (emp_id, emp_name, dept_id, salary) VALUES
(1, 'Alice', 1, 50000),
(2, 'Bob', 2, 60000),
(3, 'Charlie', 1, 55000),
(4, 'David', 3, 45000),
(5, 'Eva', 2, 70000);
```

### Sorting by Column Position

#### MySQL

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

#### PostgreSQL

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

#### SQLite

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

#### Microsoft SQL Server (MS SQL)

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

#### Microsoft Access

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

#### Interbase

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

#### Firebird

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

#### Oracle

```sql
-- Sort by the second column (emp_name) in ascending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Sort by the fourth column (salary) in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

### Practical Scenario: Sorting Data for Analysis

#### Example: Retrieve Employees Ordered by Name (Second Column)

```sql
-- MySQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- PostgreSQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- SQLite
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- MS SQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Access
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Interbase
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Firebird
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;

-- Oracle
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 2 ASC;
```

#### Example: Retrieve Employees Ordered by Salary (Fourth Column)

```sql
-- MySQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;

-- PostgreSQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;

-- SQLite
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;

-- MS SQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;

-- Access
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;

-- Interbase
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;

-- Firebird
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;

-- Oracle
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY 4 DESC;
```

### Summary

Using the `ORDER BY` clause to sort data by column position allows you to sort the result set based on the position of columns in the `SELECT` statement. This approach is useful when dealing with complex queries or when you want to avoid specifying column names explicitly. The provided examples demonstrate how to sort data by column position across various SQL databases.

If you have more specific queries or need further examples, feel free to ask! ✔️
