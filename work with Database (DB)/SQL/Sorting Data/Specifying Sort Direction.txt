\\ work with database(DB) — SQL — Sorting data — Specifying Sort Direction


Specifying the sort direction in SQL allows you to order the result set in either ascending (`ASC`) or descending (`DESC`) order. By default, the `ORDER BY` clause sorts the data in ascending order if no direction is specified. Here are examples of how to specify sort direction in SQL across various databases including MySQL, PostgreSQL, SQLite, Microsoft SQL Server, Microsoft Access, Interbase, Firebird, and Oracle.

### Example Table

Assume we have a table named `Employees` with the following structure and data:

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT,
    salary INT
);

INSERT INTO Employees (emp_id, emp_name, dept_id, salary) VALUES
(1, 'Alice', 1, 50000),
(2, 'Bob', 2, 60000),
(3, 'Charlie', 1, 55000),
(4, 'David', 3, 45000),
(5, 'Eva', 2, 70000);
```

### Specifying Sort Direction

#### MySQL

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### PostgreSQL

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### SQLite

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Microsoft SQL Server (MS SQL)

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Microsoft Access

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Interbase

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Firebird

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

#### Oracle

```sql
-- Sort by emp_name in ascending order (default)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY emp_name ASC;

-- Sort by salary in descending order
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY salary DESC;
```

### Sorting by Multiple Columns with Specified Directions

You can sort by multiple columns and specify the sort direction for each column. This is useful when you want to sort the result set based on primary and secondary criteria.

```sql
-- MySQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- PostgreSQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- SQLite
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- MS SQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Access
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Interbase
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Firebird
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Oracle
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;
```

### Practical Scenario: Retrieve Employees Ordered by Department and Salary

#### Example

```sql
-- MySQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- PostgreSQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- SQLite
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- MS SQL
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Access
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Interbase
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Firebird
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;

-- Oracle
SELECT emp_id, emp_name, dept_id, salary
FROM Employees
ORDER BY dept_id ASC, salary DESC;
```

### Summary

Specifying the sort direction in SQL allows you to control the order of your result set by using the `ORDER BY` clause with `ASC` for ascending order and `DESC` for descending order. This guide provides examples of how to use the `ORDER BY` clause to sort data by one or multiple columns with specified directions across various SQL databases.

These examples demonstrate how to effectively sort data with specified directions in various SQL databases. If you have more specific queries or need further examples, feel free to ask! ✔️
