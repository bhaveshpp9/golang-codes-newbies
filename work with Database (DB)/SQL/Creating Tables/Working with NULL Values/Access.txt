\\ work with database(DB) — SQL — Creating table — Working with NULL Values — Access

Working with SQL databases often involves creating tables and managing NULL values appropriately. Here is a detailed guide on how to create tables and handle NULL values in SQL, particularly using Microsoft Access SQL syntax.

### Creating a Table in SQL

To create a table, you use the `CREATE TABLE` statement. In this example, let's create a table called `Employees` with various columns that can hold NULL values:

```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) NULL,
    PhoneNumber VARCHAR(15) NULL,
    HireDate DATE NOT NULL,
    Salary DECIMAL(10, 2) NULL
);
```

In this table:
- `EmployeeID`, `FirstName`, `LastName`, and `HireDate` are required fields (`NOT NULL`).
- `Email`, `PhoneNumber`, and `Salary` can accept NULL values (`NULL`).

### Inserting Data with NULL Values

When inserting data into the `Employees` table, you can omit columns that allow NULL values:

```sql
INSERT INTO Employees (EmployeeID, FirstName, LastName, HireDate)
VALUES (1, 'John', 'Doe', '2022-01-01');

INSERT INTO Employees (EmployeeID, FirstName, LastName, Email, PhoneNumber, HireDate, Salary)
VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', '555-1234', '2022-02-15', 60000.00);
```

In the first insert statement, `Email`, `PhoneNumber`, and `Salary` are omitted and will default to NULL.

### Selecting Data and Handling NULL Values

To select data from the table and handle NULL values, you can use functions like `IS NULL` and `IS NOT NULL`. For example, to find all employees without an email address:

```sql
SELECT * FROM Employees
WHERE Email IS NULL;
```

To find all employees who have a salary specified:

```sql
SELECT * FROM Employees
WHERE Salary IS NOT NULL;
```

### Using `COALESCE` to Handle NULL Values

The `COALESCE` function can be used to provide a default value for NULL columns:

```sql
SELECT EmployeeID, FirstName, LastName, COALESCE(Email, 'No Email') AS Email, COALESCE(PhoneNumber, 'No Phone') AS PhoneNumber, HireDate, COALESCE(Salary, 0.00) AS Salary
FROM Employees;
```

This query will replace NULL `Email` values with 'No Email', NULL `PhoneNumber` values with 'No Phone', and NULL `Salary` values with 0.00.

### Updating NULL Values

To update NULL values in existing records, use the `UPDATE` statement:

```sql
UPDATE Employees
SET Email = 'unknown@example.com'
WHERE Email IS NULL;
```

This updates all records with a NULL `Email` to 'unknown@example.com'.

### Deleting Rows with NULL Values

To delete rows where certain columns are NULL, use the `DELETE` statement:

```sql
DELETE FROM Employees
WHERE Email IS NULL;
```

This deletes all rows where the `Email` is NULL.

### Summary

Handling NULL values in SQL requires understanding how to define columns that allow NULLs, inserting NULL values, and managing those values with appropriate SQL functions and statements. The examples provided are specifically tailored for Microsoft Access SQL, but the concepts are applicable to other SQL databases with slight syntax variations.

Feel free to ask if you have more specific questions or need further examples! ✔️
