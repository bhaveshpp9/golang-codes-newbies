\\ work with database(DB) — SQL  — Creating table — Creating with Primary Key


Creating tables with primary keys in SQL ensures that each row in the table can be uniquely identified. Below are examples of how to create tables with primary keys in various SQL database systems: SQL Server, Access, MySQL, PostgreSQL, SQLite, and Firebird. I'll also demonstrate how to integrate this functionality into a Go application.

### Example: Creating Tables with Primary Keys in SQL

#### SQL Server (MS SQL)

In SQL Server, you can create tables with primary keys using the `PRIMARY KEY` constraint.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name NVARCHAR(100),
    last_name NVARCHAR(100),
    department_id INT
);
```

#### Microsoft Access

In Microsoft Access, the syntax for creating tables with primary keys is similar.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name TEXT(100),
    last_name TEXT(100),
    department_id INT
);
```

#### MySQL

In MySQL, you can create tables with primary keys as follows.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    department_id INT
);
```

#### PostgreSQL

In PostgreSQL, the syntax is the same as in MySQL.

```sql
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    department_id INT
);
```

#### SQLite

In SQLite, you can create tables with primary keys using the following syntax.

```sql
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    first_name TEXT,
    last_name TEXT,
    department_id INTEGER
);
```

#### Firebird

In Firebird, the syntax for creating tables with primary keys is as follows.

```sql
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    department_id INTEGER
);
```

### Integrating with Go

Let's create a Go application that connects to an SQLite database and creates tables with primary keys.

#### Step 1: Install the SQLite Driver

Install the SQLite driver package using `go get`.

```sh
go get github.com/mattn/go-sqlite3
```

#### Step 2: Write the Go Code

Write the Go code to connect to the SQLite database and create tables with primary keys.

```go
package main

import (
    "database/sql"
    "fmt"
    _ "github.com/mattn/go-sqlite3" // Import the SQLite driver
)

// Function to connect to the SQLite database and create tables with primary keys
func connectAndCreateTable(dsn string) error {
    // Open a connection to the database
    db, err := sql.Open("sqlite3", dsn)
    if err != nil {
        return fmt.Errorf("failed to connect to database: %w", err)
    }
    defer db.Close()

    // Create the employees table with a primary key
    createEmployeesTable := `
    CREATE TABLE IF NOT EXISTS employees (
        employee_id INTEGER PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        department_id INTEGER
    );`
    _, err = db.Exec(createEmployeesTable)
    if err != nil {
        return fmt.Errorf("failed to create employees table: %w", err)
    }

    fmt.Println("Table created successfully.")
    return nil
}

func main() {
    // Data Source Name (DSN) for the SQLite database
    dsn := "example.db"

    // Connect to the database and create the table
    err := connectAndCreateTable(dsn)
    if err != nil {
        fmt.Printf("Error: %v\n", err)
    }
}
```

### Explanation

1. **Install the SQLite Driver**:
   - Use `go get` to install the `github.com/mattn/go-sqlite3` package.

2. **Write the Go Code**:
   - The `connectAndCreateTable` function connects to the SQLite database and creates an `employees` table with a primary key (`employee_id`).
   - The `main` function defines the DSN for the SQLite database and calls the `connectAndCreateTable` function.

### Detailed Output

The program will connect to the SQLite database and create the `employees` table with the appropriate primary key constraint. The output will be:

```
Table created successfully.
```

### Summary

In Go, you can connect to a SQLite database and create tables with primary keys using the `github.com/mattn/go-sqlite3` package with the `database/sql` package. By defining functions to handle database connections and table creation, you can efficiently manage database schema setup in your applications. This approach is applicable to other databases like SQL Server, MySQL, PostgreSQL, Access, and Firebird by adjusting the connection string and SQL syntax accordingly.