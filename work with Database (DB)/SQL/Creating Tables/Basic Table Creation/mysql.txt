\\ work with database(DB) — SQL — Creating table — Basic Table Creation — Mysql


To create a basic table in a MySQL database using Go, you will need to use the `database/sql` package along with a MySQL driver such as `github.com/go-sql-driver/mysql`.

### Step-by-Step Guide

1. **Install the MySQL driver for Go**:
   ```bash
   go get -u github.com/go-sql-driver/mysql
   ```

2. **Write the Go code to create a table in MySQL**:

Here's a complete example that demonstrates how to create a table in a MySQL database using Go:

```go
package main

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/go-sql-driver/mysql"
)

func main() {
    // Define the MySQL data source name (DSN)
    dsn := "username:password@tcp(127.0.0.1:3306)/dbname"
    
    // Open a connection to the database
    db, err := sql.Open("mysql", dsn)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // Ensure the connection is available
    err = db.Ping()
    if err != nil {
        log.Fatal(err)
    }

    // SQL statement to create a table
    createTableSQL := `CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT,
        username VARCHAR(50) NOT NULL,
        email VARCHAR(50) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (id)
    );`

    // Execute the SQL statement
    _, err = db.Exec(createTableSQL)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println("Table created successfully")
}
```

### Explanation:

1. **Import Packages**: Import the necessary packages. The `database/sql` package provides a generic interface around SQL databases, and `github.com/go-sql-driver/mysql` is the MySQL driver.
2. **Define DSN**: The Data Source Name (DSN) includes the username, password, address, and database name in the format `username:password@tcp(host:port)/dbname`.
3. **Open Database Connection**: Use `sql.Open` to establish a connection to the MySQL database.
4. **Ping Database**: Use `db.Ping()` to verify the connection to the database. This helps catch any configuration issues early.
5. **Create Table SQL Statement**: Define a SQL statement to create a table named `users` if it does not already exist. The table has the following columns:
   - `id`: An auto-incrementing integer that serves as the primary key.
   - `username`: A VARCHAR(50) field for storing the username.
   - `email`: A VARCHAR(50) field for storing the email.
   - `created_at`: A TIMESTAMP field that defaults to the current timestamp.
6. **Execute Statement**: Use `db.Exec` to execute the SQL statement. This creates the table in the database.
7. **Close Resources**: Ensure the database connection is closed using `defer` to avoid resource leaks.
8. **Output Success Message**: Print a message indicating that the table was created successfully.

### Running the Code

Save the code to a file, for example, `main.go`, and then run it using the Go command:

```bash
go run main.go
```

Ensure that the MySQL server is running and accessible with the provided credentials. Adjust the `dsn` variable to match your MySQL server configuration. This example assumes the MySQL server is running locally on the default port 3306 and you have a database named `dbname`.