\\ work with database(DB) — SQL — Creating table — Basic Table Creation — FireBird, Interbase


Creating tables in Firebird and Interbase databases is quite similar to other SQL databases, but there are some syntax differences to be aware of. Below, I'll walk you through the steps to create a basic table in both Firebird and Interbase.

### Scenario
We will create a table called `employees` with the following columns:
- `id`: A unique identifier for each employee (integer, primary key, auto-increment).
- `first_name`: The first name of the employee (variable character string).
- `last_name`: The last name of the employee (variable character string).
- `email`: The email address of the employee (variable character string, unique).
- `hire_date`: The date the employee was hired (date).

### SQL Commands to Create the Table
Here's how you can create this table in Firebird and Interbase:

```sql
CREATE TABLE employees (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    hire_date DATE NOT NULL
);
```

### Explanation
1. **Table Name**: `employees` is the name of the table.
2. **Columns and Data Types**:
    - `id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY`: This creates an `id` column that auto-increments with each new record and uniquely identifies each row. `GENERATED BY DEFAULT AS IDENTITY` is used in Firebird 3.0+ for auto-incrementing columns.
    - `first_name VARCHAR(50) NOT NULL`: This creates a `first_name` column that can store up to 50 characters and cannot be `NULL` (it must have a value).
    - `last_name VARCHAR(50) NOT NULL`: Similar to `first_name`, this creates a `last_name` column with up to 50 characters and disallows `NULL` values.
    - `email VARCHAR(100) UNIQUE NOT NULL`: This creates an `email` column that can store up to 100 characters, must be unique across all rows, and cannot be `NULL`.
    - `hire_date DATE NOT NULL`: This creates a `hire_date` column that stores date values and cannot be `NULL`.

### Connecting to a Database and Executing the Command
To execute the SQL command, you need to be connected to your Firebird or Interbase database. Here are the steps to do this using the `isql` command-line tool:

1. **Open Terminal**: Open your terminal or command prompt.
2. **Connect to Firebird/Interbase**: Connect to your Firebird or Interbase server and database using the `isql` command.
   ```sh
   isql -user username -password password database.fdb
   ```
   Replace `username` with your database username, `password` with your password, and `database.fdb` with the path to your Firebird database file.
3. **Execute SQL Command**: Once connected, you can execute the SQL command to create the table by typing it directly into the `isql` interface.

```sql
CREATE TABLE employees (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    hire_date DATE NOT NULL
);
```

4. **Commit the Transaction**: Firebird and Interbase require transactions to be committed manually. After creating the table, type `COMMIT;` to save the changes.

5. **Verify Creation**: To verify that the table has been created successfully, you can use the following command to list the tables in your database:
   ```sh
   SHOW TABLES;
   ```

### Using an SQL GUI Tool
Alternatively, you can use a graphical interface tool like FlameRobin for Firebird or IBConsole for Interbase to connect to your database and execute the SQL commands.

### Accessing the Table in Firebird and Interbase
Once the table is created, you can insert data into it and perform queries as needed. Here’s an example of how to insert a record into the `employees` table:

```sql
INSERT INTO employees (first_name, last_name, email, hire_date)
VALUES ('John', 'Doe', 'john.doe@example.com', '2023-01-01');
```

### Explanation of Insert Command
- `INSERT INTO employees (first_name, last_name, email, hire_date)`: Specifies the table and the columns to insert data into.
- `VALUES ('John', 'Doe', 'john.doe@example.com', '2023-01-01')`: Provides the values for each column in the specified order.

By following these steps and using the appropriate SQL syntax for Firebird and Interbase, you can create basic tables and manage your data effectively. If you have more specific questions or need further assistance with advanced SQL features, feel free to ask!