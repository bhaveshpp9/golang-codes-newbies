\\ work with database(DB) — SQL — Creating table — Specific default  Values — SQLite


Creating a table with specific default values in an SQLite database using Go involves using the `database/sql` package along with the SQLite driver `github.com/mattn/go-sqlite3`.

### Step-by-Step Guide

1. **Install the SQLite driver for Go**:
   ```bash
   go get github.com/mattn/go-sqlite3
   ```

2. **Write the Go code to create a table with specific default values in SQLite**:

Here's a complete example demonstrating how to create a table with specific default values using Go:

```go
package main

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/mattn/go-sqlite3"
)

func main() {
    // Open a connection to the SQLite database (creates the file if it doesn't exist)
    db, err := sql.Open("sqlite3", "./example.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // Ensure the connection is available
    err = db.Ping()
    if err != nil {
        log.Fatal(err)
    }

    // SQL statement to create a table with specific default values
    createTableSQL := `
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL DEFAULT 'guest',
        email TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`

    // Execute the SQL statement
    _, err = db.Exec(createTableSQL)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println("Table created successfully")
}
```

### Explanation:

1. **Import Packages**: Import the necessary packages. The `database/sql` package provides a generic interface around SQL databases, and `github.com/mattn/go-sqlite3` is the SQLite driver.
2. **Open Database Connection**: Use `sql.Open` to connect to the SQLite database. If the specified database file (`example.db`) does not exist, it will be created.
3. **Ping Database**: Use `db.Ping()` to verify the connection to the database. This ensures that the database is accessible and catches any configuration issues early.
4. **Create Table SQL Statement**: Define a SQL statement to create a table named `users` with specific default values:
   - `id`: An auto-incrementing integer that serves as the primary key.
   - `username`: A `TEXT` field with a default value of 'guest' and a `NOT NULL` constraint.
   - `email`: A `TEXT` field with no default value.
   - `created_at`: A `TIMESTAMP` field that defaults to the current timestamp using `DEFAULT CURRENT_TIMESTAMP`.
5. **Execute Statement**: Use `db.Exec` to execute the SQL statement. This creates the table in the database.
6. **Close Resources**: Ensure that the database connection is closed using `defer` to avoid resource leaks.
7. **Output Success Message**: Print a message indicating that the table was created successfully.

### Running the Code

Save the code to a file, for example, `main.go`, and then run it using the Go command:

```bash
go run main.go
```

This will create a SQLite database file named `example.db` with a `users` table if it does not already exist. The SQLite driver will handle the creation of the database file and the table within it, making it easy to get started with SQLite in Go.