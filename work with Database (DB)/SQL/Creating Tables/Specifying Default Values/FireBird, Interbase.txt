\\ work with database(DB) — SQL — Creating table — Specific default  Values — FireBird, Interbase


Creating tables in Firebird or Interbase databases with specific default values can be done using SQL. In Go, you can accomplish this using the `database/sql` package along with an appropriate Firebird/Interbase driver.

### Step-by-Step Guide

1. **Install the Firebird driver for Go**:
   ```bash
   go get github.com/nakagami/firebirdsql
   ```

2. **Write the Go code to create a table with specific default values in Firebird/Interbase**:

Here's a complete example demonstrating how to create a table with specific default values using Go:

```go
package main

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/nakagami/firebirdsql"
)

func main() {
    // Define the Firebird data source name (DSN)
    dsn := "sysdba:masterkey@localhost:3050/your_database.fdb"

    // Open a connection to the database
    db, err := sql.Open("firebirdsql", dsn)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // Ensure the connection is available
    err = db.Ping()
    if err != nil {
        log.Fatal(err)
    }

    // SQL statement to create a table with specific default values
    createTableSQL := `
    CREATE TABLE users (
        id INTEGER NOT NULL PRIMARY KEY,
        username VARCHAR(50) DEFAULT 'guest' NOT NULL,
        email VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`

    // Execute the SQL statement
    _, err = db.Exec(createTableSQL)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println("Table created successfully")
}
```

### Explanation:

1. **Import Packages**: Import the necessary packages. The `database/sql` package provides a generic interface for SQL databases, and `github.com/nakagami/firebirdsql` is the Firebird driver.
2. **Define DSN**: The Data Source Name (DSN) includes the username, password, host, port, and database file. Adjust `dsn` with your Firebird/Interbase credentials and database details.
3. **Open Database Connection**: Use `sql.Open` to establish a connection to the Firebird/Interbase database.
4. **Ping Database**: Use `db.Ping()` to verify the connection to the database. This helps catch any configuration issues early.
5. **Create Table SQL Statement**: Define a SQL statement to create a table named `users` with specific default values:
   - `id`: An integer that serves as the primary key.
   - `username`: A `VARCHAR(50)` field with a default value of 'guest'.
   - `email`: A `VARCHAR(100)` field with no default value.
   - `created_at`: A `TIMESTAMP` field that defaults to the current timestamp.
6. **Execute Statement**: Use `db.Exec` to execute the SQL statement. This creates the table in the database.
7. **Close Resources**: Ensure the database connection is closed using `defer` to avoid resource leaks.
8. **Output Success Message**: Print a message indicating that the table was created successfully.

### Running the Code

Save the code to a file, for example, `main.go`, and then run it using the Go command:

```bash
go run main.go
```

Ensure that the Firebird/Interbase server is running and accessible with the provided credentials. Adjust the `dsn` variable to match your Firebird/Interbase server configuration. This example assumes the server is running locally on the default port 3050 and you have a database file named `your_database.fdb`. Adjust accordingly if your setup is different.