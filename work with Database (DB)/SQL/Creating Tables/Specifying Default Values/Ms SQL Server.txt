\\ work with database(DB) — SQL — Creating table — Specific default  Values — Ms SQL Server


Creating tables with specific default values in a Microsoft SQL Server database using Go can be achieved by using the `database/sql` package along with an appropriate SQL Server driver like `github.com/denisenkom/go-mssqldb`.

### Step-by-Step Guide

1. **Install the SQL Server driver for Go**:
   ```bash
   go get -u github.com/denisenkom/go-mssqldb
   ```

2. **Write the Go code to create a table with specific default values in SQL Server**:

Here's a complete example demonstrating how to create a table with specific default values using Go:

```go
package main

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/denisenkom/go-mssqldb"
)

func main() {
    // Define the SQL Server data source name (DSN)
    // Format: sqlserver://username:password@host:port?database=dbname
    dsn := "sqlserver://username:password@localhost:1433?database=yourdbname"

    // Open a connection to the database
    db, err := sql.Open("sqlserver", dsn)
    if err != nil {
        log.Fatal("Error creating connection pool: ", err)
    }
    defer db.Close()

    // Ensure the connection is available
    err = db.Ping()
    if err != nil {
        log.Fatal("Error pinging database: ", err)
    }

    // SQL statement to create a table with specific default values
    createTableSQL := `
    CREATE TABLE users (
        id INT IDENTITY(1,1) PRIMARY KEY,
        username NVARCHAR(50) NOT NULL DEFAULT 'guest',
        email NVARCHAR(100),
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`

    // Execute the SQL statement
    _, err = db.Exec(createTableSQL)
    if err != nil {
        log.Fatal("Error creating table: ", err)
    }

    fmt.Println("Table created successfully")
}
```

### Explanation:

1. **Import Packages**: Import the necessary packages. The `database/sql` package provides a generic interface for SQL databases, and `github.com/denisenkom/go-mssqldb` is the SQL Server driver.
2. **Define DSN**: The Data Source Name (DSN) includes the username, password, host, port, and database name. Adjust `dsn` with your SQL Server credentials and database details.
3. **Open Database Connection**: Use `sql.Open` to establish a connection to the SQL Server database.
4. **Ping Database**: Use `db.Ping()` to verify the connection to the database. This ensures the database is accessible and catches any configuration issues early.
5. **Create Table SQL Statement**: Define a SQL statement to create a table named `users` with specific default values:
   - `id`: An integer that serves as the primary key, defined with the `IDENTITY(1,1)` clause to auto-increment starting at 1.
   - `username`: A `NVARCHAR(50)` field with a default value of 'guest'.
   - `email`: A `NVARCHAR(100)` field with no default value.
   - `created_at`: A `DATETIME` field that defaults to the current timestamp using `DEFAULT CURRENT_TIMESTAMP`.
6. **Execute Statement**: Use `db.Exec` to execute the SQL statement. This creates the table in the database.
7. **Close Resources**: Ensure the database connection is closed using `defer` to avoid resource leaks.
8. **Output Success Message**: Print a message indicating that the table was created successfully.

### Running the Code

Save the code to a file, for example, `main.go`, and then run it using the Go command:

```bash
go run main.go
```

Ensure that the SQL Server is running and accessible with the provided credentials. Adjust the `dsn` variable to match your SQL Server configuration. This example assumes the SQL Server is running locally on the default port 1433 and you have a database named `yourdbname`. Adjust accordingly if your setup is different.