\\ work with database(DB) — SQL — Updating Tables — Adding Foreign Key


Adding a foreign key to an existing table in SQL involves altering the table to include the foreign key constraint. Below are examples of how to add a foreign key constraint in various SQL databases, including MySQL, PostgreSQL, SQLite, Microsoft SQL Server, and Oracle.

### Example Tables

Assume we have the following tables:

```sql
CREATE TABLE Departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(100)
);

CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT,
    salary INT
);
```

We want to add a foreign key to the `Employees` table that references the `Departments` table.

### MySQL

In MySQL, you use the `ALTER TABLE` statement with the `ADD CONSTRAINT` clause to add a foreign key.

#### Syntax

```sql
ALTER TABLE table_name
ADD CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES parent_table (parent_column);
```

#### Example

```sql
-- Add a foreign key to the Employees table
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

### PostgreSQL

In PostgreSQL, you use the `ALTER TABLE` statement with the `ADD CONSTRAINT` clause to add a foreign key.

#### Syntax

```sql
ALTER TABLE table_name
ADD CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES parent_table (parent_column);
```

#### Example

```sql
-- Add a foreign key to the Employees table
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

### SQLite

SQLite only supports adding foreign key constraints at the time of table creation. If you need to add a foreign key constraint to an existing table, you must recreate the table with the foreign key constraint. This process involves:

1. Creating a new table with the desired structure and foreign key constraint.
2. Copying data from the old table to the new table.
3. Dropping the old table.
4. Renaming the new table to the old table's name.

#### Example

1. **Create a new table with the foreign key constraint**:

```sql
CREATE TABLE Employees_new (
    emp_id INTEGER PRIMARY KEY,
    emp_name TEXT,
    dept_id INTEGER,
    salary INTEGER,
    FOREIGN KEY (dept_id) REFERENCES Departments(dept_id)
);
```

2. **Copy data from the old table to the new table**:

```sql
INSERT INTO Employees_new (emp_id, emp_name, dept_id, salary)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees;
```

3. **Drop the old table**:

```sql
DROP TABLE Employees;
```

4. **Rename the new table to the old table's name**:

```sql
ALTER TABLE Employees_new RENAME TO Employees;
```

### Microsoft SQL Server (MS SQL)

In MS SQL Server, you use the `ALTER TABLE` statement with the `ADD CONSTRAINT` clause to add a foreign key.

#### Syntax

```sql
ALTER TABLE table_name
ADD CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES parent_table (parent_column);
```

#### Example

```sql
-- Add a foreign key to the Employees table
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

### Oracle

In Oracle, you use the `ALTER TABLE` statement with the `ADD CONSTRAINT` clause to add a foreign key.

#### Syntax

```sql
ALTER TABLE table_name
ADD CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES parent_table (parent_column);
```

#### Example

```sql
-- Add a foreign key to the Employees table
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

### Practical Example: Adding a Foreign Key

Here is a practical example of adding a foreign key to the `Employees` table that references the `Departments` table across various SQL databases.

#### MySQL Example

```sql
-- Add a foreign key to the Employees table in MySQL
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

#### PostgreSQL Example

```sql
-- Add a foreign key to the Employees table in PostgreSQL
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

#### SQLite Example

1. **Create a new table with the foreign key constraint**:

```sql
CREATE TABLE Employees_new (
    emp_id INTEGER PRIMARY KEY,
    emp_name TEXT,
    dept_id INTEGER,
    salary INTEGER,
    FOREIGN KEY (dept_id) REFERENCES Departments(dept_id)
);
```

2. **Copy data from the old table to the new table**:

```sql
INSERT INTO Employees_new (emp_id, emp_name, dept_id, salary)
SELECT emp_id, emp_name, dept_id, salary
FROM Employees;
```

3. **Drop the old table**:

```sql
DROP TABLE Employees;
```

4. **Rename the new table to the old table's name**:

```sql
ALTER TABLE Employees_new RENAME TO Employees;
```

#### MS SQL Server Example

```sql
-- Add a foreign key to the Employees table in MS SQL Server
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

#### Oracle Example

```sql
-- Add a foreign key to the Employees table in Oracle
ALTER TABLE Employees
ADD CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES Departments(dept_id);
```

### Summary

Adding a foreign key to an existing table involves using the `ALTER TABLE` statement with the `ADD CONSTRAINT` clause in most SQL databases. SQLite, however, requires recreating the table with the foreign key constraint due to its limitations on altering existing tables. The provided examples demonstrate how to add a foreign key constraint effectively in MySQL, PostgreSQL, SQLite, MS SQL Server, and Oracle.

If you have more specific queries or need further examples, feel free to ask! ✔️
