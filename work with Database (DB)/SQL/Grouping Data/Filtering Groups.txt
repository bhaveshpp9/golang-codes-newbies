\\ work with database(DB) — SQL — Grouping data —Filtering Groups


In SQL, grouping data and filtering groups is typically done using the `GROUP BY` clause in combination with aggregate functions and the `HAVING` clause. The `GROUP BY` clause groups rows that have the same values in specified columns into summary rows, and the `HAVING` clause is used to filter groups based on certain conditions.

### Basic Syntax

```sql
SELECT column1, aggregate_function(column2)
FROM table_name
WHERE condition
GROUP BY column1
HAVING aggregate_function(column2) condition;
```

### Steps for Grouping and Filtering Groups

1. **Use the `GROUP BY` clause** to group rows based on one or more columns.
2. **Apply aggregate functions** such as `COUNT()`, `SUM()`, `AVG()`, `MIN()`, and `MAX()` to perform calculations on the grouped data.
3. **Use the `HAVING` clause** to filter the grouped data based on the results of the aggregate functions.

### Examples in Different Databases

#### MySQL

```sql
-- Find the total sales for each product and filter to show only products with sales greater than 1000
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID
HAVING SUM(Sales) > 1000;
```

#### PostgreSQL

```sql
-- Find the average salary for each department and filter to show only departments with an average salary greater than 50000
SELECT Department, AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY Department
HAVING AVG(Salary) > 50000;
```

#### Oracle

```sql
-- Find the count of students in each grade and filter to show only grades with more than 10 students
SELECT Grade, COUNT(*) AS StudentCount
FROM Students
GROUP BY Grade
HAVING COUNT(*) > 10;
```

#### SQLite

```sql
-- Find the total revenue for each year and filter to show only years with total revenue greater than 1000000
SELECT Year, SUM(Revenue) AS TotalRevenue
FROM Financials
GROUP BY Year
HAVING SUM(Revenue) > 1000000;
```

#### SQL Server

```sql
-- Find the maximum budget for each project type and filter to show only project types with a maximum budget greater than 50000
SELECT ProjectType, MAX(Budget) AS MaxBudget
FROM Projects
GROUP BY ProjectType
HAVING MAX(Budget) > 50000;
```

### Practical Examples and Use Cases

#### Grouping and Filtering with Multiple Conditions

```sql
-- Find the total sales for each product category and filter to show only categories with total sales greater than 10000 and less than 50000
SELECT CategoryID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY CategoryID
HAVING SUM(Sales) > 10000 AND SUM(Sales) < 50000;
```

#### Using Aggregate Functions with GROUP BY and HAVING

```sql
-- Find the average order amount for each customer and filter to show only customers with an average order amount greater than 100
SELECT CustomerID, AVG(OrderAmount) AS AvgOrderAmount
FROM Orders
GROUP BY CustomerID
HAVING AVG(OrderAmount) > 100;
```

#### Combining WHERE, GROUP BY, and HAVING

```sql
-- Find the total sales for each product, filter to show only sales in the last year, and show only products with total sales greater than 2000
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
WHERE SaleDate >= '2023-01-01'
GROUP BY ProductID
HAVING SUM(Sales) > 2000;
```

### Using Subqueries with GROUP BY and HAVING

You can use subqueries to further filter the grouped data.

```sql
-- Find the total sales for each product and filter to show only products that have sales in more than one region
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID
HAVING COUNT(DISTINCT RegionID) > 1;
```

### Filtering Groups Based on Multiple Aggregates

You can filter groups based on multiple aggregate functions.

```sql
-- Find the average salary and the total number of employees for each department, and filter to show only departments with an average salary greater than 50000 and more than 10 employees
SELECT Department, AVG(Salary) AS AvgSalary, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Department
HAVING AVG(Salary) > 50000 AND COUNT(*) > 10;
```

### Summary

Grouping data and filtering groups in SQL involves using the `GROUP BY` clause to group rows based on specified columns and the `HAVING` clause to filter the grouped data based on aggregate functions. This allows for powerful and flexible data analysis, enabling you to generate summary reports and apply filters based on calculated results.

These examples demonstrate how to effectively use `GROUP BY` and `HAVING` in various scenarios. If you have more specific queries or need further examples, feel free to ask! ✔️
