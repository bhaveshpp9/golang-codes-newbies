\\ work with database(DB) — SQL — Grouping data —Grouping by Multiple Columns


Grouping data by multiple columns in SQL allows you to organize and aggregate data based on more than one criterion. This is useful for generating more detailed summary reports. Here's a detailed guide on how to use the `GROUP BY` clause to group by multiple columns across different SQL databases with practical examples.

### Basic Syntax

```sql
SELECT column1, column2, aggregate_function(column3)
FROM table_name
GROUP BY column1, column2;
```

### Examples in Different Databases

#### MySQL

```sql
-- Find the total sales for each product and region
SELECT ProductID, RegionID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID, RegionID;
```

#### PostgreSQL

```sql
-- Find the average salary for each department and job title
SELECT Department, JobTitle, AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY Department, JobTitle;
```

#### Oracle

```sql
-- Find the count of students in each grade and class
SELECT Grade, Class, COUNT(*) AS StudentCount
FROM Students
GROUP BY Grade, Class;
```

#### SQLite

```sql
-- Find the total revenue for each year and quarter
SELECT Year, Quarter, SUM(Revenue) AS TotalRevenue
FROM Financials
GROUP BY Year, Quarter;
```

#### SQL Server

```sql
-- Find the maximum budget for each project type and manager
SELECT ProjectType, ManagerID, MAX(Budget) AS MaxBudget
FROM Projects
GROUP BY ProjectType, ManagerID;
```

### Practical Examples and Use Cases

#### Grouping by Multiple Columns with Aggregate Functions

```sql
-- Find the total sales for each product category and region
SELECT CategoryID, RegionID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY CategoryID, RegionID;
```

#### Combining WHERE, GROUP BY, and HAVING

```sql
-- Find the total sales for each product in the last year, and filter to show only products with sales greater than 2000
SELECT ProductID, RegionID, SUM(Sales) AS TotalSales
FROM Sales
WHERE SaleDate >= '2023-01-01'
GROUP BY ProductID, RegionID
HAVING SUM(Sales) > 2000;
```

#### Grouping by Multiple Columns with ORDER BY

```sql
-- Find the average order amount for each customer and region, and sort by average order amount
SELECT CustomerID, RegionID, AVG(OrderAmount) AS AvgOrderAmount
FROM Orders
GROUP BY CustomerID, RegionID
ORDER BY AvgOrderAmount DESC;
```

### Using Multiple Aggregate Functions

You can use multiple aggregate functions in a single query when grouping by multiple columns.

```sql
-- Find the average salary and the total number of employees for each department and job title
SELECT Department, JobTitle, AVG(Salary) AS AvgSalary, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Department, JobTitle;
```

### Using Column Aliases

You can use column aliases to make your query results more readable.

```sql
-- Find the total revenue and the number of sales for each product and sales region
SELECT ProductID AS Product, RegionID AS Region, SUM(Sales) AS TotalRevenue, COUNT(*) AS NumberOfSales
FROM Sales
GROUP BY Product, Region;
```

### Using Subqueries with GROUP BY Multiple Columns

Subqueries can be used to further refine the grouped data.

```sql
-- Find the total sales for each product, and filter to show only products sold in more than one region
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID
HAVING COUNT(DISTINCT RegionID) > 1;
```

### Using DISTINCT with GROUP BY

You can combine `DISTINCT` with `GROUP BY` to get unique combinations of grouped columns.

```sql
-- Find the unique combinations of product and region with total sales
SELECT DISTINCT ProductID, RegionID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID, RegionID;
```

### Practical Scenario: Sales Analysis

Suppose you are analyzing sales data and want to generate a report that shows total sales and the number of transactions for each product in each region.

```sql
SELECT ProductID, RegionID, SUM(SalesAmount) AS TotalSales, COUNT(*) AS TransactionCount
FROM Sales
GROUP BY ProductID, RegionID
ORDER BY TotalSales DESC;
```

### Summary

Grouping data by multiple columns in SQL allows for more granular and detailed analysis. Using the `GROUP BY` clause with multiple columns, combined with aggregate functions and optional filtering using the `HAVING` clause, enables you to generate comprehensive summary reports. Sorting the grouped data using the `ORDER BY` clause further enhances the readability and usability of the results.

These examples demonstrate how to effectively group data by multiple columns in various scenarios. If you have more specific queries or need further examples, feel free to ask! ✔️over how data is grouped.
Aside from the aggregate calculations statements, every column in your SELECT statement must be present in the GROUP BY clause.
