\\ work with database(DB) — SQL — Grouping data —Grouping and Sorting


Grouping and sorting data in SQL is a powerful way to organize and analyze data. This process involves using the `GROUP BY` clause to group rows that have the same values in specified columns into summary rows, and the `ORDER BY` clause to sort the result set. You can also use aggregate functions with `GROUP BY` to perform calculations on the grouped data.

### Basic Syntax

```sql
SELECT column1, aggregate_function(column2)
FROM table_name
WHERE condition
GROUP BY column1
ORDER BY column1;
```

### Steps for Grouping and Sorting Data

1. **Use the `GROUP BY` clause** to group rows based on one or more columns.
2. **Apply aggregate functions** such as `COUNT()`, `SUM()`, `AVG()`, `MIN()`, and `MAX()` to perform calculations on the grouped data.
3. **Use the `ORDER BY` clause** to sort the result set based on one or more columns.

### Examples in Different Databases

#### MySQL

```sql
-- Find the total sales for each product and sort the result by total sales in descending order
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID
ORDER BY TotalSales DESC;
```

#### PostgreSQL

```sql
-- Find the average salary for each department and sort the result by department name
SELECT Department, AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY Department
ORDER BY Department;
```

#### Oracle

```sql
-- Find the count of students in each grade and sort the result by student count in ascending order
SELECT Grade, COUNT(*) AS StudentCount
FROM Students
GROUP BY Grade
ORDER BY StudentCount;
```

#### SQLite

```sql
-- Find the total revenue for each year and sort the result by year
SELECT Year, SUM(Revenue) AS TotalRevenue
FROM Financials
GROUP BY Year
ORDER BY Year;
```

#### SQL Server

```sql
-- Find the maximum budget for each project type and sort the result by maximum budget in descending order
SELECT ProjectType, MAX(Budget) AS MaxBudget
FROM Projects
GROUP BY ProjectType
ORDER BY MaxBudget DESC;
```

### Practical Examples and Use Cases

#### Grouping and Sorting with Multiple Columns

```sql
-- Find the total sales for each product category and region, and sort the result by product category and total sales
SELECT CategoryID, RegionID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY CategoryID, RegionID
ORDER BY CategoryID, TotalSales DESC;
```

#### Using Aggregate Functions with GROUP BY and ORDER BY

```sql
-- Find the average order amount for each customer and sort the result by average order amount
SELECT CustomerID, AVG(OrderAmount) AS AvgOrderAmount
FROM Orders
GROUP BY CustomerID
ORDER BY AvgOrderAmount DESC;
```

#### Combining WHERE, GROUP BY, and ORDER BY

```sql
-- Find the total sales for each product in the last year, and sort the result by product ID
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
WHERE SaleDate >= '2023-01-01'
GROUP BY ProductID
ORDER BY ProductID;
```

### Filtering Groups with HAVING and Sorting

You can use the `HAVING` clause to filter groups and then sort the filtered result set.

```sql
-- Find the total sales for each product and filter to show only products with sales greater than 2000, then sort by total sales
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID
HAVING SUM(Sales) > 2000
ORDER BY TotalSales DESC;
```

### Grouping and Sorting Based on Calculated Columns

You can also group and sort based on calculated columns.

```sql
-- Find the average salary for each department, calculate the total salary for each department, and sort by total salary
SELECT Department, AVG(Salary) AS AvgSalary, SUM(Salary) AS TotalSalary
FROM Employees
GROUP BY Department
ORDER BY TotalSalary DESC;
```

### Using Subqueries with GROUP BY and ORDER BY

You can use subqueries to further refine the grouped and sorted data.

```sql
-- Find the total sales for each product and sort by the number of regions in which the product is sold
SELECT ProductID, SUM(Sales) AS TotalSales
FROM Sales
GROUP BY ProductID
ORDER BY (
    SELECT COUNT(DISTINCT RegionID)
    FROM Sales s2
    WHERE s2.ProductID = Sales.ProductID
) DESC;
```

### Summary

Grouping and sorting data in SQL using the `GROUP BY` and `ORDER BY` clauses allows you to organize and analyze your data effectively. You can use these clauses in combination with aggregate functions and filtering to generate insightful reports and summaries. Understanding how to use these clauses effectively enables you to perform complex data manipulations and derive meaningful information from your datasets.

These examples demonstrate how to effectively group and sort data in various scenarios. If you have more specific queries or need further examples, feel free to ask! ✔️
