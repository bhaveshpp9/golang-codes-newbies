\\ work with database(DB) — SQL — Updating Views — Creating views


Creating views in SQL involves defining a virtual table based on the result of a SELECT query. Views can be used to simplify complex queries, encapsulate business logic, and present data in a specific format. Below are examples of how to create views in various SQL databases, including MySQL, PostgreSQL, SQLite, Microsoft SQL Server, and Oracle.

### Example Table

Assume we have the following table named `Employees`:

```sql
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100),
    dept_id INT,
    salary INT,
    hire_date DATE
);

INSERT INTO Employees (emp_id, emp_name, dept_id, salary, hire_date) VALUES
(1, 'Alice', 1, 50000, '2020-01-15'),
(2, 'Bob', 2, 60000, '2019-03-22'),
(3, 'Charlie', 1, 55000, '2021-06-10'),
(4, 'David', 3, 45000, '2018-11-05'),
(5, 'Eva', 2, 70000, '2017-09-13');
```

### Creating Views

### MySQL

In MySQL, you use the `CREATE VIEW` statement to create a view.

#### Example: Creating a Simple View

```sql
-- Create a view that shows employee details with their annual salary
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

### PostgreSQL

In PostgreSQL, you use the `CREATE VIEW` statement to create a view.

#### Example: Creating a Simple View

```sql
-- Create a view that shows employee details with their annual salary
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

### SQLite

In SQLite, you use the `CREATE VIEW` statement to create a view.

#### Example: Creating a Simple View

```sql
-- Create a view that shows employee details with their annual salary
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

### Microsoft SQL Server (MS SQL)

In MS SQL Server, you use the `CREATE VIEW` statement to create a view.

#### Example: Creating a Simple View

```sql
-- Create a view that shows employee details with their annual salary
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

### Oracle

In Oracle, you use the `CREATE VIEW` statement to create a view.

#### Example: Creating a Simple View

```sql
-- Create a view that shows employee details with their annual salary
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

### Practical Examples: Creating Views

Here are practical examples of creating views in the `Employees` table across various SQL databases.

#### MySQL Example

```sql
-- Create a view that shows employee details with their annual salary in MySQL
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

#### PostgreSQL Example

```sql
-- Create a view that shows employee details with their annual salary in PostgreSQL
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

#### SQLite Example

```sql
-- Create a view that shows employee details with their annual salary in SQLite
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

#### MS SQL Server Example

```sql
-- Create a view that shows employee details with their annual salary in MS SQL Server
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

#### Oracle Example

```sql
-- Create a view that shows employee details with their annual salary in Oracle
CREATE VIEW EmployeeDetails AS
SELECT
    emp_id,
    emp_name,
    dept_id,
    salary,
    salary * 12 AS annual_salary,
    hire_date
FROM Employees;
```

### Benefits of Using Views

1. **Simplicity**: Simplify complex queries by encapsulating them in a view.
2. **Security**: Restrict access to specific columns and rows in the underlying tables.
3. **Consistency**: Ensure consistent results for frequently used queries.
4. **Abstraction**: Abstract the underlying table structure and business logic.

### Considerations

1. **Performance**: Views can impact performance if they are based on complex queries or join multiple tables. Indexed views or materialized views can improve performance.
2. **Updates**: Not all views are updatable. For updatable views, ensure that the view definition supports updates.
3. **Dependencies**: Changes to underlying tables (such as column names or data types) can affect views.

### Summary

Creating views in SQL involves using the `CREATE VIEW` statement to define a virtual table based on the result of a SELECT query. Views are useful for simplifying complex queries, enhancing security, ensuring consistency, and abstracting underlying table structures. The provided examples demonstrate how to create views effectively in MySQL, PostgreSQL, SQLite, MS SQL Server, and Oracle.

If you have more specific queries or need further examples, feel free to ask! ✔️
