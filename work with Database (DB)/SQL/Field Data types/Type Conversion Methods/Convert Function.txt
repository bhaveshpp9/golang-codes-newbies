\\ work with database(DB) — SQL — Field data types — Type Conversion methods — Convert Function


The `CONVERT` function is used to explicitly convert an expression from one data type to another. It is similar to the `CAST` function but is more database-specific. The syntax and usage of the `CONVERT` function can vary between different SQL database systems. Below are examples and explanations for using the `CONVERT` function in various databases, including SQL Server, MySQL, and Oracle.

### Syntax

The general syntax for the `CONVERT` function is:

```sql
CONVERT(target_data_type, value)
```

### Examples in Different Databases

#### SQL Server

In SQL Server, the `CONVERT` function can be used to change the data type of an expression.

##### Example

```sql
SELECT CONVERT(INT, '123') AS IntegerValue; -- Convert string to integer
SELECT CONVERT(VARCHAR(10), 123.45) AS StringValue; -- Convert float to string
SELECT CONVERT(DATE, '2023-05-10') AS DateValue; -- Convert string to date
```

#### MySQL

In MySQL, the `CONVERT` function is used for similar purposes but has slightly different syntax, where the `USING` keyword can be used for character set conversion.

##### Example

```sql
SELECT CONVERT('123', SIGNED) AS IntegerValue; -- Convert string to integer
SELECT CONVERT(123.45, CHAR) AS StringValue; -- Convert float to string
SELECT CONVERT('2023-05-10', DATE) AS DateValue; -- Convert string to date
SELECT CONVERT('hello' USING utf8mb4) AS Utf8String; -- Convert character set
```

#### Oracle

Oracle does not have a `CONVERT` function for data type conversion. Instead, it uses `CAST`. However, Oracle has a `CONVERT` function for character set conversion.

##### Character Set Conversion Example

```sql
SELECT CONVERT('Hello', 'UTF8', 'US7ASCII') AS Utf8String FROM dual; -- Convert character set
```

### Practical Examples

#### Converting Strings to Numbers

Sometimes, numeric values are stored as strings, and you need to convert them to numbers for arithmetic operations.

##### SQL Server Example

```sql
SELECT CONVERT(INT, '123') + 10 AS Result; -- Convert string to integer and add 10
```

##### MySQL Example

```sql
SELECT CONVERT('123', SIGNED) + 10 AS Result; -- Convert string to integer and add 10
```

#### Converting Numbers to Strings

You might need to convert numbers to strings for concatenation with other strings.

##### SQL Server Example

```sql
SELECT 'The value is ' + CONVERT(VARCHAR(10), 123.45) AS Result; -- Convert float to string and concatenate
```

##### MySQL Example

```sql
SELECT CONCAT('The value is ', CONVERT(123.45, CHAR)) AS Result; -- Convert float to string and concatenate
```

#### Converting Strings to Dates

Converting strings to dates is common when dates are stored as text.

##### SQL Server Example

```sql
SELECT CONVERT(DATE, '2023-05-10') AS DateValue; -- Convert string to date
```

##### MySQL Example

```sql
SELECT CONVERT('2023-05-10', DATE) AS DateValue; -- Convert string to date
```

### Using `CONVERT` in Complex Queries

You can use the `CONVERT` function in more complex queries to ensure data types are compatible.

#### Example: Aggregating and Converting

##### SQL Server Example

```sql
SELECT
    AVG(CONVERT(DECIMAL(10, 2), column_name)) AS AverageValue
FROM
    table_name;
```

##### MySQL Example

```sql
SELECT
    AVG(CONVERT(column_name, DECIMAL(10, 2))) AS AverageValue
FROM
    table_name;
```

### Summary

The `CONVERT` function is a powerful tool for converting data types in SQL, ensuring compatibility within expressions and queries. It is supported in SQL Server and MySQL with variations in syntax. Oracle uses the `CAST` function for data type conversion but has a `CONVERT` function for character set conversion. These examples demonstrate how to effectively use the `CONVERT` function in various scenarios. If you have more specific queries or need further examples, feel free to ask! ✔️
