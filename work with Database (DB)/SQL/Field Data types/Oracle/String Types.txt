\\ work with database(DB) — SQL —  Field data types — Oracle — String Types


In Oracle Database, string types are used to store text data, which can include characters, words, sentences, and more. Oracle provides several data types for storing strings, each suitable for different purposes and storage requirements. Here’s a detailed guide on how to work with string types in Oracle.

### String Data Types

1. **CHAR(n)**: Fixed-length string that can store up to `n` characters. If the string is shorter than `n`, it is padded with spaces.
2. **VARCHAR2(n)**: Variable-length string that can store up to `n` characters. Only the actual length of the string is stored, with no padding.
3. **NCHAR(n)**: Fixed-length string that can store up to `n` Unicode characters. Similar to `CHAR`, but supports Unicode.
4. **NVARCHAR2(n)**: Variable-length string that can store up to `n` Unicode characters. Similar to `VARCHAR2`, but supports Unicode.
5. **CLOB**: Stores large text data up to 4 GB. Used for large strings like documents.

### Creating a Table with String Fields

To create a table with string fields in Oracle, you can use the appropriate string data types.

#### Example

```sql
CREATE TABLE Customers (
    CustomerID NUMBER PRIMARY KEY,
    FirstName VARCHAR2(50),
    LastName VARCHAR2(50),
    Email VARCHAR2(100),
    Notes CLOB
);
```

### Inserting Data into String Fields

You can insert string data into the table using appropriate SQL syntax.

#### Example

```sql
INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Notes)
VALUES (1, 'John', 'Doe', 'john.doe@example.com', 'Regular customer. Loves our product.');

INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Notes)
VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', 'VIP customer. Needs special attention.');
```

### Querying Data with String Fields

You can query string fields using various functions and operators.

#### Selecting Records Based on String Values

```sql
SELECT * FROM Customers
WHERE LastName = 'Doe';
```

#### Using Wildcards for Pattern Matching

You can use wildcards for pattern matching with the `LIKE` operator.

```sql
SELECT * FROM Customers
WHERE LastName LIKE 'Sm%';  -- Matches 'Smith', 'Smyth', etc.
```

### Updating String Fields

You can update string fields using the `UPDATE` statement.

#### Example

```sql
UPDATE Customers
SET Email = 'john.newemail@example.com'
WHERE CustomerID = 1;
```

### Deleting Data Based on String Fields

You can delete records based on string conditions.

#### Example

```sql
DELETE FROM Customers
WHERE LastName = 'Smith';
```

### Practical Examples and Use Cases

#### Concatenating Strings

You can concatenate strings using the `||` operator.

##### Example: Concatenating First and Last Names

```sql
SELECT FirstName || ' ' || LastName AS FullName
FROM Customers;
```

#### Extracting Substrings

You can extract substrings using the `SUBSTR` function.

##### Example: Extracting First 3 Characters of FirstName

```sql
SELECT SUBSTR(FirstName, 1, 3) AS ShortFirstName
FROM Customers;
```

#### Changing Case

You can change the case of strings using the `UPPER` (uppercase) and `LOWER` (lowercase) functions.

##### Example: Converting LastName to Uppercase

```sql
SELECT UPPER(LastName) AS UpperLastName
FROM Customers;
```

#### Trimming Spaces

You can trim leading and trailing spaces using the `TRIM` function.

##### Example: Trimming Spaces from Email

```sql
SELECT TRIM(Email) AS TrimmedEmail
FROM Customers;
```

### Handling NULL Values

String fields can be `NULL` if no value is provided. You can check for `NULL` values using the `IS NULL` or `IS NOT NULL` operators.

##### Example: Inserting and Checking for NULL Values

```sql
INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Notes)
VALUES (3, 'Emily', 'Johnson', NULL, 'New customer. No email provided.');

SELECT * FROM Customers
WHERE Email IS NULL;
```

### Using String Fields in Calculations

You can use string fields in calculations and concatenations to perform complex queries.

##### Example: Creating a Full Name Field

```sql
SELECT FirstName || ' ' || LastName AS FullName
FROM Customers;
```

### Summary

In Oracle Database, string types are managed using the `CHAR`, `VARCHAR2`, `NCHAR`, `NVARCHAR2`, and `CLOB` data types. You can create tables with string fields, insert and query data, update and delete records based on string values, and perform various text manipulations using functions like `SUBSTR`, `UPPER`, `LOWER`, and `TRIM`. These operations are essential for managing and analyzing text data in Oracle.

These examples demonstrate how to effectively use string types in Oracle. If you have more specific queries or need further examples, feel free to ask! ✔️
