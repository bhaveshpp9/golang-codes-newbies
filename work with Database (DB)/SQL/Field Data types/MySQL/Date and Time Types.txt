\\ work with database(DB) — SQL — Field data types — MySQL — Date and Time Types


In MySQL, several data types are available for storing date and time information, each suitable for different use cases and levels of precision. Here’s a detailed guide on how to work with date and time types in MySQL.

### Date and Time Data Types

1. **DATE**: Stores dates in the format `YYYY-MM-DD`. Range: '1000-01-01' to '9999-12-31'.
2. **TIME**: Stores time in the format `HH:MM:SS`. Range: '-838:59:59' to '838:59:59'.
3. **DATETIME**: Stores both date and time in the format `YYYY-MM-DD HH:MM:SS`. Range: '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.
4. **TIMESTAMP**: Stores both date and time in the format `YYYY-MM-DD HH:MM:SS`. Range: '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC. Automatically updates to the current timestamp if not provided.
5. **YEAR**: Stores year in the format `YYYY`. Range: '1901' to '2155' and '0000'.

### Creating a Table with Date and Time Fields

To create a table with various date and time fields in MySQL, you can use the appropriate data types.

#### Example

```sql
CREATE TABLE Events (
    EventID INT PRIMARY KEY AUTO_INCREMENT,
    EventName VARCHAR(100),
    EventDate DATE,
    EventTime TIME,
    EventDateTime DATETIME,
    EventTimestamp TIMESTAMP,
    EventYear YEAR
);
```

### Inserting Data into Date and Time Fields

You can insert date and time data into the table using appropriate SQL syntax.

#### Example

```sql
INSERT INTO Events (EventName, EventDate, EventTime, EventDateTime, EventTimestamp, EventYear)
VALUES ('Conference', '2024-06-15', '09:00:00', '2024-06-15 09:00:00', '2024-06-15 09:00:00', '2024');

INSERT INTO Events (EventName, EventDate, EventTime, EventDateTime, EventTimestamp, EventYear)
VALUES ('Meeting', '2024-07-01', '14:30:00', '2024-07-01 14:30:00', '2024-07-01 14:30:00', '2024');
```

### Querying Data with Date and Time Fields

You can query date and time fields using various functions and operators.

#### Selecting Records Based on Date

```sql
SELECT * FROM Events
WHERE EventDate = '2024-06-15';
```

#### Selecting Records in a Date Range

```sql
SELECT * FROM Events
WHERE EventDate BETWEEN '2024-06-01' AND '2024-06-30';
```

#### Selecting Records Based on Time

```sql
SELECT * FROM Events
WHERE EventTime = '09:00:00';
```

#### Selecting Records Based on DateTime

```sql
SELECT * FROM Events
WHERE EventDateTime >= '2024-06-15 00:00:00' AND EventDateTime < '2024-06-16 00:00:00';
```

### Updating Date and Time Fields

You can update date and time fields using the `UPDATE` statement.

#### Example

```sql
UPDATE Events
SET EventDate = '2024-08-01',
    EventTime = '10:00:00',
    EventDateTime = '2024-08-01 10:00:00',
    EventTimestamp = '2024-08-01 10:00:00',
    EventYear = '2025'
WHERE EventID = 1;
```

### Deleting Data Based on Date and Time Fields

You can delete records based on date and time conditions.

#### Example

```sql
DELETE FROM Events
WHERE EventDate < '2024-07-01';
```

### Practical Examples and Use Cases

#### Extracting Parts of Date and Time

You can extract specific parts of date and time using functions like `YEAR`, `MONTH`, `DAY`, `HOUR`, `MINUTE`, and `SECOND`.

##### Extracting Year and Month

```sql
SELECT EventID, 
       YEAR(EventDate) AS EventYear,
       MONTH(EventDate) AS EventMonth
FROM Events;
```

##### Extracting Hour and Minute

```sql
SELECT EventID, 
       HOUR(EventTime) AS EventHour,
       MINUTE(EventTime) AS EventMinute
FROM Events;
```

#### Formatting Date and Time

You can format date and time fields using the `DATE_FORMAT` function.

##### Formatting as 'YYYY-MM-DD'

```sql
SELECT EventID, 
       DATE_FORMAT(EventDate, '%Y-%m-%d') AS FormattedDate
FROM Events;
```

#### Adding/Subtracting Time Intervals

You can add or subtract time intervals using the `DATE_ADD` and `DATE_SUB` functions.

##### Adding 1 Month to Event Date

```sql
UPDATE Events
SET EventDate = DATE_ADD(EventDate, INTERVAL 1 MONTH)
WHERE EventID = 1;
```

##### Subtracting 1 Hour from Event Time

```sql
UPDATE Events
SET EventTime = DATE_SUB(EventTime, INTERVAL 1 HOUR)
WHERE EventID = 1;
```

### Handling NULL Values

Date and time fields can be `NULL` if no value is provided. You can check for `NULL` values using the `IS NULL` or `IS NOT NULL` operators.

#### Example: Inserting and Checking for NULL Values

```sql
INSERT INTO Events (EventName, EventDate, EventTime, EventDateTime, EventTimestamp, EventYear)
VALUES ('Webinar', NULL, NULL, NULL, NULL, NULL);

SELECT * FROM Events
WHERE EventDate IS NULL;
```

### Using Date and Time Fields in Calculations

You can use date and time fields in calculations to perform complex queries.

##### Example: Calculating Duration Between Two DateTimes

```sql
SELECT EventID, 
       EventName, 
       TIMESTAMPDIFF(MINUTE, EventDateTime, EventTimestamp) AS DurationInMinutes
FROM Events;
```

### Summary

In MySQL, date and time fields are managed using the `DATE`, `TIME`, `DATETIME`, `TIMESTAMP`, and `YEAR` data types. You can create tables with date and time fields, insert and query data, update and delete records based on date and time, and perform various date and time calculations and formatting. These operations are essential for managing and analyzing date and time data in MySQL.

These examples demonstrate how to effectively use date and time fields in MySQL. If you have more specific queries or need further examples, feel free to ask! ✔️
