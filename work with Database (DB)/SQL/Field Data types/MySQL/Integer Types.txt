\\ work with database(DB) — SQL — Field data types — MySQL — integer Types

In MySQL, integer types are used to store whole numbers. MySQL provides several data types for storing integers, each suitable for different ranges of values. Here’s a detailed guide on how to work with integer types in MySQL.

### Integer Data Types

1. **TINYINT**: Stores integers from -128 to 127 or 0 to 255 (unsigned).
2. **SMALLINT**: Stores integers from -32,768 to 32,767 or 0 to 65,535 (unsigned).
3. **MEDIUMINT**: Stores integers from -8,388,608 to 8,388,607 or 0 to 16,777,215 (unsigned).
4. **INT**: Stores integers from -2,147,483,648 to 2,147,483,647 or 0 to 4,294,967,295 (unsigned).
5. **BIGINT**: Stores integers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 or 0 to 18,446,744,073,709,551,615 (unsigned).

### Creating a Table with Integer Fields

To create a table with integer fields in MySQL, you can use the appropriate integer data types.

#### Example

```sql
CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100),
    QuantityInStock INT,
    ReorderLevel SMALLINT,
    SupplierID BIGINT
);
```

### Inserting Data into Integer Fields

You can insert integer data into the table using appropriate SQL syntax.

#### Example

```sql
INSERT INTO Products (ProductName, QuantityInStock, ReorderLevel, SupplierID)
VALUES ('Widget', 100, 10, 1234567890123456789);

INSERT INTO Products (ProductName, QuantityInStock, ReorderLevel, SupplierID)
VALUES ('Gadget', 50, 5, 9876543210987654321);
```

### Querying Data with Integer Fields

You can query integer fields using various functions and operators.

#### Selecting Records Based on Integer Values

```sql
SELECT * FROM Products
WHERE QuantityInStock > 50;
```

#### Calculating Totals and Averages

You can calculate the total and average values of an integer field using the `SUM()` and `AVG()` functions.

```sql
SELECT SUM(QuantityInStock) AS TotalStock,
       AVG(QuantityInStock) AS AverageStock
FROM Products;
```

### Updating Integer Fields

You can update integer fields using the `UPDATE` statement.

#### Example

```sql
UPDATE Products
SET QuantityInStock = 120
WHERE ProductName = 'Widget';
```

### Deleting Data Based on Integer Fields

You can delete records based on integer conditions.

#### Example

```sql
DELETE FROM Products
WHERE QuantityInStock < 10;
```

### Practical Examples and Use Cases

#### Calculating Stock Levels

You can calculate different stock levels using integer fields.

##### Example: Finding Products Below Reorder Level

```sql
SELECT ProductName, QuantityInStock, ReorderLevel
FROM Products
WHERE QuantityInStock < ReorderLevel;
```

#### Grouping Data and Calculating Summaries

You can group data by a field and calculate summaries like total, average, maximum, and minimum values.

##### Example: Grouping by Supplier and Calculating Totals

```sql
SELECT SupplierID, 
       SUM(QuantityInStock) AS TotalStock,
       AVG(QuantityInStock) AS AverageStock
FROM Products
GROUP BY SupplierID;
```

### Handling NULL Values

Integer fields can be `NULL` if no value is provided. You can check for `NULL` values using the `IS NULL` or `IS NOT NULL` operators.

##### Example: Inserting and Checking for NULL Values

```sql
INSERT INTO Products (ProductName, QuantityInStock, ReorderLevel, SupplierID)
VALUES ('Widget', NULL, 10, 1234567890123456789);

SELECT * FROM Products
WHERE QuantityInStock IS NULL;
```

### Using Integer Fields in Calculations

You can use integer fields in mathematical calculations to perform complex queries.

##### Example: Calculating Reorder Quantity

You can calculate the reorder quantity based on the reorder level and current stock.

```sql
SELECT ProductName, 
       ReorderLevel - QuantityInStock AS ReorderQuantity
FROM Products
WHERE QuantityInStock < ReorderLevel;
```

### Summary

In MySQL, integer types are managed using the `TINYINT`, `SMALLINT`, `MEDIUMINT`, `INT`, and `BIGINT` data types. You can create tables with integer fields, insert and query data, update and delete records based on integer values, and perform various calculations and summaries using aggregate functions. These operations are essential for managing and analyzing numeric data in MySQL.

These examples demonstrate how to effectively use integer types in MySQL. If you have more specific queries or need further examples, feel free to ask! ✔️
