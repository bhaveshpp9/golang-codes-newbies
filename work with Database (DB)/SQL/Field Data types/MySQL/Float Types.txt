\\ work with database(DB) — SQL — Field data types — MySQL — Float Types


In MySQL, float types are used to store approximate numeric values with floating decimal points. MySQL provides several data types for handling floating-point numbers, each suitable for different levels of precision and storage requirements. Here’s a detailed guide on how to work with float types in MySQL.

### Float Data Types

1. **FLOAT**: A single-precision floating-point number. The syntax for declaring a FLOAT column is `FLOAT(M,D)`, where `M` is the total number of digits and `D` is the number of digits after the decimal point. If no parameters are specified, the default precision is used.
2. **DOUBLE**: A double-precision floating-point number. The syntax for declaring a DOUBLE column is `DOUBLE(M,D)`, similar to FLOAT. DOUBLE provides greater precision than FLOAT.
3. **DECIMAL**: An exact numeric data type that stores fixed-point numbers. The syntax for declaring a DECIMAL column is `DECIMAL(M,D)`, where `M` is the maximum number of digits (the precision) and `D` is the number of digits to the right of the decimal point (the scale).

### Creating a Table with Float Fields

To create a table with float fields in MySQL, you can use the `FLOAT`, `DOUBLE`, and `DECIMAL` data types.

#### Example

```sql
CREATE TABLE Measurements (
    MeasurementID INT PRIMARY KEY AUTO_INCREMENT,
    SensorName VARCHAR(50),
    Temperature FLOAT,            -- Single-precision floating-point
    Humidity DOUBLE,              -- Double-precision floating-point
    Pressure DECIMAL(10, 2),      -- Fixed-point number with 10 digits total, 2 of which are after the decimal point
    Altitude FLOAT(7, 2)          -- Single-precision floating-point with 7 digits total, 2 of which are after the decimal point
);
```

### Inserting Data into Float Fields

You can insert floating-point data into the table using appropriate SQL syntax.

#### Example

```sql
INSERT INTO Measurements (SensorName, Temperature, Humidity, Pressure, Altitude)
VALUES ('Sensor1', 23.5, 45.7, 1012.35, 500.50);

INSERT INTO Measurements (SensorName, Temperature, Humidity, Pressure, Altitude)
VALUES ('Sensor2', 24.3, 50.1, 1010.25, 520.75);
```

### Querying Data with Float Fields

You can query float fields using various functions and operators.

#### Selecting Records Based on Float Values

```sql
SELECT * FROM Measurements
WHERE Temperature > 24.0;
```

#### Calculating Averages

You can calculate the average value of a float field using the `AVG()` function.

```sql
SELECT AVG(Temperature) AS AvgTemperature,
       AVG(Humidity) AS AvgHumidity,
       AVG(Pressure) AS AvgPressure,
       AVG(Altitude) AS AvgAltitude
FROM Measurements;
```

### Updating Float Fields

You can update float fields using the `UPDATE` statement.

#### Example

```sql
UPDATE Measurements
SET Temperature = 25.0,
    Humidity = 55.0,
    Pressure = 1015.00,
    Altitude = 530.75
WHERE SensorName = 'Sensor1';
```

### Deleting Data Based on Float Fields

You can delete records based on float conditions.

#### Example

```sql
DELETE FROM Measurements
WHERE Humidity < 50.0;
```

### Practical Examples and Use Cases

#### Calculating Maximum and Minimum Values

You can find the maximum and minimum values of float fields using the `MAX()` and `MIN()` functions.

##### Example: Finding Maximum and Minimum Temperature and Humidity

```sql
SELECT MAX(Temperature) AS MaxTemperature,
       MIN(Temperature) AS MinTemperature,
       MAX(Humidity) AS MaxHumidity,
       MIN(Humidity) AS MinHumidity
FROM Measurements;
```

#### Grouping Data and Calculating Summaries

You can group data by a field and calculate summaries like average, sum, maximum, and minimum values.

##### Example: Grouping by Sensor and Calculating Averages

```sql
SELECT SensorName, 
       AVG(Temperature) AS AvgTemperature,
       AVG(Humidity) AS AvgHumidity,
       AVG(Pressure) AS AvgPressure,
       AVG(Altitude) AS AvgAltitude
FROM Measurements
GROUP BY SensorName;
```

### Handling Precision and Rounding

Floating-point numbers can have precision issues. You can use functions like `ROUND()` to manage precision and rounding.

##### Example: Rounding Float Values

```sql
SELECT SensorName, 
       ROUND(Temperature, 2) AS RoundedTemperature,
       ROUND(Humidity, 1) AS RoundedHumidity
FROM Measurements;
```

### Using Float Fields in Calculations

You can use float fields in mathematical calculations to perform complex queries.

##### Example: Calculating Heat Index

The heat index can be calculated using temperature and humidity values.

```sql
SELECT SensorName, 
       Temperature, 
       Humidity, 
       0.5 * (Temperature + 61.0 + ((Temperature-68.0)*1.2) + (Humidity*0.094)) AS HeatIndex
FROM Measurements;
```

### Handling NULL Values

Float fields can be `NULL` if no value is provided. You can check for `NULL` values using the `IS NULL` or `IS NOT NULL` operators.

##### Example: Inserting and Checking for NULL Values

```sql
INSERT INTO Measurements (SensorName, Temperature, Humidity, Pressure, Altitude)
VALUES ('Sensor3', NULL, 55.2, 1015.10, NULL);

SELECT * FROM Measurements
WHERE Temperature IS NULL;
```

### Using Float Fields in Complex Queries

You can use float fields in complex queries to perform advanced data analysis.

##### Example: Calculating the Difference Between Two Float Fields

```sql
SELECT SensorName, 
       Temperature, 
       Humidity, 
       (Humidity - Temperature) AS HumidityTemperatureDifference
FROM Measurements;
```

### Summary

In MySQL, float types are managed using the `FLOAT`, `DOUBLE`, and `DECIMAL` data types. You can create tables with float fields, insert and query data, update and delete records based on float values, and perform various calculations and summaries using aggregate functions. These operations are essential for managing and analyzing numeric data with decimal precision in MySQL.

These examples demonstrate how to effectively use float types in MySQL. If you have more specific queries or need further examples, feel free to ask! ✔️
