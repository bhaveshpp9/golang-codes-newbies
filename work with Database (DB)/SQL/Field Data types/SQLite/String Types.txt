\\ work with database(DB) — SQL — Field data types — SQLite — String Types

### SQLite String Data Types

In SQLite, data types are dynamic and more relaxed compared to other SQL databases. SQLite uses a type system called "manifest typing," where the type is associated with the value itself rather than the column. This approach offers flexibility but requires understanding the mapping of string data types. Here’s a guide to handling string types in SQLite:

#### Primary String Data Types in SQLite

1. **TEXT**
   - **Description**: General-purpose text storage.
   - **Usage**: For storing any text or string data.
   - **Examples**:
     ```sql
     CREATE TABLE users (
         id INTEGER PRIMARY KEY,
         name TEXT,
         email TEXT
     );
     ```

2. **CHARACTER(n) or CHAR(n)**
   - **Description**: Fixed-length string.
   - **Usage**: Pads or truncates the string to ensure it is exactly `n` characters long.
   - **Examples**:
     ```sql
     CREATE TABLE products (
         id INTEGER PRIMARY KEY,
         code CHAR(10)
     );
     ```
   - **Note**: Rarely used in SQLite due to the dynamic nature of storage.

3. **VARCHAR(n) or VARYING CHARACTER(n)**
   - **Description**: Variable-length string with a specified maximum length.
   - **Usage**: Stores a string up to `n` characters, but SQLite doesn't enforce the length constraint.
   - **Examples**:
     ```sql
     CREATE TABLE customers (
         id INTEGER PRIMARY KEY,
         username VARCHAR(50)
     );
     ```

#### Type Affinity

SQLite doesn't enforce strict type checking. Instead, it uses type affinity to determine how data is stored:
- **TEXT Affinity**: Columns declared with any of the above string types (TEXT, CHAR, VARCHAR) or names containing “CHAR” or “CLOB” have TEXT affinity.
- **Storage**: Regardless of the declared type, the storage is flexible. You can store numbers, strings, or even blobs in any column.

#### Practical Considerations

1. **Flexibility**: You can declare a column with any of the string types, but SQLite stores and retrieves the data as TEXT.
   - **Example**: A column declared as `VARCHAR(255)` will behave the same as `TEXT`.

2. **Column Constraints**:
   - **Length Constraints**: SQLite doesn't enforce length constraints on `CHAR(n)` or `VARCHAR(n)`. You can store strings longer than `n` characters without an error.
   - **Check Constraints**: You can use check constraints to enforce length if needed.
     ```sql
     CREATE TABLE customers (
         id INTEGER PRIMARY KEY,
         username TEXT CHECK(length(username) <= 50)
     );
     ```

3. **Unicode Support**:
   - **SQLite**: Supports storing UTF-8 or UTF-16 encoded text.
   - **Practical Usage**: Ideal for international text storage.

#### Example of Table Creation

```sql
CREATE TABLE books (
    id INTEGER PRIMARY KEY,
    title TEXT NOT NULL,
    author VARCHAR(100),
    isbn CHAR(13)
);
```
- **title**: General text, required.
- **author**: Variable length, up to 100 characters.
- **isbn**: Fixed length, 13 characters (length constraint is not enforced by SQLite).

#### Summary

- Use `TEXT` for general-purpose text storage.
- Use `CHAR(n)` and `VARCHAR(n)` for compatibility or to signify intent, but remember SQLite treats them as `TEXT`.
- SQLite’s flexibility in data types can be powerful but also requires careful handling to maintain data integrity and readability in your schema design.

Feel free to ask more about specific use cases or scenarios involving SQLite string types!
