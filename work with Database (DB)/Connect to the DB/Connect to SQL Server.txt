\\ work with database(DB) — Connect to the DB — Connect to SQL Server


To connect to a Microsoft SQL Server database in Go, you can use the `github.com/denisenkom/go-mssqldb` package, which is a driver for Microsoft SQL Server for the `database/sql` package. Below are the steps to connect to a SQL Server database, execute a query, and retrieve the results.

### Example: Connecting to a SQL Server Database

Let's create an example where we connect to a SQL Server database and execute a simple query.

#### Step 1: Install the SQL Server Driver

First, install the SQL Server driver package using `go get`.

```sh
go get github.com/denisenkom/go-mssqldb
```

#### Step 2: Import Necessary Packages

Next, import the necessary packages in your Go code.

```go
package main

import (
    "database/sql"
    "fmt"
    _ "github.com/denisenkom/go-mssqldb" // Import the SQL Server driver
)
```

#### Step 3: Define the Function to Connect to the SQL Server Database

Create a function that connects to the SQL Server database and executes a simple query.

```go
// Function to connect to the SQL Server database and execute a query
func connectAndQueryDB(dsn string) error {
    // Open a connection to the database
    db, err := sql.Open("sqlserver", dsn)
    if err != nil {
        return fmt.Errorf("failed to connect to database: %w", err)
    }
    defer db.Close()

    // Test the database connection
    err = db.Ping()
    if err != nil {
        return fmt.Errorf("failed to ping database: %w", err)
    }

    // Execute a simple query
    query := "SELECT id, name FROM example"
    rows, err := db.Query(query)
    if err != nil {
        return fmt.Errorf("failed to execute query: %w", err)
    }
    defer rows.Close()

    // Print the retrieved data
    fmt.Println("Data retrieved from the database:")
    for rows.Next() {
        var id int
        var name string
        err := rows.Scan(&id, &name)
        if err != nil {
            return fmt.Errorf("failed to scan row: %w", err)
        }
        fmt.Printf("ID: %d, Name: %s\n", id, name)
    }

    // Check for errors after iterating through the rows
    if err := rows.Err(); err != nil {
        return fmt.Errorf("error iterating through rows: %w", err)
    }

    return nil
}
```

#### Step 4: Use the Function

Finally, use the `connectAndQueryDB` function in the `main` function to connect to the SQL Server database and execute a query.

```go
func main() {
    // Data Source Name (DSN) for the SQL Server database
    // Format: sqlserver://username:password@host:port?database=dbname
    dsn := "sqlserver://username:password@localhost:1433?database=dbname"

    // Connect to the database and execute the query
    err := connectAndQueryDB(dsn)
    if err != nil {
        fmt.Printf("Error: %v\n", err)
    }
}
```

### Explanation

1. **Install the SQL Server Driver**:
   - Use `go get` to install the `github.com/denisenkom/go-mssqldb` package, which is a SQL Server driver for Go.

2. **Import Necessary Packages**:
   - The `database/sql` package is used for database operations.
   - The `_ "github.com/denisenkom/go-mssqldb"` import is a side-effect import that registers the SQL Server driver with the `database/sql` package.

3. **Define the `connectAndQueryDB` Function**:
   - The function takes a Data Source Name (DSN) as input.
   - It uses the `sql.Open` function to open a connection to the SQL Server database.
   - It verifies the connection using the `db.Ping` method.
   - It executes a simple query to retrieve data from the `example` table.
   - It iterates through the result set and prints the retrieved data.
   - It checks for errors encountered during iteration using `rows.Err`.

4. **Use the Function in `main`**:
   - In `main`, the DSN for the SQL Server database is defined.
   - The `connectAndQueryDB` function is called to connect to the SQL Server database and execute the query.

### Detailed Output

The program will connect to the SQL Server database, execute the SQL query to retrieve data from the `example` table, and print the retrieved data. For example:

```
Data retrieved from the database:
ID: 1, Name: Alice
ID: 2, Name: Bob
ID: 3, Name: Charlie
```

### Summary

In Go, you can connect to a SQL Server database using the `github.com/denisenkom/go-mssqldb` package with the `database/sql` package. By defining functions to handle database connections and query execution, you can efficiently manage database operations in your applications. This approach is useful for tasks such as connecting to a database, executing queries, and retrieving data.