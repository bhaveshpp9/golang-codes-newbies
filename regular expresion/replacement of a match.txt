\\ Regular expressions â€” replacement of a match


In Go, you can use the `regexp` package to perform replacements on strings that match a given regular expression pattern. The `regexp` package provides several functions for this purpose, such as `ReplaceAllString` and `ReplaceAllStringFunc`. These functions allow you to replace matching substrings with specified replacements or dynamically generated replacements.

### Example: Replacement of a Match

Let's create an example where we use regular expressions to find and replace parts of a string.

#### Example Code

```go
package main

import (
    "fmt"
    "regexp"
)

func main() {
    // Define the pattern to match email addresses
    pattern := `([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})`

    // Compile the regular expression
    re, err := regexp.Compile(pattern)
    if err != nil {
        fmt.Println("Error compiling regex:", err)
        return
    }

    // Define a test string
    text := "Contact us at support@example.com or sales@example.org."

    // Replace all email addresses with a placeholder
    replaced := re.ReplaceAllString(text, "[REDACTED]")
    fmt.Println("Replaced Text:", replaced)

    // Use ReplaceAllStringFunc to replace email addresses with dynamic values
    replacedFunc := re.ReplaceAllStringFunc(text, func(match string) string {
        return fmt.Sprintf("[EMAIL: %s]", match)
    })
    fmt.Println("Replaced Text with Function:", replacedFunc)
}
```

### Explanation

1. **Pattern Definition**: We define a regex pattern to match email addresses:
   - `([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})`: This pattern matches common email addresses.
2. **Compile**: We compile the regex pattern using `regexp.Compile`. This returns a `Regexp` object, or an error if the pattern is invalid.
3. **Test String**: We define a test string that contains email addresses.
4. **ReplaceAllString**: We use `ReplaceAllString` to replace all matches of the pattern with the string `"[REDACTED]"`.
5. **ReplaceAllStringFunc**: We use `ReplaceAllStringFunc` to replace all matches of the pattern with dynamic values generated by a function. In this case, the function wraps each