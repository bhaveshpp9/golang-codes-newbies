\\ Algorithms — Sorting — Quick Sort

Quick sort is a highly efficient sorting algorithm and is based on partitioning an array into smaller sub-arrays. The steps involve selecting a 'pivot' element from the array and partitioning the other elements into those that are less than the pivot and those greater than the pivot. Quick sort then recursively sorts the sub-arrays. This algorithm is popular due to its average-case performance of \(O(n \log n)\), though its worst-case performance is \(O(n^2)\).

Here is an implementation of quick sort in Go:

```go
package main

import (
	"fmt"
)

// partition rearranges the elements in the array so that all elements less than the pivot are on the left,
// and all elements greater are on the right.
func partition(data []int, low, high int) int {
	pivot := data[high]  // Taking the last element as pivot
	i := low - 1         // Index of smaller element

	for j := low; j < high; j++ {
		// If current element is smaller than or equal to pivot
		if data[j] <= pivot {
			i++    // increment index of smaller element
			data[i], data[j] = data[j], data[i]  // Swap elements
		}
	}
	data[i+1], data[high] = data[high], data[i+1]
	return i + 1
}

// quickSort recursively sorts the elements in the array using the quick sort algorithm.
func quickSort(data []int, low, high int) {
	if low < high {
		pi := partition(data, low, high)  // pi is partitioning index

		quickSort(data, low, pi-1)   // Recursively sort the elements before partition
		quickSort(data, pi+1, high)  // Recursively sort the elements after partition
	}
}

func main() {
	data := []int{10, 80, 30, 90, 40, 50, 70}
	fmt.Println("Original array:", data)
	quickSort(data, 0, len(data)-1)
	fmt.Println("Sorted array:", data)
}
```

### Explanation:
- **Partition Function**: This function takes three arguments—the array, a low index, and a high index. It chooses the element at `high` as the pivot and rearranges the array so that elements less than the pivot come before it and elements greater come after it.
- **Recursive Sort**: The `quickSort` function calls itself recursively for the sub-array to the left of the pivot and the sub-array to the right of the pivot.
- **Base Case**: The recursion ends when the sub-array has less than two elements (when `low` is not less than `high`), which naturally occurs as the size of the sub-arrays decreases with each recursive call.

Quick sort is often chosen over merge sort for arrays because it has a smaller memory footprint and exhibits good cache locality, making it faster in many practical scenarios. However, the choice of pivot can affect performance significantly, particularly in the worst case when the smallest or largest element is consistently chosen as the pivot.