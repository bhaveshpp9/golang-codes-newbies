\\ Algorithms â€” Search â€” Interpolation search


Interpolation search is an algorithm for searching for a specified value (key) in an array that is sorted. The interpolation search algorithm is an improved variant of binary search. It works on the premise that the key value is uniformly distributed across the array, allowing it to potentially find elements faster by guessing where the next probe should happen based on the distribution of values.

Here's a basic implementation of interpolation search in Go, applied to a sorted slice of integers:

```go


package main

import (
	"fmt"
)

// interpolationSearch performs an interpolation search on a sorted slice `data` looking for `target`.
// Returns the index of `target` if found, otherwise returns -1.
func interpolationSearch(data []int, target int) int {
	low, high := 0, len(data)-1

	for low <= high && target >= data[low] && target <= data[high] {
		if low == high {
			if data[low] == target {
				return low
			}
			return -1
		}

		// Estimate the position using the interpolation formula
		pos := low + int((float64(high-low) / float64(data[high]-data[low])) * float64(target-data[low]))

		// Check if the guessed position is correct
		if data[pos] == target {
			return pos
		}

		// If the target is larger, target is in upper part
		if data[pos] < target {
			low = pos + 1
		} else { // If the target is smaller, target is in lower part
			high = pos - 1
		}
	}

	return -1
}

func main() {
	data := []int{10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47}
	target := 22
	result := interpolationSearch(data, target)

	if result != -1 {
		fmt.Printf("Element %d found at index %d\n", target, result)
	} else {
		fmt.Println("Element not found")
	}
}
```

### Explanation
- **Position Estimation**: The position where the search should continue is estimated using a formula based on linear interpolation. The assumption here is that the elements are uniformly distributed.
- **Midpoint Calculation**: Instead of simply calculating the midpoint as in binary search, interpolation search estimates the position (`pos`) based on the proportionate difference.
- **Element Check**: If the element at the estimated position matches the target, it's returned immediately.
- **Adjust Search Range**: Depending on whether the target is greater or less than the value at `pos`, the search range is adjusted either to the right (`low = pos + 1`) or to the left (`high = pos - 1`).
- **Bounds Checking**: The loop continues as long as `low` is less than or equal to `high` and the target is within the bounds of `data[low]` and `data[high]`.

Interpolation search is very efficient for uniformly distributed data. However, its performance might degrade to that of a linear search in the worst case (where elements are not uniformly distributed). If you need adaptations for different distributions or non-integer data types, feel free to ask! ðŸš€