\\ Algorithms â€” Search â€” Binary Search


Certainly! Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed the possible locations to just one.

Hereâ€™s a basic example of how you might implement binary search in Go for a sorted slice of integers:

```go
package main

import (
	"fmt"
)

// binarySearch performs a binary search on a sorted slice `data` looking for `target`
// Returns the index of `target` if found, otherwise returns -1
func binarySearch(data []int, target int) int {
	low := 0
	high := len(data) - 1

	for low <= high {
		mid := low + (high-low)/2 // This helps prevent overflow in other languages
		midValue := data[mid]

		if midValue == target {
			return mid
		} else if midValue < target {
			low = mid + 1
		} else {
			high = mid - 1
		}
	}
	return -1
}

func main() {
	data := []int{2, 3, 4, 10, 15, 18, 23, 34, 45, 56, 67, 78, 89}
	target := 34
	result := binarySearch(data, target)

	if result != -1 {
		fmt.Printf("Element %d found at index %d\n", target, result)
	} else {
		fmt.Println("Element not found")
	}
}
```

### Explanation
- **Initialization**: The `binarySearch` function starts with initializing two pointers, `low` and `high`, which represent the current bounds within the data that we are searching.
- **Loop until bounds overlap**: The `while` loop continues as long as `low` is less than or equal to `high`. Each iteration potentially halves the search space.
- **Calculate mid point**: We find the middle index by taking the average of `low` and `high`, adjusted to avoid integer overflow which can be a problem in other languages but is generally safe in Go for practical array sizes.
- **Element comparison**: Depending on whether the element at the mid index is less than, greater than, or equal to the target, the search space is adjusted. If the element is equal, the index is returned immediately.
- **Return**: If the loop ends without finding the target (when `low` exceeds `high`), the function returns -1 indicating the target is not in the array.

This example should give you a solid foundation for implementing binary search in your Go projects. If you need it adapted for other types of data or more complex conditions, just let me know! ðŸ”¨ðŸ¤–ðŸ”§