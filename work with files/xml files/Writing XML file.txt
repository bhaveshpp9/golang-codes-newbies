\\ work with files — XMLfiles — Writing XML file

Writing an XML file in Go can be done using the `encoding/xml` package, which provides functions to marshal Go data structures into XML format and write them to a file.

### Example: Writing an XML File

Let's create an example where we define a function to write a list of books to an XML file.

#### Step 1: Import Necessary Packages

First, import the necessary packages.

```go
package main

import (
    "encoding/xml"
    "fmt"
    "os"
)
```

#### Step 2: Define the XML Structure

Define the Go data structures that correspond to the XML elements. For example, we will use the same structure as in the reading example:

```go
// Book represents a book in the XML file
type Book struct {
    Title  string `xml:"title"`
    Author string `xml:"author"`
    Year   int    `xml:"year"`
}

// Library represents the library containing books
type Library struct {
    XMLName xml.Name `xml:"library"`
    Books   []Book   `xml:"book"`
}
```

#### Step 3: Define the Function to Write the XML File

Create a function that takes a file path and a `Library` struct as inputs and writes the data to the XML file.

```go
// Function to write a Library to an XML file
func writeXMLFile(filePath string, library Library) error {
    // Create the file for writing
    file, err := os.Create(filePath)
    if err != nil {
        return err
    }
    defer file.Close()

    // Create a new XML encoder
    encoder := xml.NewEncoder(file)
    encoder.Indent("", "  ")

    // Encode the Library struct into the XML file
    err = encoder.Encode(library)
    if err != nil {
        return err
    }

    fmt.Printf("Successfully wrote XML to file: %s\n", filePath)
    return nil
}
```

#### Step 4: Use the Function

Finally, use the `writeXMLFile` function in the `main` function to write data to an XML file.

```go
func main() {
    // Define the library with some books
    library := Library{
        Books: []Book{
            {Title: "The Go Programming Language", Author: "Alan A. A. Donovan", Year: 2015},
            {Title: "Learning Go", Author: "Jon Bodner", Year: 2021},
        },
    }

    // File path to write to
    filePath := "library.xml"

    // Write the library to the XML file
    err := writeXMLFile(filePath, library)
    if err != nil {
        fmt.Printf("Failed to write XML file: %v\n", err)
        return
    }
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `os` package is used for file operations.
   - The `encoding/xml` package is used for encoding Go values into XML format.

2. **Define the XML Structure**:
   - The `Book` struct represents a book in the XML file with fields for the title, author, and year.
   - The `Library` struct represents the library containing books, with a slice of `Book` structs and an `xml.Name` field to set the XML root element name.

3. **Define the `writeXMLFile` Function**:
   - The function takes a file path and a `Library` struct as inputs.
   - It creates the file for writing using `os.Create`.
   - It creates a new XML encoder using `xml.NewEncoder`.
   - It sets the indentation for the XML output using `encoder.Indent`.
   - It encodes the `Library` struct into the XML file using `encoder.Encode`.
   - It prints a success message if the XML is written successfully.

4. **Use the Function in `main`**:
   - In `main`, the `Library` struct is defined with some books.
   - The `writeXMLFile` function is called to write the data to the XML file, and the result is printed.

### Detailed Output

The program will write the specified data to `library.xml` and print the result. The contents of `library.xml` will be:

```xml
<library>
  <book>
    <title>The Go Programming Language</title>
    <author>Alan A. A. Donovan</author>
    <year>2015</year>
  </book>
  <book>
    <title>Learning Go</title>
    <author>Jon Bodner</author>
    <year>2021</year>
  </book>
</library>
```

### Summary

In Go, you can write data to an XML file using the `encoding/xml` package. By defining Go structs that correspond to the XML elements and using the `xml.NewEncoder` function, you can efficiently encode Go data structures into XML format and write them to a file. This approach is useful for tasks such as generating XML configuration files, exporting data in XML format, and creating XML documents in your applications.