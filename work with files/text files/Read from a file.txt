\\ work with files — Text files — Read from a file

Reading text from a file in Go can be done using the `os` and `bufio` packages. The `os` package provides basic file operations, while the `bufio` package provides buffered I/O which can improve performance and provide convenient methods for reading text.

### Example: Reading Text from a File

Let's create an example where we read the contents of a text file line by line.

#### Step 1: Import Necessary Packages

First, import the necessary packages.

```go
package main

import (
    "bufio"
    "fmt"
    "os"
)
```

#### Step 2: Define the Function to Read Text from a File

Create a function that takes a file path as input and reads the contents of the file.

```go
// Function to read text from a file
func readTextFromFile(filePath string) ([]string, error) {
    // Open the file for reading
    file, err := os.Open(filePath)
    if err != nil {
        return nil, err
    }
    defer file.Close()

    // Create a scanner to read the file line by line
    scanner := bufio.NewScanner(file)

    // Slice to hold the lines
    var lines []string

    // Read each line and append to the slice
    for scanner.Scan() {
        lines = append(lines, scanner.Text())
    }

    // Check for errors during scanning
    if err := scanner.Err(); err != nil {
        return nil, err
    }

    return lines, nil
}
```

#### Step 3: Use the Function

Finally, use the `readTextFromFile` function in the `main` function to read text from a file and print it.

```go
func main() {
    // File path to read from
    filePath := "example.txt"

    // Read the text from the file
    lines, err := readTextFromFile(filePath)
    if err != nil {
        fmt.Printf("Failed to read text from file: %v\n", err)
        return
    }

    // Print the lines read from the file
    fmt.Println("Text read from file:")
    for _, line := range lines {
        fmt.Println(line)
    }
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `os` package is used for basic file operations.
   - The `bufio` package provides buffered I/O operations and the `Scanner` type for reading text.

2. **Define the `readTextFromFile` Function**:
   - The function takes a file path as input.
   - It opens the file for reading using `os.Open`.
   - It creates a `Scanner` to read the file line by line.
   - It reads each line and appends it to a slice.
   - It checks for any errors that occurred during scanning.
   - It returns the slice of lines read from the file.

3. **Use the Function in `main`**:
   - In `main`, the path for the text file is defined.
   - The `readTextFromFile` function is called to read the text from the file, and the result is printed.

### Detailed Output

The program will read the contents of `example.txt` and print each line. For example, if `example.txt` contains:

```
Hello, world!
This is an example file.
It contains multiple lines of text.
```

The output will be:

```
Text read from file:
Hello, world!
This is an example file.
It contains multiple lines of text.
```

### Summary

In Go, you can read text from a file using the `os` and `bufio` packages. By defining a function to handle file reading and using a `Scanner` to read the file line by line, you can efficiently read and process text files. This approach is useful for tasks such as reading configuration files, processing text data, and loading text resources in your applications.