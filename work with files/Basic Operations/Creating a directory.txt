\\ work with files — Basic Operations — Creating a directory


Creating a directory in Go can be done using the `os.Mkdir` or `os.MkdirAll` functions from the `os` package. The `os.Mkdir` function creates a single directory, whereas `os.MkdirAll` creates a directory along with any necessary parents that do not exist.

### Example: Creating a Directory

Let's create an example where we define a function to create a directory. We'll use both `os.Mkdir` and `os.MkdirAll` to demonstrate their usage.

#### Step 1: Import Necessary Packages

First, import the necessary package.

```go
package main

import (
    "fmt"
    "os"
)
```

#### Step 2: Define Functions to Create a Directory

Create functions to create a single directory and to create a directory with necessary parents.

```go
// Function to create a single directory
func createSingleDirectory(path string) error {
    err := os.Mkdir(path, os.ModePerm)
    if err != nil {
        return err
    }
    fmt.Printf("Successfully created directory: %s\n", path)
    return nil
}

// Function to create a directory along with necessary parents
func createNestedDirectories(path string) error {
    err := os.MkdirAll(path, os.ModePerm)
    if err != nil {
        return err
    }
    fmt.Printf("Successfully created nested directories: %s\n", path)
    return nil
}
```

#### Step 3: Use the Functions

Finally, use the functions in the `main` function to create directories.

```go
func main() {
    // Path for a single directory
    singleDir := "example_dir"

    // Path for nested directories
    nestedDir := "parent_dir/child_dir/grandchild_dir"

    // Create a single directory
    if err := createSingleDirectory(singleDir); err != nil {
        fmt.Printf("Failed to create directory: %v\n", err)
    }

    // Create nested directories
    if err := createNestedDirectories(nestedDir); err != nil {
        fmt.Printf("Failed to create nested directories: %v\n", err)
    }
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `os` package is used for file operations.

2. **Define Functions**:
   - `createSingleDirectory` function:
     - Takes a path as input.
     - Uses `os.Mkdir` to create a single directory.
     - Prints a success message if the directory is created.
   - `createNestedDirectories` function:
     - Takes a path as input.
     - Uses `os.MkdirAll` to create the directory along with any necessary parents.
     - Prints a success message if the directories are created.

3. **Use the Functions in `main`**:
   - In `main`, paths for a single directory and nested directories are defined.
   - The `createSingleDirectory` and `createNestedDirectories` functions are called to create the directories, and the results are printed.

### Detailed Output

The program will create the specified directories and print the results. For example:

```
Successfully created directory: example_dir
Successfully created nested directories: parent_dir/child_dir/grandchild_dir
```

### Summary

In Go, you can create directories using the `os.Mkdir` and `os.MkdirAll` functions. The `os.Mkdir` function creates a single directory, while the `os.MkdirAll` function creates a directory along with any necessary parent directories. By defining functions to handle directory creation, you can efficiently manage your file system structure in your applications. This approach is useful for preparing directories for file storage, organizing resources, or setting up initial directory structures for applications.