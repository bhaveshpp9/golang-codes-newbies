\\ work with files — Basic Operations — List of files in the directory

To list the files in a directory in Go, you can use the `os` and `path/filepath` packages. The `os` package provides functions for reading directories, and the `path/filepath` package provides utilities for working with file paths.

### Example: Listing Files in a Directory

Let's create an example where we define a function to list all files in a specified directory.

#### Step 1: Import Necessary Packages

First, import the necessary packages.

```go
package main

import (
    "fmt"
    "os"
    "path/filepath"
)
```

#### Step 2: Define the Function to List Files in a Directory

Create a function that takes a directory path as input and lists all files in the directory.

```go
// Function to list files in a directory
func listFilesInDirectory(dirPath string) ([]string, error) {
    var files []string

    // Read the directory
    entries, err := os.ReadDir(dirPath)
    if err != nil {
        return nil, err
    }

    // Iterate over the directory entries
    for _, entry := range entries {
        if !entry.IsDir() {
            files = append(files, entry.Name())
        }
    }

    return files, nil
}
```

#### Step 3: Use the Function

Finally, use the `listFilesInDirectory` function in the `main` function to list all files in a directory.

```go
func main() {
    // Directory path to list files for
    dirPath := "example_directory"

    // Get the list of files in the directory
    files, err := listFilesInDirectory(dirPath)
    if err != nil {
        fmt.Printf("Failed to list files: %v\n", err)
        return
    }

    // Print the list of files
    fmt.Println("Files in directory:", dirPath)
    for _, file := range files {
        fmt.Println(file)
    }
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `os` package is used for file operations.
   - The `path/filepath` package is used for path manipulations.

2. **Define the `listFilesInDirectory` Function**:
   - The function takes a directory path as input.
   - It uses `os.ReadDir` to read the directory and get a list of directory entries.
   - It iterates over the directory entries and adds the names of files (not directories) to a list.
   - It returns the list of file names.

3. **Use the Function in `main`**:
   - In `main`, the path for the directory is defined.
   - The `listFilesInDirectory` function is called to get the list of files in the directory, and the result is printed.

### Detailed Output

The program will list all files in `example_directory` and print the results. For example:

```
Files in directory: example_directory
file1.txt
file2.txt
file3.txt
```

### Example: Listing All Files in a Directory and Subdirectories

If you want to list all files in a directory and its subdirectories, you can use the `filepath.WalkDir` function from the `path/filepath` package.

```go
// Function to list all files in a directory and its subdirectories
func listAllFiles(dirPath string) ([]string, error) {
    var files []string

    // Walk the directory
    err := filepath.WalkDir(dirPath, func(path string, d os.DirEntry, err error) error {
        if err != nil {
            return err
        }

        if !d.IsDir() {
            files = append(files, path)
        }

        return nil
    })

    return files, err
}
```

#### Use the Function

```go
func main() {
    // Directory path to list files for
    dirPath := "example_directory"

    // Get the list of all files in the directory and its subdirectories
    files, err := listAllFiles(dirPath)
    if err != nil {
        fmt.Printf("Failed to list files: %v\n", err)
        return
    }

    // Print the list of files
    fmt.Println("All files in directory and subdirectories:", dirPath)
    for _, file := range files {
        fmt.Println(file)
    }
}
```

### Explanation

1. **Define the `listAllFiles` Function**:
   - The function takes a directory path as input.
   - It uses `filepath.WalkDir` to recursively walk through the directory and its subdirectories.
   - It adds the paths of all files (not directories) to a list.
   - It returns the list of file paths.

2. **Use the Function in `main`**:
   - In `main`, the path for the directory is defined.
   - The `listAllFiles` function is called to get the list of all files in the directory and its subdirectories, and the result is printed.

### Detailed Output

The program will list all files in `example_directory` and its subdirectories and print the results. For example:

```
All files in directory and subdirectories: example_directory
example_directory/file1.txt
example_directory/subdir1/file2.txt
example_directory/subdir2/file3.txt
```

### Summary

In Go, you can list files in a directory using the `os.ReadDir` function. To list files in a directory and its subdirectories, you can use the `filepath.WalkDir` function. These approaches allow you to efficiently manage and inspect files in your applications, making it easy to perform tasks such as logging file information, processing files, and organizing resources.