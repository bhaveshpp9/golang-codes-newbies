\\ work with files — Basic Operations — Copy a directory


To copy a directory in Go, you need to recursively traverse the source directory and copy each file and subdirectory to the destination directory. This involves creating the directory structure at the destination and copying files individually.

### Example: Copy a Directory

Let's create an example where we define a function to copy a directory and its contents to a new location.

#### Step 1: Import Necessary Packages

First, import the necessary packages.

```go
package main

import (
    "fmt"
    "io"
    "os"
    "path/filepath"
)
```

#### Step 2: Define Helper Functions to Copy Files and Directories

Create helper functions to copy files and directories.

```go
// Function to copy a file
func copyFile(srcFile, destFile string) error {
    src, err := os.Open(srcFile)
    if err != nil {
        return err
    }
    defer src.Close()

    dest, err := os.Create(destFile)
    if err != nil {
        return err
    }
    defer dest.Close()

    _, err = io.Copy(dest, src)
    return err
}

// Function to copy a directory
func copyDirectory(srcDir, destDir string) error {
    // Ensure the destination directory exists
    err := os.MkdirAll(destDir, os.ModePerm)
    if err != nil {
        return err
    }

    // Walk the source directory
    err = filepath.Walk(srcDir, func(path string, info os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        // Determine the destination path
        relPath, err := filepath.Rel(srcDir, path)
        if err != nil {
            return err
        }
        destPath := filepath.Join(destDir, relPath)

        // Create directories as needed
        if info.IsDir() {
            return os.MkdirAll(destPath, info.Mode())
        }

        // Copy the file
        return copyFile(path, destPath)
    })
    return err
}
```

#### Step 3: Use the Function

Finally, use the `copyDirectory` function in the `main` function to copy a directory.

```go
func main() {
    // Source and destination directories
    srcDir := "source_directory"
    destDir := "destination_directory"

    // Copy the directory
    if err := copyDirectory(srcDir, destDir); err != nil {
        fmt.Printf("Failed to copy directory: %v\n", err)
        return
    }

    fmt.Printf("Successfully copied directory from %s to %s\n", srcDir, destDir)
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `io` and `os` packages are used for file operations.
   - The `path/filepath` package is used for path manipulations and directory traversal.

2. **Define Helper Functions**:
   - The `copyFile` function opens the source file and creates the destination file, copying the contents from the source to the destination.
   - The `copyDirectory` function ensures the destination directory exists, then recursively traverses the source directory using `filepath.Walk`. For each file and directory, it determines the corresponding destination path and either creates a directory or copies a file as needed.

3. **Use the Function in `main`**:
   - In `main`, the source and destination directories are defined.
   - The `copyDirectory` function is called to copy the source directory to the destination, and the result is printed.

### Detailed Output

The program will copy the contents of `source_directory` to `destination_directory` and print the result. For example:

```
Successfully copied directory from source_directory to destination_directory
```

### Summary

In Go, you can copy a directory and its contents by recursively traversing the source directory and copying each file and subdirectory to the destination directory. By defining helper functions to handle file copying and directory creation, you can efficiently replicate the directory structure and contents. This approach is useful for tasks such as creating backups, duplicating directories, or moving resources within your applications.