\\ work with files — Archives — Unpacking a zip file


Unpacking a zip file in Go involves using the `archive/zip` package to read and extract the files from the zip archive. Below is an example demonstrating how to unpack a zip file.

### Example: Unpacking a Zip File

Let's create an example where we define a function to unpack files from a zip archive.

#### Step 1: Import Necessary Packages

First, import the necessary packages.

```go
package main

import (
    "archive/zip"
    "fmt"
    "io"
    "os"
    "path/filepath"
)
```

#### Step 2: Define a Function to Unpack Files from the Zip Archive

Create a function that takes the path to a zip file and a destination directory, and extracts all files in the zip archive to the destination.

```go
// Function to unpack files from a zip archive
func unpackZipFile(zipFilePath, destDir string) error {
    // Open the zip file
    r, err := zip.OpenReader(zipFilePath)
    if err != nil {
        return err
    }
    defer r.Close()

    // Ensure the destination directory exists
    os.MkdirAll(destDir, os.ModePerm)

    // Iterate through each file in the zip archive
    for _, file := range r.File {
        // Construct the full path for the destination file
        destPath := filepath.Join(destDir, file.Name)

        // Check if the file is a directory
        if file.FileInfo().IsDir() {
            // Create the directory
            os.MkdirAll(destPath, os.ModePerm)
            continue
        }

        // Ensure the directory for the file exists
        os.MkdirAll(filepath.Dir(destPath), os.ModePerm)

        // Create the destination file
        outFile, err := os.OpenFile(destPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, file.Mode())
        if err != nil {
            return err
        }

        // Open the file in the zip archive
        rc, err := file.Open()
        if err != nil {
            outFile.Close()
            return err
        }

        // Copy the file content to the destination file
        _, err = io.Copy(outFile, rc)

        // Close both files
        outFile.Close()
        rc.Close()

        if err != nil {
            return err
        }
    }
    return nil
}
```

#### Step 3: Use the Function

Finally, use the `unpackZipFile` function in the `main` function to unpack a zip file.

```go
func main() {
    // Path to the zip file
    zipFilePath := "archive.zip"

    // Destination directory
    destDir := "unpacked_files"

    // Unpack the zip file
    if err := unpackZipFile(zipFilePath, destDir); err != nil {
        fmt.Printf("Failed to unpack zip file: %v\n", err)
        return
    }

    fmt.Printf("Successfully unpacked zip file to: %s\n", destDir)
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `archive/zip` package is used to read from zip archives.
   - The `io`, `os`, and `path/filepath` packages are used for file handling and path manipulation.

2. **Define `unpackZipFile` Function**:
   - This function takes the path to a zip file and a destination directory.
   - It opens the zip file using `zip.OpenReader`.
   - It ensures that the destination directory and necessary subdirectories exist.
   - It iterates through each file in the zip archive, checks if the file is a directory, and creates directories as needed.
   - It extracts files by creating corresponding destination files and copying the content from the zip archive.

3. **Use the Function in `main`**:
   - In `main`, the path to the zip file and the destination directory are defined.
   - The `unpackZipFile` function is called to extract the files from the zip archive, and the result is printed.

### Detailed Output

The program will unpack all files from `archive.zip` into the `unpacked_files` directory. The output will be:
```
Successfully unpacked zip file to: unpacked_files
```

### Summary

In Go, you can use the `archive/zip` package to unpack files from a zip archive. By defining a function to handle file extraction and directory creation, you can easily extract the contents of a zip file. This approach is useful for decompressing backups, extracting resources, or handling zip file uploads in applications.