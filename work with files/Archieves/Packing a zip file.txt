\\ work with files — Archives — Packing a zip file


Packing a zip file in Go involves using the `archive/zip` package to create and write files into a zip archive. Below is an example demonstrating how to pack multiple files into a zip archive.

### Example: Packing Files into a Zip Archive

Let's create an example where we pack multiple files into a zip archive.

#### Step 1: Import Necessary Packages

First, import the necessary packages.

```go
package main

import (
    "archive/zip"
    "fmt"
    "io"
    "os"
    "path/filepath"
)
```

#### Step 2: Define a Function to Add Files to the Zip Archive

Create a function that takes a list of file paths and a zip writer, and adds the files to the zip archive.

```go
// Function to add files to the zip archive
func addFilesToZip(zipWriter *zip.Writer, files []string) error {
    for _, file := range files {
        // Open the file
        f, err := os.Open(file)
        if err != nil {
            return err
        }
        defer f.Close()

        // Get the file info
        info, err := f.Stat()
        if err != nil {
            return err
        }

        // Create a zip header from the file info
        header, err := zip.FileInfoHeader(info)
        if err != nil {
            return err
        }
        header.Name = filepath.Base(file)
        header.Method = zip.Deflate

        // Create a writer for the file in the zip archive
        writer, err := zipWriter.CreateHeader(header)
        if err != nil {
            return err
        }

        // Copy the file content to the zip writer
        if _, err = io.Copy(writer, f); err != nil {
            return err
        }
    }
    return nil
}
```

#### Step 3: Define a Function to Create a Zip Archive

Create a function that takes a list of file paths and the output zip file path, and creates the zip archive.

```go
// Function to create a zip archive
func createZipArchive(outputPath string, files []string) error {
    // Create the zip file
    zipFile, err := os.Create(outputPath)
    if err != nil {
        return err
    }
    defer zipFile.Close()

    // Create a new zip writer
    zipWriter := zip.NewWriter(zipFile)
    defer zipWriter.Close()

    // Add files to the zip archive
    if err := addFilesToZip(zipWriter, files); err != nil {
        return err
    }

    return nil
}
```

#### Step 4: Use the Function

Finally, use the `createZipArchive` function in the `main` function to pack multiple files into a zip archive.

```go
func main() {
    // List of files to be added to the zip archive
    files := []string{"file1.txt", "file2.txt", "file3.txt"}

    // Output path for the zip archive
    outputPath := "archive.zip"

    // Create the zip archive
    if err := createZipArchive(outputPath, files); err != nil {
        fmt.Printf("Failed to create zip archive: %v\n", err)
        return
    }

    fmt.Printf("Successfully created zip archive: %s\n", outputPath)
}
```

### Explanation

1. **Import Necessary Packages**:
   - The `archive/zip` package is used to create and write to zip archives.
   - The `io`, `os`, and `path/filepath` packages are used for file handling.

2. **Define `addFilesToZip` Function**:
   - This function takes a zip writer and a list of file paths, and adds each file to the zip archive.
   - It opens each file, creates a zip header, and writes the file content to the zip archive.

3. **Define `createZipArchive` Function**:
   - This function takes the output path for the zip archive and a list of file paths.
   - It creates the zip file and zip writer, and calls `addFilesToZip` to add the files to the archive.

4. **Use the Functions in `main`**:
   - In `main`, a list of files to be zipped is defined.
   - The `createZipArchive` function is called to create the zip archive, and the result is printed.

### Detailed Output

The program will create a zip archive named `archive.zip` containing `file1.txt`, `file2.txt`, and `file3.txt`. The output will be:
```
Successfully created zip archive: archive.zip
```

### Summary

In Go, you can use the `archive/zip` package to pack multiple files into a zip archive. By defining functions to handle file addition and zip archive creation, you can easily zip multiple files. This approach is useful for creating compressed backups, distributing multiple files, or packaging resources for deployment.