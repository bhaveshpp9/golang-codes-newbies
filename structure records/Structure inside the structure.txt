\\ Structures records â€” Structure inside the structure

In Go, structs can contain other structs as fields. This practice, known as composition, allows you to build complex data types by combining simpler ones. Structs can either embed other structs directly or include them as named fields.

### Example: Named Struct Fields

In this approach, a struct contains another struct as a named field.

#### Example Code

```go
package main

import (
    "fmt"
)

// Define the Address struct
type Address struct {
    Street string
    City   string
    State  string
    Zip    string
}

// Define the Person struct with an Address field
type Person struct {
    FirstName string
    LastName  string
    Age       int
    Address   Address
}

func main() {
    // Initialize a Person instance with an Address
    person := Person{
        FirstName: "Alice",
        LastName:  "Johnson",
        Age:       28,
        Address: Address{
            Street: "123 Main St",
            City:   "Anytown",
            State:  "CA",
            Zip:    "12345",
        },
    }

    // Access and print the nested fields
    fmt.Printf("Person: %+v\n", person)
    fmt.Printf("Address: %s, %s, %s %s\n",
        person.Address.Street,
        person.Address.City,
        person.Address.State,
        person.Address.Zip,
    )
}
```

### Explanation

1. **Define the `Address` Struct**:
   - The `Address` struct has fields `Street`, `City`, `State`, and `Zip`.

2. **Define the `Person` Struct with an `Address` Field**:
   - The `Person` struct has fields `FirstName`, `LastName`, `Age`, and an `Address` field of type `Address`.

3. **Initialize a `Person` Instance with an `Address`**:
   - We create an instance of `Person`, initializing both the `Person` fields and the nested `Address` fields.

4. **Access and Print the Nested Fields**:
   - We access the nested fields using dot notation and print them.

### Detailed Output

The output of the above code will be:
```
Person: {FirstName:Alice LastName:Johnson Age:28 Address:{Street:123 Main St City:Anytown State:CA Zip:12345}}
Address: 123 Main St, Anytown, CA 12345
```

### Example: Embedded Structs

In this approach, a struct embeds another struct directly, which allows the fields of the embedded struct to be accessed as if they were part of the outer struct.

#### Example Code

```go
package main

import (
    "fmt"
)

// Define the Address struct
type Address struct {
    Street string
    City   string
    State  string
    Zip    string
}

// Define the Person struct with an embedded Address
type Person struct {
    FirstName string
    LastName  string
    Age       int
    Address   // Embedded struct
}

func main() {
    // Initialize a Person instance with an embedded Address
    person := Person{
        FirstName: "Bob",
        LastName:  "Smith",
        Age:       35,
        Address: Address{
            Street: "456 Elm St",
            City:   "Othertown",
            State:  "TX",
            Zip:    "67890",
        },
    }

    // Access and print the nested fields directly
    fmt.Printf("Person: %+v\n", person)
    fmt.Printf("Address: %s, %s, %s %s\n",
        person.Street,  // Access embedded struct fields directly
        person.City,
        person.State,
        person.Zip,
    )
}
```

### Explanation

1. **Define the `Address` Struct**:
   - The `Address` struct has fields `Street`, `City`, `State`, and `Zip`.

2. **Define the `Person` Struct with an Embedded `Address`**:
   - The `Person` struct embeds the `Address` struct directly without naming it, allowing direct access to its fields.

3. **Initialize a `Person` Instance with an Embedded `Address`**:
   - We create an instance of `Person`, initializing both the `Person` fields and the nested `Address` fields.

4. **Access and Print the Nested Fields Directly**:
   - We access the nested fields directly using the outer struct's name.

### Detailed Output

The output of the above code will be:
```
Person: {FirstName:Bob LastName:Smith Age:35 Address:{Street:456 Elm St City:Othertown State:TX Zip:67890}}
Address: 456 Elm St, Othertown, TX 67890
```

### Example: Methods on Embedded Structs

Methods defined on the embedded struct can be called on the outer struct as if they were defined on it.

#### Example Code

```go
package main

import (
    "fmt"
)

// Define the Address struct with a method
type Address struct {
    Street string
    City   string
    State  string
    Zip    string
}

// Method to format the address as a string
func (a Address) FullAddress() string {
    return fmt.Sprintf("%s, %s, %s %s", a.Street, a.City, a.State, a.Zip)
}

// Define the Person struct with an embedded Address
type Person struct {
    FirstName string
    LastName  string
    Age       int
    Address   // Embedded struct
}

func main() {
    // Initialize a Person instance with an embedded Address
    person := Person{
        FirstName: "Charlie",
        LastName:  "Brown",
        Age:       40,
        Address: Address{
            Street: "789 Pine St",
            City:   "Anycity",
            State:  "NY",
            Zip:    "11223",
        },
    }

    // Access and print the full address using the method from the embedded struct
    fmt.Printf("Person: %+v\n", person)
    fmt.Printf("Full Address: %s\n", person.FullAddress())
}
```

### Explanation

1. **Define the `Address` Struct with a Method**:
   - The `Address` struct has a `FullAddress` method that formats the address as a string.

2. **Define the `Person` Struct with an Embedded `Address`**:
   - The `Person` struct embeds the `Address` struct directly.

3. **Initialize a `Person` Instance with an Embedded `Address`**:
   - We create an instance of `Person`, initializing both the `Person` fields and the nested `Address` fields.

4. **Call the Method from the Embedded Struct**:
   - We call the `FullAddress` method on the `Person` instance, which is defined on the embedded `Address` struct.

### Detailed Output

The output of the above code will be:
```
Person: {FirstName:Charlie LastName:Brown Age:40 Address:{Street:789 Pine St City:Anycity State:NY Zip:11223}}
Full Address: 789 Pine St, Anycity, NY 11223
```

### Summary

In Go, you can include one struct inside another either as a named field or by embedding it directly. Using composition, you can build complex data structures, reuse fields, and methods from embedded structs, and achieve a clean and maintainable codebase. This approach provides flexibility and encapsulation, making it a powerful feature in Go's type system.